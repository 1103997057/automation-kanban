{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/pages/api/boards/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1737299287274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737299661087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +1,120 @@\n+// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n-import { validate } from 'uuid';\r\n-import { Column } from '@/types';\r\n import { v4 as uuidv4 } from 'uuid';\r\n+import { getSession } from 'next-auth/react';\r\n+import { Session } from 'next-auth';\r\n \r\n+type Board = {\r\n+    name: string;\r\n+    columns?: Column[];\r\n+    uuid: string;\r\n+    user: string;\r\n+};\r\n+\r\n+type Column = {\r\n+    name: string;\r\n+    color: string;\r\n+    position: number;\r\n+    uuid: string;\r\n+};\r\n+\r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const userId = req.auth?.userId; // Replace session with Clerk's auth userId\r\n-    if (!userId) {\r\n+    const session = await getSession({ req });\r\n+    if (!session) {\r\n         return res.status(401).end('Unauthorized');\r\n     }\r\n \r\n-    if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n-        return res.status(400).end('Invalid board UUID');\r\n-    }\r\n-\r\n     switch (req.method) {\r\n-        case 'DELETE': {\r\n-            return await deleteBoard(req, res, userId);\r\n+        case 'POST': {\r\n+            return await createBoard(req, res, session);\r\n         }\r\n         case 'GET': {\r\n-            return await getBoard(req, res, userId);\r\n+            return await getBoards(res, session);\r\n         }\r\n-        case 'PUT': {\r\n-            return await updateBoard(req, res, userId);\r\n-        }\r\n         default:\r\n             return res.status(405).end('Method not allowed');\r\n     }\r\n }\r\n \r\n-const deleteBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n-    const boardUUID = req.query.uuid?.toString();\r\n-    if (!boardUUID) {\r\n-        return res.status(400).end('Board uuid is required');\r\n+const validateBoard = (board: Board) => {\r\n+    if (!board.name) {\r\n+        throw new Error('Board name is required');\r\n+    } else if (board.name.trim().length < 1) {\r\n+        throw new Error('Board name cannot be empty');\r\n+    } else if (board.name.trim().length > 30) {\r\n+        throw new Error('Board name cannot be longer than 30 characters');\r\n     }\r\n-\r\n-    const result = await prisma.board.deleteMany({\r\n-        where: {\r\n-            uuid: boardUUID,\r\n-            userId,\r\n-        },\r\n-    });\r\n-\r\n-    if (result.count === 0) return res.status(404).end('Board not found');\r\n-    return res.status(200).end();\r\n };\r\n \r\n-const getBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n+const getBoards = async (res: NextApiResponse, session: Session) => {\r\n     try {\r\n-        const board = await prisma.board.findFirst({\r\n+        const boards = await prisma.board.findMany({\r\n             where: {\r\n-                uuid: req.query.uuid?.toString(),\r\n-                userId,\r\n+                userId: session.user.id,\r\n             },\r\n             include: {\r\n-                columns: {\r\n-                    include: {\r\n-                        tasks: {\r\n-                            include: {\r\n-                                subtasks: {\r\n-                                    orderBy: {\r\n-                                        id: 'asc',\r\n-                                    },\r\n-                                },\r\n-                            },\r\n-                            orderBy: {\r\n-                                position: 'asc',\r\n-                            },\r\n-                        },\r\n-                    },\r\n-                    orderBy: {\r\n-                        position: 'asc',\r\n-                    },\r\n-                },\r\n+                columns: true,\r\n             },\r\n         });\r\n-\r\n-        if (!board) {\r\n-            res.status(404).end('Board not found');\r\n-        } else {\r\n-            res.status(200).json(board);\r\n-        }\r\n-    } catch (e) {\r\n-        console.error(e);\r\n-        res.status(500).json({ error: 'Something went wrong' });\r\n+        res.status(200).json(boards);\r\n+    } catch (error) {\r\n+        res.status(500).json({ error });\r\n     }\r\n };\r\n \r\n-const updateBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n-    const boardUUID = req.query.uuid?.toString();\r\n-    const currentBoardData = await prisma.board.findFirst({\r\n-        where: {\r\n-            uuid: boardUUID,\r\n-            userId,\r\n-        },\r\n-        include: {\r\n-            columns: true,\r\n-        },\r\n-    });\r\n-\r\n-    if (!currentBoardData) {\r\n-        return res.status(404).end('Board not found');\r\n-    }\r\n-\r\n-    const columns: Column[] = req.body.columns;\r\n-    const columnsToDelete: string[] = [];\r\n-\r\n-    if (columns) {\r\n+const createBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+    const boardData: { name: string; columns: { name: string; color: string }[] } = req.body;\r\n+    const board: Board = {\r\n+        name: boardData.name,\r\n+        uuid: uuidv4(),\r\n+        user: session.user.id,\r\n+    };\r\n+    if (boardData.columns) {\r\n         const set = new Set();\r\n-        if (columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n+        if (boardData.columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n             return res.status(400).json({ error: 'Column names must be unique' });\r\n         }\r\n+        board.columns = boardData.columns.map((column, i) => {\r\n+            return {\r\n+                name: column.name,\r\n+                color: column.color,\r\n+                position: i,\r\n+                userId: session.user.id,\r\n+                uuid: uuidv4(),\r\n+            };\r\n+        });\r\n     }\r\n \r\n-    // Find out which columns were removed and delete them\r\n-    for (const column of currentBoardData.columns) {\r\n-        const found = columns.find((c) => c.uuid === column.uuid);\r\n-        if (!found) {\r\n-            columnsToDelete.push(column.uuid);\r\n-        }\r\n+    try {\r\n+        validateBoard(board);\r\n+    } catch (error: any) {\r\n+        return res.status(400).json({ error: error.message });\r\n     }\r\n-\r\n-    // Create a new array of columns\r\n-    for (const column of columns) {\r\n-        if (!column.uuid) {\r\n-            column.uuid = uuidv4();\r\n-        }\r\n+    const payload = {\r\n+        data: {\r\n+            name: board.name,\r\n+            uuid: board.uuid,\r\n+            user: {\r\n+                connect: {\r\n+                    id: board.user,\r\n+                },\r\n+            },\r\n+            columns: {},\r\n+        },\r\n+    };\r\n+    if (board.columns) {\r\n+        payload.data.columns = {\r\n+            createMany: {\r\n+                data: board.columns,\r\n+            },\r\n+        };\r\n     }\r\n-\r\n-    await prisma.$transaction(async () => {\r\n-        if (req.body.name !== currentBoardData.name) {\r\n-            await prisma.board.updateMany({\r\n-                where: { uuid: boardUUID, userId },\r\n-                data: { name: req.body.name },\r\n-            });\r\n-        }\r\n-\r\n-        if (columnsToDelete.length) {\r\n-            await prisma.column.deleteMany({\r\n-                where: {\r\n-                    uuid: {\r\n-                        in: columnsToDelete,\r\n-                    },\r\n-                },\r\n-            });\r\n-        }\r\n-\r\n-        for (const column of columns) {\r\n-            await prisma.column.upsert({\r\n-                where: {\r\n-                    uuid: column.uuid,\r\n-                },\r\n-                create: {\r\n-                    uuid: column.uuid,\r\n-                    name: column.name,\r\n-                    position: column.position,\r\n-                    userId,\r\n-                    color: column.color || randomHexColor(),\r\n-                    board: {\r\n-                        connect: {\r\n-                            uuid: boardUUID,\r\n-                        },\r\n-                    },\r\n-                },\r\n-                update: {\r\n-                    name: column.name,\r\n-                    position: column.position,\r\n-                },\r\n-            });\r\n-        }\r\n-        return res.status(200).json('Board updated');\r\n-    });\r\n-};\r\n+    try {\r\n+        const newBoard = await prisma.board.create(payload);\r\n+        res.status(201).json(newBoard);\r\n+    } catch (error) {\r\n+        console.log(error);\r\n+        res.status(500).json({ error });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737383008624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\n+import type { NextApiRequest, NextApiResponse } from 'next';\r\n+import { prisma } from '../../../utils/db';\r\n+import { v4 as uuidv4 } from 'uuid';\r\n+import { getSession } from 'next-auth/react';\r\n+import { Session } from 'next-auth';\r\n+\r\n+type Board = {\r\n+    name: string;\r\n+    columns?: Column[];\r\n+    uuid: string;\r\n+    user: string;\r\n+};\r\n+\r\n+type Column = {\r\n+    name: string;\r\n+    color: string;\r\n+    position: number;\r\n+    uuid: string;\r\n+};\r\n+\r\n+export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n+    const session = await getSession({ req });\r\n+    if (!session) {\r\n+        return res.status(401).end('Unauthorized');\r\n+    }\r\n+\r\n+    switch (req.method) {\r\n+        case 'POST': {\r\n+            return await createBoard(req, res, session);\r\n+        }\r\n+        case 'GET': {\r\n+            return await getBoards(res, session);\r\n+        }\r\n+        default:\r\n+            return res.status(405).end('Method not allowed');\r\n+    }\r\n+}\r\n+\r\n+const validateBoard = (board: Board) => {\r\n+    if (!board.name) {\r\n+        throw new Error('Board name is required');\r\n+    } else if (board.name.trim().length < 1) {\r\n+        throw new Error('Board name cannot be empty');\r\n+    } else if (board.name.trim().length > 30) {\r\n+        throw new Error('Board name cannot be longer than 30 characters');\r\n+    }\r\n+};\r\n+\r\n+const getBoards = async (res: NextApiResponse, session: Session) => {\r\n+    try {\r\n+        const boards = await prisma.board.findMany({\r\n+            where: {\r\n+                userId: session.user.id,\r\n+            },\r\n+            include: {\r\n+                columns: true,\r\n+            },\r\n+        });\r\n+        res.status(200).json(boards);\r\n+    } catch (error) {\r\n+        res.status(500).json({ error });\r\n+    }\r\n+};\r\n+\r\n+const createBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+    const boardData: { name: string; columns: { name: string; color: string }[] } = req.body;\r\n+    const board: Board = {\r\n+        name: boardData.name,\r\n+        uuid: uuidv4(),\r\n+        user: session.user.id,\r\n+    };\r\n+    if (boardData.columns) {\r\n+        const set = new Set();\r\n+        if (boardData.columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n+            return res.status(400).json({ error: 'Column names must be unique' });\r\n+        }\r\n+        board.columns = boardData.columns.map((column, i) => {\r\n+            return {\r\n+                name: column.name,\r\n+                color: column.color,\r\n+                position: i,\r\n+                userId: session.user.id,\r\n+                uuid: uuidv4(),\r\n+            };\r\n+        });\r\n+    }\r\n+\r\n+    try {\r\n+        validateBoard(board);\r\n+    } catch (error: any) {\r\n+        return res.status(400).json({ error: error.message });\r\n+    }\r\n+    const payload = {\r\n+        data: {\r\n+            name: board.name,\r\n+            uuid: board.uuid,\r\n+            user: {\r\n+                connect: {\r\n+                    id: board.user,\r\n+                },\r\n+            },\r\n+            columns: {},\r\n+        },\r\n+    };\r\n+    if (board.columns) {\r\n+        payload.data.columns = {\r\n+            createMany: {\r\n+                data: board.columns,\r\n+            },\r\n+        };\r\n+    }\r\n+    try {\r\n+        const newBoard = await prisma.board.create(payload);\r\n+        res.status(201).json(newBoard);\r\n+    } catch (error) {\r\n+        console.log(error);\r\n+        res.status(500).json({ error });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737384784941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,125 +116,5 @@\n     } catch (error) {\r\n         console.log(error);\r\n         res.status(500).json({ error });\r\n     }\r\n-};\n-// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\n-import type { NextApiRequest, NextApiResponse } from 'next';\r\n-import { prisma } from '../../../utils/db';\r\n-import { v4 as uuidv4 } from 'uuid';\r\n-import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n-\r\n-type Board = {\r\n-    name: string;\r\n-    columns?: Column[];\r\n-    uuid: string;\r\n-    user: string;\r\n-};\r\n-\r\n-type Column = {\r\n-    name: string;\r\n-    color: string;\r\n-    position: number;\r\n-    uuid: string;\r\n-};\r\n-\r\n-export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n-        return res.status(401).end('Unauthorized');\r\n-    }\r\n-\r\n-    switch (req.method) {\r\n-        case 'POST': {\r\n-            return await createBoard(req, res, session);\r\n-        }\r\n-        case 'GET': {\r\n-            return await getBoards(res, session);\r\n-        }\r\n-        default:\r\n-            return res.status(405).end('Method not allowed');\r\n-    }\r\n-}\r\n-\r\n-const validateBoard = (board: Board) => {\r\n-    if (!board.name) {\r\n-        throw new Error('Board name is required');\r\n-    } else if (board.name.trim().length < 1) {\r\n-        throw new Error('Board name cannot be empty');\r\n-    } else if (board.name.trim().length > 30) {\r\n-        throw new Error('Board name cannot be longer than 30 characters');\r\n-    }\r\n-};\r\n-\r\n-const getBoards = async (res: NextApiResponse, session: Session) => {\r\n-    try {\r\n-        const boards = await prisma.board.findMany({\r\n-            where: {\r\n-                userId: session.user.id,\r\n-            },\r\n-            include: {\r\n-                columns: true,\r\n-            },\r\n-        });\r\n-        res.status(200).json(boards);\r\n-    } catch (error) {\r\n-        res.status(500).json({ error });\r\n-    }\r\n-};\r\n-\r\n-const createBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n-    const boardData: { name: string; columns: { name: string; color: string }[] } = req.body;\r\n-    const board: Board = {\r\n-        name: boardData.name,\r\n-        uuid: uuidv4(),\r\n-        user: session.user.id,\r\n-    };\r\n-    if (boardData.columns) {\r\n-        const set = new Set();\r\n-        if (boardData.columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n-            return res.status(400).json({ error: 'Column names must be unique' });\r\n-        }\r\n-        board.columns = boardData.columns.map((column, i) => {\r\n-            return {\r\n-                name: column.name,\r\n-                color: column.color,\r\n-                position: i,\r\n-                userId: session.user.id,\r\n-                uuid: uuidv4(),\r\n-            };\r\n-        });\r\n-    }\r\n-\r\n-    try {\r\n-        validateBoard(board);\r\n-    } catch (error: any) {\r\n-        return res.status(400).json({ error: error.message });\r\n-    }\r\n-    const payload = {\r\n-        data: {\r\n-            name: board.name,\r\n-            uuid: board.uuid,\r\n-            user: {\r\n-                connect: {\r\n-                    id: board.user,\r\n-                },\r\n-            },\r\n-            columns: {},\r\n-        },\r\n-    };\r\n-    if (board.columns) {\r\n-        payload.data.columns = {\r\n-            createMany: {\r\n-                data: board.columns,\r\n-            },\r\n-        };\r\n-    }\r\n-    try {\r\n-        const newBoard = await prisma.board.create(payload);\r\n-        res.status(201).json(newBoard);\r\n-    } catch (error) {\r\n-        console.log(error);\r\n-        res.status(500).json({ error });\r\n-    }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737789006581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,16 @@\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n import { v4 as uuidv4 } from 'uuid';\r\n import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n+import {  useAuth } from '@clerk/nextjs';\r\n+import { auth } from '@clerk/nextjs/server'\r\n \r\n type Board = {\r\n     name: string;\r\n     columns?: Column[];\r\n     uuid: string;\r\n-    user: string;\r\n+    userId: string;\r\n };\r\n \r\n type Column = {\r\n     name: string;\r\n@@ -19,19 +20,19 @@\n     uuid: string;\r\n };\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n+    const { userId } = auth(); // Clerk's `auth` method to get the authenticated user\r\n+    if (!userId) {\r\n         return res.status(401).end('Unauthorized');\r\n     }\r\n \r\n     switch (req.method) {\r\n         case 'POST': {\r\n-            return await createBoard(req, res, session);\r\n+            return await createBoard(req, res, userId);\r\n         }\r\n         case 'GET': {\r\n-            return await getBoards(res, session);\r\n+            return await getBoards(res, userId);\r\n         }\r\n         default:\r\n             return res.status(405).end('Method not allowed');\r\n     }\r\n@@ -46,13 +47,13 @@\n         throw new Error('Board name cannot be longer than 30 characters');\r\n     }\r\n };\r\n \r\n-const getBoards = async (res: NextApiResponse, session: Session) => {\r\n+const getBoards = async (res: NextApiResponse, userId: string) => {\r\n     try {\r\n         const boards = await prisma.board.findMany({\r\n             where: {\r\n-                userId: session.user.id,\r\n+                userId, // Filter by the authenticated user's ID\r\n             },\r\n             include: {\r\n                 columns: true,\r\n             },\r\n@@ -62,15 +63,16 @@\n         res.status(500).json({ error });\r\n     }\r\n };\r\n \r\n-const createBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const createBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const boardData: { name: string; columns: { name: string; color: string }[] } = req.body;\r\n     const board: Board = {\r\n         name: boardData.name,\r\n         uuid: uuidv4(),\r\n-        user: session.user.id,\r\n+        userId,\r\n     };\r\n+\r\n     if (boardData.columns) {\r\n         const set = new Set();\r\n         if (boardData.columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n             return res.status(400).json({ error: 'Column names must be unique' });\r\n@@ -79,9 +81,8 @@\n             return {\r\n                 name: column.name,\r\n                 color: column.color,\r\n                 position: i,\r\n-                userId: session.user.id,\r\n                 uuid: uuidv4(),\r\n             };\r\n         });\r\n     }\r\n@@ -90,31 +91,28 @@\n         validateBoard(board);\r\n     } catch (error: any) {\r\n         return res.status(400).json({ error: error.message });\r\n     }\r\n+\r\n     const payload = {\r\n         data: {\r\n             name: board.name,\r\n             uuid: board.uuid,\r\n-            user: {\r\n-                connect: {\r\n-                    id: board.user,\r\n-                },\r\n-            },\r\n-            columns: {},\r\n+            userId, // Associate the board with the authenticated user\r\n+            columns: board.columns\r\n+                ? {\r\n+                      createMany: {\r\n+                          data: board.columns,\r\n+                      },\r\n+                  }\r\n+                : undefined,\r\n         },\r\n     };\r\n-    if (board.columns) {\r\n-        payload.data.columns = {\r\n-            createMany: {\r\n-                data: board.columns,\r\n-            },\r\n-        };\r\n-    }\r\n+\r\n     try {\r\n         const newBoard = await prisma.board.create(payload);\r\n         res.status(201).json(newBoard);\r\n     } catch (error) {\r\n-        console.log(error);\r\n+        console.error(error);\r\n         res.status(500).json({ error });\r\n     }\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1737299287274,
            "name": "Commit-0",
            "content": "import type { NextApiRequest, NextApiResponse } from 'next';\r\nimport { prisma } from '../../../utils/db';\r\nimport { validate } from 'uuid';\r\nimport { Column } from '@/types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    const userId = req.auth?.userId; // Replace session with Clerk's auth userId\r\n    if (!userId) {\r\n        return res.status(401).end('Unauthorized');\r\n    }\r\n\r\n    if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n        return res.status(400).end('Invalid board UUID');\r\n    }\r\n\r\n    switch (req.method) {\r\n        case 'DELETE': {\r\n            return await deleteBoard(req, res, userId);\r\n        }\r\n        case 'GET': {\r\n            return await getBoard(req, res, userId);\r\n        }\r\n        case 'PUT': {\r\n            return await updateBoard(req, res, userId);\r\n        }\r\n        default:\r\n            return res.status(405).end('Method not allowed');\r\n    }\r\n}\r\n\r\nconst deleteBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n    const boardUUID = req.query.uuid?.toString();\r\n    if (!boardUUID) {\r\n        return res.status(400).end('Board uuid is required');\r\n    }\r\n\r\n    const result = await prisma.board.deleteMany({\r\n        where: {\r\n            uuid: boardUUID,\r\n            userId,\r\n        },\r\n    });\r\n\r\n    if (result.count === 0) return res.status(404).end('Board not found');\r\n    return res.status(200).end();\r\n};\r\n\r\nconst getBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n    try {\r\n        const board = await prisma.board.findFirst({\r\n            where: {\r\n                uuid: req.query.uuid?.toString(),\r\n                userId,\r\n            },\r\n            include: {\r\n                columns: {\r\n                    include: {\r\n                        tasks: {\r\n                            include: {\r\n                                subtasks: {\r\n                                    orderBy: {\r\n                                        id: 'asc',\r\n                                    },\r\n                                },\r\n                            },\r\n                            orderBy: {\r\n                                position: 'asc',\r\n                            },\r\n                        },\r\n                    },\r\n                    orderBy: {\r\n                        position: 'asc',\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        if (!board) {\r\n            res.status(404).end('Board not found');\r\n        } else {\r\n            res.status(200).json(board);\r\n        }\r\n    } catch (e) {\r\n        console.error(e);\r\n        res.status(500).json({ error: 'Something went wrong' });\r\n    }\r\n};\r\n\r\nconst updateBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n    const boardUUID = req.query.uuid?.toString();\r\n    const currentBoardData = await prisma.board.findFirst({\r\n        where: {\r\n            uuid: boardUUID,\r\n            userId,\r\n        },\r\n        include: {\r\n            columns: true,\r\n        },\r\n    });\r\n\r\n    if (!currentBoardData) {\r\n        return res.status(404).end('Board not found');\r\n    }\r\n\r\n    const columns: Column[] = req.body.columns;\r\n    const columnsToDelete: string[] = [];\r\n\r\n    if (columns) {\r\n        const set = new Set();\r\n        if (columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n            return res.status(400).json({ error: 'Column names must be unique' });\r\n        }\r\n    }\r\n\r\n    // Find out which columns were removed and delete them\r\n    for (const column of currentBoardData.columns) {\r\n        const found = columns.find((c) => c.uuid === column.uuid);\r\n        if (!found) {\r\n            columnsToDelete.push(column.uuid);\r\n        }\r\n    }\r\n\r\n    // Create a new array of columns\r\n    for (const column of columns) {\r\n        if (!column.uuid) {\r\n            column.uuid = uuidv4();\r\n        }\r\n    }\r\n\r\n    await prisma.$transaction(async () => {\r\n        if (req.body.name !== currentBoardData.name) {\r\n            await prisma.board.updateMany({\r\n                where: { uuid: boardUUID, userId },\r\n                data: { name: req.body.name },\r\n            });\r\n        }\r\n\r\n        if (columnsToDelete.length) {\r\n            await prisma.column.deleteMany({\r\n                where: {\r\n                    uuid: {\r\n                        in: columnsToDelete,\r\n                    },\r\n                },\r\n            });\r\n        }\r\n\r\n        for (const column of columns) {\r\n            await prisma.column.upsert({\r\n                where: {\r\n                    uuid: column.uuid,\r\n                },\r\n                create: {\r\n                    uuid: column.uuid,\r\n                    name: column.name,\r\n                    position: column.position,\r\n                    userId,\r\n                    color: column.color || randomHexColor(),\r\n                    board: {\r\n                        connect: {\r\n                            uuid: boardUUID,\r\n                        },\r\n                    },\r\n                },\r\n                update: {\r\n                    name: column.name,\r\n                    position: column.position,\r\n                },\r\n            });\r\n        }\r\n        return res.status(200).json('Board updated');\r\n    });\r\n};\r\n"
        }
    ]
}