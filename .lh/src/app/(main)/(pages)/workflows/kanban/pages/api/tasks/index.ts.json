{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/pages/api/tasks/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1737791412705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737793352028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,23 @@\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n import { v4 as uuidv4, validate } from 'uuid';\r\n import { NewTask } from '@/types';\r\n-import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n+import { getAuth } from '@clerk/nextjs/server';\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n+    const { userId } = getAuth(req);\r\n+\r\n+    if (!userId) {\r\n         return res.status(401).end('Unauthorized');\r\n     }\r\n \r\n     switch (req.method) {\r\n         case 'POST': {\r\n-            return await createTask(req, res, session);\r\n+            return await createTask(req, res, userId);\r\n         }\r\n         case 'GET': {\r\n-            return await getTasks(res, session);\r\n+            return await getTasks(res, userId);\r\n         }\r\n         default:\r\n             res.status(405).end('Method not allowed');\r\n             break;\r\n@@ -33,26 +33,26 @@\n         typeof data.column_uuid === 'string' &&\r\n         'name' in data &&\r\n         typeof data.name === 'string' &&\r\n         (!('description' in data) || typeof data.description === 'string') &&\r\n-        (!('subtasks' in data) || data.subtasks instanceof Array)\r\n+        (!('subtasks' in data) || Array.isArray(data.subtasks))\r\n     );\r\n };\r\n \r\n-const getTasks = async (res: NextApiResponse, session: Session) => {\r\n+const getTasks = async (res: NextApiResponse, userId: string) => {\r\n     try {\r\n         const tasks = await prisma.task.findMany({\r\n             where: {\r\n-                userId: session.user.id,\r\n+                userId: userId,\r\n             },\r\n         });\r\n         res.status(200).json(tasks);\r\n     } catch (error) {\r\n         res.status(500).json({ error });\r\n     }\r\n };\r\n \r\n-const createTask = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const createTask = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const taskData: unknown = req.body;\r\n     if (!isNewTask(taskData)) {\r\n         return res.status(400).json({ error: 'Invalid task data' });\r\n     }\r\n@@ -93,16 +93,16 @@\n     });\r\n \r\n     const nextPosition = existingColumnTasks.length ? existingColumnTasks[0].position + 1 : 0;\r\n \r\n-    const payload = {\r\n+    const payload: any = {\r\n         data: {\r\n             name: task.name,\r\n             uuid: task.uuid,\r\n             subtasks: {},\r\n             description: task.description,\r\n             position: nextPosition,\r\n-            userId: session.user.id,\r\n+            userId: userId,\r\n             column: {\r\n                 connect: {\r\n                     uuid: task.column_uuid,\r\n                 },\r\n@@ -111,23 +111,21 @@\n     };\r\n     if (task.subtasks) {\r\n         payload.data.subtasks = {\r\n             createMany: {\r\n-                data: task.subtasks.map((subtask) => {\r\n-                    return {\r\n-                        name: subtask.name,\r\n-                        userId: session.user.id,\r\n-                        uuid: uuidv4(),\r\n-                        completed: false,\r\n-                    };\r\n-                }),\r\n+                data: task.subtasks.map((subtask) => ({\r\n+                    name: subtask.name,\r\n+                    userId: userId,\r\n+                    uuid: uuidv4(),\r\n+                    completed: false,\r\n+                })),\r\n             },\r\n         };\r\n     }\r\n     try {\r\n         const newTask = await prisma.task.create(payload);\r\n\\ No newline at end of file\n         res.status(201).json(newTask);\r\n     } catch (error) {\r\n-        console.log(error);\r\n+        console.error(error);\r\n         res.status(500).json({ error });\r\n     }\r\n-};\n+};\r\n"
                }
            ],
            "date": 1737791412705,
            "name": "Commit-0",
            "content": "// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\nimport { prisma } from '../../../utils/db';\r\nimport { v4 as uuidv4, validate } from 'uuid';\r\nimport { NewTask } from '@/types';\r\nimport { getSession } from 'next-auth/react';\r\nimport { Session } from 'next-auth';\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    const session = await getSession({ req });\r\n    if (!session) {\r\n        return res.status(401).end('Unauthorized');\r\n    }\r\n\r\n    switch (req.method) {\r\n        case 'POST': {\r\n            return await createTask(req, res, session);\r\n        }\r\n        case 'GET': {\r\n            return await getTasks(res, session);\r\n        }\r\n        default:\r\n            res.status(405).end('Method not allowed');\r\n            break;\r\n    }\r\n}\r\n\r\nconst isNewTask = (data: unknown): data is NewTask => {\r\n    return (\r\n        typeof data === 'object' &&\r\n        data !== null &&\r\n        'column_uuid' in data &&\r\n        typeof data.column_uuid === 'string' &&\r\n        'name' in data &&\r\n        typeof data.name === 'string' &&\r\n        (!('description' in data) || typeof data.description === 'string') &&\r\n        (!('subtasks' in data) || data.subtasks instanceof Array)\r\n    );\r\n};\r\n\r\nconst getTasks = async (res: NextApiResponse, session: Session) => {\r\n    try {\r\n        const tasks = await prisma.task.findMany({\r\n            where: {\r\n                userId: session.user.id,\r\n            },\r\n        });\r\n        res.status(200).json(tasks);\r\n    } catch (error) {\r\n        res.status(500).json({ error });\r\n    }\r\n};\r\n\r\nconst createTask = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const taskData: unknown = req.body;\r\n    if (!isNewTask(taskData)) {\r\n        return res.status(400).json({ error: 'Invalid task data' });\r\n    }\r\n    if (taskData.name.length < 1 || taskData.name.length > 120) {\r\n        return res.status(400).json({ error: 'Task name must be between 1 and 120 characters' });\r\n    }\r\n    if (!validate(taskData.column_uuid)) {\r\n        return res.status(400).json({ error: 'Invalid column UUID' });\r\n    }\r\n    for (const subtask of taskData.subtasks ?? []) {\r\n        if (typeof subtask.name !== 'string' || (subtask.completed && typeof subtask.completed !== 'boolean')) {\r\n            return res.status(400).json({ error: 'Invalid subtask data' });\r\n        }\r\n    }\r\n    const task: NewTask & { uuid: string } = {\r\n        name: taskData.name,\r\n        description: taskData.description,\r\n        column_uuid: taskData.column_uuid,\r\n        subtasks: taskData.subtasks ?? [],\r\n        uuid: uuidv4(),\r\n    };\r\n    const columnData = await prisma.column.findUnique({\r\n        where: {\r\n            uuid: task.column_uuid,\r\n        },\r\n    });\r\n    if (!columnData) {\r\n        return res.status(404).json({ error: 'Column not found' });\r\n    }\r\n\r\n    const existingColumnTasks = await prisma.task.findMany({\r\n        where: {\r\n            column_uuid: task.column_uuid,\r\n        },\r\n        orderBy: {\r\n            position: 'desc',\r\n        },\r\n    });\r\n\r\n    const nextPosition = existingColumnTasks.length ? existingColumnTasks[0].position + 1 : 0;\r\n\r\n    const payload = {\r\n        data: {\r\n            name: task.name,\r\n            uuid: task.uuid,\r\n            subtasks: {},\r\n            description: task.description,\r\n            position: nextPosition,\r\n            userId: session.user.id,\r\n            column: {\r\n                connect: {\r\n                    uuid: task.column_uuid,\r\n                },\r\n            },\r\n        },\r\n    };\r\n    if (task.subtasks) {\r\n        payload.data.subtasks = {\r\n            createMany: {\r\n                data: task.subtasks.map((subtask) => {\r\n                    return {\r\n                        name: subtask.name,\r\n                        userId: session.user.id,\r\n                        uuid: uuidv4(),\r\n                        completed: false,\r\n                    };\r\n                }),\r\n            },\r\n        };\r\n    }\r\n    try {\r\n        const newTask = await prisma.task.create(payload);\r\n        res.status(201).json(newTask);\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.status(500).json({ error });\r\n    }\r\n};"
        }
    ]
}