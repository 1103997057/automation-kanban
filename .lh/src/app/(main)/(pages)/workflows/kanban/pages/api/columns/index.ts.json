{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/pages/api/columns/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1737384128741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737790739282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,50 +2,51 @@\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n import { v4 as uuidv4, validate } from 'uuid';\r\n import { NewColumn } from '@/types';\r\n-import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n+import { auth } from '@clerk/nextjs/server';\r\n \r\n const isNewColumn = (column: unknown): column is NewColumn => {\r\n     return (\r\n         typeof column === 'object' && column !== null && 'board_uuid' in column && 'name' in column && 'color' in column\r\n     );\r\n };\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n+    // Use Clerk's auth to retrieve the authenticated user's ID\r\n+    const { userId } = auth();\r\n+\r\n+    if (!userId) {\r\n         return res.status(401).end('Unauthorized');\r\n     }\r\n \r\n     switch (req.method) {\r\n         case 'POST': {\r\n-            return await createColumn(req, res, session);\r\n+            return await createColumn(req, res, userId);\r\n         }\r\n         case 'GET': {\r\n-            return await getColumns(res, session);\r\n+            return await getColumns(res, userId);\r\n         }\r\n         default:\r\n             res.status(405).end('Method not allowed');\r\n             break;\r\n     }\r\n }\r\n \r\n-const getColumns = async (res: NextApiResponse, session: Session) => {\r\n+const getColumns = async (res: NextApiResponse, userId: string) => {\r\n     try {\r\n         const tasks = await prisma.column.findMany({\r\n             where: {\r\n-                userId: session.user.id,\r\n+                userId: userId,\r\n             },\r\n         });\r\n         res.status(200).json(tasks);\r\n     } catch (error) {\r\n         res.status(500).json({ error });\r\n     }\r\n };\r\n \r\n-const createColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const createColumn = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const columnData: unknown = req.body;\r\n     if (!isNewColumn(columnData)) {\r\n         return res.status(400).json({ error: 'Invalid column data' });\r\n     }\r\n@@ -57,9 +58,9 @@\n     }\r\n     const boardData = await prisma.board.findFirst({\r\n         where: {\r\n             uuid: columnData.board_uuid,\r\n-            userId: session.user.id,\r\n+            userId: userId,\r\n         },\r\n         include: {\r\n             columns: true,\r\n         },\r\n@@ -94,9 +95,9 @@\n                     name: columnData.name,\r\n                     color: columnData.color,\r\n                     position: columnData.position as number,\r\n                     uuid: uuidv4(),\r\n-                    userId: session.user.id,\r\n+                    userId: userId,\r\n                     board: {\r\n                         connect: {\r\n                             uuid: columnData.board_uuid,\r\n                         },\r\n@@ -107,5 +108,5 @@\n         return res.status(200).json(response);\r\n     } catch (err) {\r\n         return res.status(500).json('Error creating column');\r\n     }\r\n-};\n\\ No newline at end of file\n+};\r\n"
                }
            ],
            "date": 1737384128741,
            "name": "Commit-0",
            "content": "// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\nimport { prisma } from '../../../utils/db';\r\nimport { v4 as uuidv4, validate } from 'uuid';\r\nimport { NewColumn } from '@/types';\r\nimport { getSession } from 'next-auth/react';\r\nimport { Session } from 'next-auth';\r\n\r\nconst isNewColumn = (column: unknown): column is NewColumn => {\r\n    return (\r\n        typeof column === 'object' && column !== null && 'board_uuid' in column && 'name' in column && 'color' in column\r\n    );\r\n};\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    const session = await getSession({ req });\r\n    if (!session) {\r\n        return res.status(401).end('Unauthorized');\r\n    }\r\n\r\n    switch (req.method) {\r\n        case 'POST': {\r\n            return await createColumn(req, res, session);\r\n        }\r\n        case 'GET': {\r\n            return await getColumns(res, session);\r\n        }\r\n        default:\r\n            res.status(405).end('Method not allowed');\r\n            break;\r\n    }\r\n}\r\n\r\nconst getColumns = async (res: NextApiResponse, session: Session) => {\r\n    try {\r\n        const tasks = await prisma.column.findMany({\r\n            where: {\r\n                userId: session.user.id,\r\n            },\r\n        });\r\n        res.status(200).json(tasks);\r\n    } catch (error) {\r\n        res.status(500).json({ error });\r\n    }\r\n};\r\n\r\nconst createColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const columnData: unknown = req.body;\r\n    if (!isNewColumn(columnData)) {\r\n        return res.status(400).json({ error: 'Invalid column data' });\r\n    }\r\n    if (!columnData.board_uuid || !validate(columnData.board_uuid)) {\r\n        return res.status(400).json({ error: 'Invalid board UUID' });\r\n    }\r\n    if (columnData.name.length < 1 || columnData.name.length > 20) {\r\n        return res.status(400).json({ error: 'Column name must be between 1 and 20 characters' });\r\n    }\r\n    const boardData = await prisma.board.findFirst({\r\n        where: {\r\n            uuid: columnData.board_uuid,\r\n            userId: session.user.id,\r\n        },\r\n        include: {\r\n            columns: true,\r\n        },\r\n    });\r\n    if (!boardData) {\r\n        return res.status(404).json({ error: 'Board not found' });\r\n    }\r\n    if (boardData.columns.find((column) => column.name.toLowerCase() === columnData.name.toLowerCase())) {\r\n        return res.status(400).json({ error: 'Column with this name already exists on this board' });\r\n    }\r\n    const positionSet = columnData.position !== undefined;\r\n    columnData.position = columnData.position ?? boardData.columns.length;\r\n    try {\r\n        const response = await prisma.$transaction(async (tx) => {\r\n            if (positionSet) {\r\n                await tx.column.updateMany({\r\n                    where: {\r\n                        board_uuid: columnData.board_uuid,\r\n                        position: {\r\n                            gte: columnData.position,\r\n                        },\r\n                    },\r\n                    data: {\r\n                        position: {\r\n                            increment: 1,\r\n                        },\r\n                    },\r\n                });\r\n            }\r\n            return await tx.column.create({\r\n                data: {\r\n                    name: columnData.name,\r\n                    color: columnData.color,\r\n                    position: columnData.position as number,\r\n                    uuid: uuidv4(),\r\n                    userId: session.user.id,\r\n                    board: {\r\n                        connect: {\r\n                            uuid: columnData.board_uuid,\r\n                        },\r\n                    },\r\n                },\r\n            });\r\n        });\r\n        return res.status(200).json(response);\r\n    } catch (err) {\r\n        return res.status(500).json('Error creating column');\r\n    }\r\n};"
        }
    ]
}