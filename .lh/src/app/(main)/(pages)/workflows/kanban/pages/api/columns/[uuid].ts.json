{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/pages/api/columns/[uuid].ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1737383421989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737790996604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n // Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n import { validate } from 'uuid';\r\n-import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n+import { auth } from '@clerk/nextjs/server';\r\n \r\n type UpdatedColumnData = {\r\n     name?: string;\r\n     color?: string;\r\n@@ -39,37 +38,40 @@\n     });\r\n };\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n+    // Use Clerk's auth to get the authenticated user\r\n+    const { userId } = auth();\r\n+\r\n+    if (!userId) {\r\n         return res.status(401).end('Unauthorized');\r\n     }\r\n \r\n     if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n         return res.status(400).end('Invalid column UUID');\r\n     }\r\n+\r\n     switch (req.method) {\r\n         case 'DELETE': {\r\n-            return await deleteColumn(req, res, session);\r\n+            return await deleteColumn(req, res, userId);\r\n         }\r\n         case 'GET': {\r\n-            return await getColumn(req, res, session);\r\n+            return await getColumn(req, res, userId);\r\n         }\r\n         case 'PUT': {\r\n-            return await updateColumn(req, res, session);\r\n+            return await updateColumn(req, res, userId);\r\n         }\r\n         default:\r\n             return res.status(405).end('Method not allowed');\r\n     }\r\n }\r\n \r\n-const deleteColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const deleteColumn = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const columnUUID = req.query.uuid?.toString();\r\n     const columnData = await prisma.column.findFirst({\r\n         where: {\r\n             uuid: columnUUID,\r\n-            userId: session.user.id,\r\n+            userId: userId,\r\n         },\r\n     });\r\n     if (!columnData) {\r\n         return res.status(404).end('Column not found');\r\n@@ -89,15 +91,15 @@\n         return res.status(500).end('Something went wrong');\r\n     }\r\n };\r\n \r\n-const getColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const getColumn = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const columnUUID = req.query.uuid?.toString();\r\n     try {\r\n         const column = await prisma.column.findFirst({\r\n             where: {\r\n                 uuid: columnUUID,\r\n-                userId: session.user.id,\r\n+                userId: userId,\r\n             },\r\n             include: {\r\n                 tasks: true,\r\n             },\r\n@@ -111,15 +113,15 @@\n         return res.status(500).end('Something went wrong');\r\n     }\r\n };\r\n \r\n-const updateColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const updateColumn = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const columnUUID = req.query.uuid?.toString();\r\n     const columnData: UpdatedColumnData = req.body;\r\n     const currentColumnData = await prisma.column.findFirst({\r\n         where: {\r\n             uuid: columnUUID,\r\n-            userId: session.user.id,\r\n+            userId: userId,\r\n         },\r\n     });\r\n     if (!currentColumnData) {\r\n         return res.status(404).end('Column not found');\r\n@@ -148,5 +150,5 @@\n     } catch (error: any) {\r\n         console.error(error);\r\n         return res.status(500).end('Something went wrong');\r\n     }\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1740412005958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     const columnUUID = req.query.uuid?.toString();\r\n     const columnData = await prisma.column.findFirst({\r\n         where: {\r\n             uuid: columnUUID,\r\n-            userId: userId,\r\n+         clerkId   : userId,\r\n         },\r\n     });\r\n     if (!columnData) {\r\n         return res.status(404).end('Column not found');\r\n@@ -97,9 +97,9 @@\n     try {\r\n         const column = await prisma.column.findFirst({\r\n             where: {\r\n                 uuid: columnUUID,\r\n-                userId: userId,\r\n+                clerkId: userId,\r\n             },\r\n             include: {\r\n                 tasks: true,\r\n             },\r\n@@ -119,9 +119,9 @@\n     const columnData: UpdatedColumnData = req.body;\r\n     const currentColumnData = await prisma.column.findFirst({\r\n         where: {\r\n             uuid: columnUUID,\r\n-            userId: userId,\r\n+            clerkId: userId,\r\n         },\r\n     });\r\n     if (!currentColumnData) {\r\n         return res.status(404).end('Column not found');\r\n"
                }
            ],
            "date": 1737383421989,
            "name": "Commit-0",
            "content": "// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\nimport { prisma } from '../../../utils/db';\r\nimport { validate } from 'uuid';\r\nimport { getSession } from 'next-auth/react';\r\nimport { Session } from 'next-auth';\r\n\r\ntype UpdatedColumnData = {\r\n    name?: string;\r\n    color?: string;\r\n    position?: number;\r\n};\r\n\r\nconst decrementHigherPositions = (boardUUID: string, position: number) => {\r\n    return prisma.column.updateMany({\r\n        where: {\r\n            board_uuid: boardUUID,\r\n            position: {\r\n                gt: position,\r\n            },\r\n        },\r\n        data: {\r\n            position: { decrement: 1 },\r\n        },\r\n    });\r\n};\r\n\r\nconst incrementFromPosition = (boardUUID: string, position: number) => {\r\n    return prisma.column.updateMany({\r\n        where: {\r\n            board_uuid: boardUUID,\r\n            position: {\r\n                gte: position,\r\n            },\r\n        },\r\n        data: {\r\n            position: { increment: 1 },\r\n        },\r\n    });\r\n};\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    const session = await getSession({ req });\r\n    if (!session) {\r\n        return res.status(401).end('Unauthorized');\r\n    }\r\n\r\n    if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n        return res.status(400).end('Invalid column UUID');\r\n    }\r\n    switch (req.method) {\r\n        case 'DELETE': {\r\n            return await deleteColumn(req, res, session);\r\n        }\r\n        case 'GET': {\r\n            return await getColumn(req, res, session);\r\n        }\r\n        case 'PUT': {\r\n            return await updateColumn(req, res, session);\r\n        }\r\n        default:\r\n            return res.status(405).end('Method not allowed');\r\n    }\r\n}\r\n\r\nconst deleteColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const columnUUID = req.query.uuid?.toString();\r\n    const columnData = await prisma.column.findFirst({\r\n        where: {\r\n            uuid: columnUUID,\r\n            userId: session.user.id,\r\n        },\r\n    });\r\n    if (!columnData) {\r\n        return res.status(404).end('Column not found');\r\n    }\r\n    try {\r\n        await prisma.$transaction([\r\n            prisma.column.delete({\r\n                where: {\r\n                    uuid: columnUUID,\r\n                },\r\n            }),\r\n            decrementHigherPositions(columnData.board_uuid, columnData.position),\r\n        ]);\r\n        res.status(200).end();\r\n    } catch (error: any) {\r\n        console.error(error);\r\n        return res.status(500).end('Something went wrong');\r\n    }\r\n};\r\n\r\nconst getColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const columnUUID = req.query.uuid?.toString();\r\n    try {\r\n        const column = await prisma.column.findFirst({\r\n            where: {\r\n                uuid: columnUUID,\r\n                userId: session.user.id,\r\n            },\r\n            include: {\r\n                tasks: true,\r\n            },\r\n        });\r\n        if (!column) {\r\n            return res.status(404).end('Column not found');\r\n        }\r\n        res.status(200).json(column);\r\n    } catch (error: any) {\r\n        console.error(error);\r\n        return res.status(500).end('Something went wrong');\r\n    }\r\n};\r\n\r\nconst updateColumn = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const columnUUID = req.query.uuid?.toString();\r\n    const columnData: UpdatedColumnData = req.body;\r\n    const currentColumnData = await prisma.column.findFirst({\r\n        where: {\r\n            uuid: columnUUID,\r\n            userId: session.user.id,\r\n        },\r\n    });\r\n    if (!currentColumnData) {\r\n        return res.status(404).end('Column not found');\r\n    }\r\n    const { name, color, position } = columnData;\r\n    const payload = {\r\n        name: name ?? currentColumnData.name,\r\n        color: color ?? currentColumnData.color,\r\n        position: position ?? currentColumnData.position,\r\n    };\r\n\r\n    try {\r\n        const response = await prisma.$transaction(async (tx) => {\r\n            if (position !== undefined && position !== currentColumnData.position) {\r\n                await decrementHigherPositions(currentColumnData.board_uuid, currentColumnData.position);\r\n                await incrementFromPosition(currentColumnData.board_uuid, position);\r\n            }\r\n            return await tx.column.update({\r\n                where: {\r\n                    uuid: columnUUID,\r\n                },\r\n                data: payload,\r\n            });\r\n        });\r\n        res.status(200).json(response);\r\n    } catch (error: any) {\r\n        console.error(error);\r\n        return res.status(500).end('Something went wrong');\r\n    }\r\n};"
        }
    ]
}