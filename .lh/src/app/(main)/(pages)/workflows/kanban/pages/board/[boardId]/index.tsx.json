{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/pages/board/[boardId]/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1737805399287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737808590923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { getSession, GetSessionParams } from 'next-auth/react';\r\n+import { getAuth } from '@clerk/nextjs/server';\r\n import Head from 'next/head';\r\n import { useEffect } from 'react';\r\n import { mutate } from 'swr';\r\n import Board from '../../../components/Board/Board';\r\n@@ -66,12 +66,12 @@\n         </Layout>\r\n     );\r\n }\r\n \r\n-export async function getServerSideProps(context: GetSessionParams) {\r\n-    const session = await getSession(context);\r\n+export async function getServerSideProps(context: any) {\r\n+    const { userId } = getAuth(context.req);\r\n \r\n-    if (!session) {\r\n+    if (!userId) {\r\n         return {\r\n             redirect: {\r\n                 destination: '/login',\r\n                 permanent: false,\r\n@@ -79,7 +79,7 @@\n         };\r\n     }\r\n \r\n     return {\r\n-        props: { session },\r\n+        props: {}, // Add any necessary props\r\n     };\r\n\\ No newline at end of file\n-}\n+}\r\n"
                }
            ],
            "date": 1737805399287,
            "name": "Commit-0",
            "content": "import { getSession, GetSessionParams } from 'next-auth/react';\r\nimport Head from 'next/head';\r\nimport { useEffect } from 'react';\r\nimport { mutate } from 'swr';\r\nimport Board from '../../../components/Board/Board';\r\nimport Layout from '../../../components/Layout/Layout';\r\nimport TaskDetails from '../../../components/Modals/TaskDetails';\r\nimport Spinner from '../../../components/Spinner/Spinner';\r\nimport useModal from '../../../hooks/useModal';\r\nimport { useBoardsContext } from '../../../store/BoardListContext';\r\n\r\nexport default function BoardPage() {\r\n    const { selectedBoard, selectedTask, setSelectedTask, isLoading, isValidating } = useBoardsContext();\r\n    const taskDetailsModal = useModal();\r\n    const Modal = taskDetailsModal.Component;\r\n\r\n    useEffect(() => {\r\n        if (selectedTask) {\r\n            taskDetailsModal.open();\r\n        }\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        if (selectedBoard && !taskDetailsModal.isOpen) {\r\n            setSelectedTask(null);\r\n            mutate(`/api/boards/${selectedBoard.uuid}`);\r\n        }\r\n    }, [taskDetailsModal.isOpen]);\r\n\r\n    return (\r\n        <Layout>\r\n            <Head>\r\n                <title>{`Kanban${selectedBoard?.name ? ' - ' + selectedBoard.name : ''}`}</title>\r\n                <meta name=\"description\" content={`Task management web app`} />\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n                <link rel=\"icon\" href=\"/favicon.svg\" />\r\n            </Head>\r\n            <main className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n                {selectedBoard ? (\r\n                    <Board boardUUID={selectedBoard.uuid} />\r\n                ) : (\r\n                    <div className=\"flex h-full items-center justify-center\">\r\n                        {isLoading || isValidating ? (\r\n                            <Spinner />\r\n                        ) : (\r\n                            <div>\r\n                                <h2 className=\"mb-4 text-3xl font-bold\">Board not found</h2>\r\n                                <p>\r\n                                    This board does not exist or is not available to you. <br />\r\n                                    Please select another board\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                <Modal>\r\n                    {selectedBoard && selectedTask && (\r\n                        <TaskDetails\r\n                            closeModal={taskDetailsModal.close}\r\n                            taskUUID={selectedTask}\r\n                            columns={selectedBoard.columns}\r\n                        />\r\n                    )}\r\n                </Modal>\r\n            </main>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport async function getServerSideProps(context: GetSessionParams) {\r\n    const session = await getSession(context);\r\n\r\n    if (!session) {\r\n        return {\r\n            redirect: {\r\n                destination: '/login',\r\n                permanent: false,\r\n            },\r\n        };\r\n    }\r\n\r\n    return {\r\n        props: { session },\r\n    };\r\n}"
        }
    ]
}