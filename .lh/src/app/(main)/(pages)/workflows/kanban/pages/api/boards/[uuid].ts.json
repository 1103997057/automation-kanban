{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/pages/api/boards/[uuid].ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1737299612085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737368230319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,78 +1,59 @@\n-// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n import { validate } from 'uuid';\r\n import { Column } from '@/types';\r\n import { v4 as uuidv4 } from 'uuid';\r\n-import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n import { randomHexColor } from '../../../utils/utils';\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n-        return res.status(401).end('Unauthorized');\r\n-    }\r\n     if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n         return res.status(400).end('Invalid board UUID');\r\n     }\r\n     switch (req.method) {\r\n         case 'DELETE': {\r\n-            return await deleteBoard(req, res, session);\r\n+            return await deleteBoard(req, res);\r\n         }\r\n         case 'GET': {\r\n-            return await getBoard(req, res, session);\r\n+            return await getBoard(req, res);\r\n         }\r\n         case 'PUT': {\r\n-            return await updateBoard(req, res, session);\r\n+            return await updateBoard(req, res);\r\n         }\r\n         default:\r\n             return res.status(405).end('Method not allowed');\r\n     }\r\n }\r\n \r\n-const deleteBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const deleteBoard = async (req: NextApiRequest, res: NextApiResponse) => {\r\n     const boardUUID = req.query.uuid?.toString();\r\n     if (!boardUUID) {\r\n         return res.status(400).end('Board uuid is required');\r\n     }\r\n     const result = await prisma.board.deleteMany({\r\n-        where: {\r\n-            uuid: boardUUID,\r\n-            userId: session.user.id,\r\n-        },\r\n+        where: { uuid: boardUUID },\r\n     });\r\n     if (result.count === 0) return res.status(404).end('Board not found');\r\n     return res.status(200).end();\r\n };\r\n \r\n-const getBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const getBoard = async (req: NextApiRequest, res: NextApiResponse) => {\r\n     try {\r\n         const board = await prisma.board.findFirst({\r\n-            where: {\r\n-                uuid: req.query.uuid?.toString(),\r\n-                userId: session.user.id,\r\n-            },\r\n+            where: { uuid: req.query.uuid?.toString() },\r\n             include: {\r\n                 columns: {\r\n                     include: {\r\n                         tasks: {\r\n                             include: {\r\n                                 subtasks: {\r\n-                                    orderBy: {\r\n-                                        id: 'asc',\r\n-                                    },\r\n+                                    orderBy: { id: 'asc' },\r\n                                 },\r\n                             },\r\n-                            orderBy: {\r\n-                                position: 'asc',\r\n-                            },\r\n+                            orderBy: { position: 'asc' },\r\n                         },\r\n                     },\r\n-                    orderBy: {\r\n-                        position: 'asc',\r\n-                    },\r\n+                    orderBy: { position: 'asc' },\r\n                 },\r\n             },\r\n         });\r\n         if (!board) {\r\n@@ -85,18 +66,13 @@\n         res.status(500).json({ error: 'Something went wrong' });\r\n     }\r\n };\r\n \r\n-const updateBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const updateBoard = async (req: NextApiRequest, res: NextApiResponse) => {\r\n     const boardUUID = req.query.uuid?.toString();\r\n     const currentBoardData = await prisma.board.findFirst({\r\n-        where: {\r\n-            uuid: boardUUID,\r\n-            userId: session.user.id,\r\n-        },\r\n-        include: {\r\n-            columns: true,\r\n-        },\r\n+        where: { uuid: boardUUID },\r\n+        include: { columns: true },\r\n     });\r\n     if (!currentBoardData) {\r\n         return res.status(404).end('Board not found');\r\n     }\r\n@@ -116,8 +92,9 @@\n         if (!found) {\r\n             columnsToDelete.push(column.uuid);\r\n         }\r\n     }\r\n+\r\n     // Create a new array of columns\r\n     for (const column of columns) {\r\n         if (!column.uuid) {\r\n             column.uuid = uuidv4();\r\n@@ -126,36 +103,30 @@\n \r\n     await prisma.$transaction(async () => {\r\n         if (req.body.name !== currentBoardData.name) {\r\n             await prisma.board.updateMany({\r\n-                where: { uuid: boardUUID, userId: session.user.id },\r\n+                where: { uuid: boardUUID },\r\n                 data: { name: req.body.name },\r\n             });\r\n         }\r\n         if (columnsToDelete.length) {\r\n             await prisma.column.deleteMany({\r\n                 where: {\r\n-                    uuid: {\r\n-                        in: columnsToDelete,\r\n-                    },\r\n+                    uuid: { in: columnsToDelete },\r\n                 },\r\n             });\r\n         }\r\n         for (const column of columns) {\r\n             await prisma.column.upsert({\r\n-                where: {\r\n-                    uuid: column.uuid,\r\n-                },\r\n+                where: { uuid: column.uuid },\r\n                 create: {\r\n                     uuid: column.uuid,\r\n                     name: column.name,\r\n                     position: column.position,\r\n-                    userId: session.user.id,\r\n                     color: column.color || randomHexColor(),\r\n+                    userId: 'system_user', // Default value\r\n                     board: {\r\n-                        connect: {\r\n-                            uuid: boardUUID,\r\n-                        },\r\n+                        connect: { uuid: boardUUID },\r\n                     },\r\n                 },\r\n                 update: {\r\n                     name: column.name,\r\n@@ -164,5 +135,5 @@\n             });\r\n         }\r\n         return res.status(200).json('Board updated');\r\n     });\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1737368312402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\n import type { NextApiRequest, NextApiResponse } from 'next';\r\n import { prisma } from '../../../utils/db';\r\n import { validate } from 'uuid';\r\n import { Column } from '@/types';\r\n"
                },
                {
                    "date": 1737384788320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,58 +3,76 @@\n import { prisma } from '../../../utils/db';\r\n import { validate } from 'uuid';\r\n import { Column } from '@/types';\r\n import { v4 as uuidv4 } from 'uuid';\r\n+import { getSession } from 'next-auth/react';\r\n+import { Session } from 'next-auth';\r\n import { randomHexColor } from '../../../utils/utils';\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n+    const session = await getSession({ req });\r\n+    if (!session) {\r\n+        return res.status(401).end('Unauthorized');\r\n+    }\r\n     if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n         return res.status(400).end('Invalid board UUID');\r\n     }\r\n     switch (req.method) {\r\n         case 'DELETE': {\r\n-            return await deleteBoard(req, res);\r\n+            return await deleteBoard(req, res, session);\r\n         }\r\n         case 'GET': {\r\n-            return await getBoard(req, res);\r\n+            return await getBoard(req, res, session);\r\n         }\r\n         case 'PUT': {\r\n-            return await updateBoard(req, res);\r\n+            return await updateBoard(req, res, session);\r\n         }\r\n         default:\r\n             return res.status(405).end('Method not allowed');\r\n     }\r\n }\r\n \r\n-const deleteBoard = async (req: NextApiRequest, res: NextApiResponse) => {\r\n+const deleteBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n     const boardUUID = req.query.uuid?.toString();\r\n     if (!boardUUID) {\r\n         return res.status(400).end('Board uuid is required');\r\n     }\r\n     const result = await prisma.board.deleteMany({\r\n-        where: { uuid: boardUUID },\r\n+        where: {\r\n+            uuid: boardUUID,\r\n+            userId: session.user.id,\r\n+        },\r\n     });\r\n     if (result.count === 0) return res.status(404).end('Board not found');\r\n     return res.status(200).end();\r\n };\r\n \r\n-const getBoard = async (req: NextApiRequest, res: NextApiResponse) => {\r\n+const getBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n     try {\r\n         const board = await prisma.board.findFirst({\r\n-            where: { uuid: req.query.uuid?.toString() },\r\n+            where: {\r\n+                uuid: req.query.uuid?.toString(),\r\n+                userId: session.user.id,\r\n+            },\r\n             include: {\r\n                 columns: {\r\n                     include: {\r\n                         tasks: {\r\n                             include: {\r\n                                 subtasks: {\r\n-                                    orderBy: { id: 'asc' },\r\n+                                    orderBy: {\r\n+                                        id: 'asc',\r\n+                                    },\r\n                                 },\r\n                             },\r\n-                            orderBy: { position: 'asc' },\r\n+                            orderBy: {\r\n+                                position: 'asc',\r\n+                            },\r\n                         },\r\n                     },\r\n-                    orderBy: { position: 'asc' },\r\n+                    orderBy: {\r\n+                        position: 'asc',\r\n+                    },\r\n                 },\r\n             },\r\n         });\r\n         if (!board) {\r\n@@ -67,13 +85,18 @@\n         res.status(500).json({ error: 'Something went wrong' });\r\n     }\r\n };\r\n \r\n-const updateBoard = async (req: NextApiRequest, res: NextApiResponse) => {\r\n+const updateBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n     const boardUUID = req.query.uuid?.toString();\r\n     const currentBoardData = await prisma.board.findFirst({\r\n-        where: { uuid: boardUUID },\r\n-        include: { columns: true },\r\n+        where: {\r\n+            uuid: boardUUID,\r\n+            userId: session.user.id,\r\n+        },\r\n+        include: {\r\n+            columns: true,\r\n+        },\r\n     });\r\n     if (!currentBoardData) {\r\n         return res.status(404).end('Board not found');\r\n     }\r\n@@ -93,9 +116,8 @@\n         if (!found) {\r\n             columnsToDelete.push(column.uuid);\r\n         }\r\n     }\r\n-\r\n     // Create a new array of columns\r\n     for (const column of columns) {\r\n         if (!column.uuid) {\r\n             column.uuid = uuidv4();\r\n@@ -104,30 +126,36 @@\n \r\n     await prisma.$transaction(async () => {\r\n         if (req.body.name !== currentBoardData.name) {\r\n             await prisma.board.updateMany({\r\n-                where: { uuid: boardUUID },\r\n+                where: { uuid: boardUUID, userId: session.user.id },\r\n                 data: { name: req.body.name },\r\n             });\r\n         }\r\n         if (columnsToDelete.length) {\r\n             await prisma.column.deleteMany({\r\n                 where: {\r\n-                    uuid: { in: columnsToDelete },\r\n+                    uuid: {\r\n+                        in: columnsToDelete,\r\n+                    },\r\n                 },\r\n             });\r\n         }\r\n         for (const column of columns) {\r\n             await prisma.column.upsert({\r\n-                where: { uuid: column.uuid },\r\n+                where: {\r\n+                    uuid: column.uuid,\r\n+                },\r\n                 create: {\r\n                     uuid: column.uuid,\r\n                     name: column.name,\r\n                     position: column.position,\r\n+                    userId: session.user.id,\r\n                     color: column.color || randomHexColor(),\r\n-                    userId: 'system_user', // Default value\r\n                     board: {\r\n-                        connect: { uuid: boardUUID },\r\n+                        connect: {\r\n+                            uuid: boardUUID,\r\n+                        },\r\n                     },\r\n                 },\r\n                 update: {\r\n                     name: column.name,\r\n@@ -136,5 +164,5 @@\n             });\r\n         }\r\n         return res.status(200).json('Board updated');\r\n     });\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737789674499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,56 +3,55 @@\n import { prisma } from '../../../utils/db';\r\n import { validate } from 'uuid';\r\n import { Column } from '@/types';\r\n import { v4 as uuidv4 } from 'uuid';\r\n-import { getSession } from 'next-auth/react';\r\n-import { Session } from 'next-auth';\r\n+import { auth } from '@clerk/nextjs/server';\r\n import { randomHexColor } from '../../../utils/utils';\r\n \r\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n-    const session = await getSession({ req });\r\n-    if (!session) {\r\n+    const { userId } = auth(); // Get authenticated user ID from Clerk\r\n+    if (!userId) {\r\n         return res.status(401).end('Unauthorized');\r\n     }\r\n     if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n         return res.status(400).end('Invalid board UUID');\r\n     }\r\n     switch (req.method) {\r\n         case 'DELETE': {\r\n-            return await deleteBoard(req, res, session);\r\n+            return await deleteBoard(req, res, userId);\r\n         }\r\n         case 'GET': {\r\n-            return await getBoard(req, res, session);\r\n+            return await getBoard(req, res, userId);\r\n         }\r\n         case 'PUT': {\r\n-            return await updateBoard(req, res, session);\r\n+            return await updateBoard(req, res, userId);\r\n         }\r\n         default:\r\n             return res.status(405).end('Method not allowed');\r\n     }\r\n }\r\n \r\n-const deleteBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const deleteBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const boardUUID = req.query.uuid?.toString();\r\n     if (!boardUUID) {\r\n-        return res.status(400).end('Board uuid is required');\r\n+        return res.status(400).end('Board UUID is required');\r\n     }\r\n     const result = await prisma.board.deleteMany({\r\n         where: {\r\n             uuid: boardUUID,\r\n-            userId: session.user.id,\r\n+            userId: userId,\r\n         },\r\n     });\r\n     if (result.count === 0) return res.status(404).end('Board not found');\r\n     return res.status(200).end();\r\n };\r\n \r\n-const getBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const getBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     try {\r\n         const board = await prisma.board.findFirst({\r\n             where: {\r\n                 uuid: req.query.uuid?.toString(),\r\n-                userId: session.user.id,\r\n+                userId: userId,\r\n             },\r\n             include: {\r\n                 columns: {\r\n                     include: {\r\n@@ -85,14 +84,14 @@\n         res.status(500).json({ error: 'Something went wrong' });\r\n     }\r\n };\r\n \r\n-const updateBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n+const updateBoard = async (req: NextApiRequest, res: NextApiResponse, userId: string) => {\r\n     const boardUUID = req.query.uuid?.toString();\r\n     const currentBoardData = await prisma.board.findFirst({\r\n         where: {\r\n             uuid: boardUUID,\r\n-            userId: session.user.id,\r\n+            userId: userId,\r\n         },\r\n         include: {\r\n             columns: true,\r\n         },\r\n@@ -126,9 +125,9 @@\n \r\n     await prisma.$transaction(async () => {\r\n         if (req.body.name !== currentBoardData.name) {\r\n             await prisma.board.updateMany({\r\n-                where: { uuid: boardUUID, userId: session.user.id },\r\n+                where: { uuid: boardUUID, userId: userId },\r\n                 data: { name: req.body.name },\r\n             });\r\n         }\r\n         if (columnsToDelete.length) {\r\n@@ -148,9 +147,9 @@\n                 create: {\r\n                     uuid: column.uuid,\r\n                     name: column.name,\r\n                     position: column.position,\r\n-                    userId: session.user.id,\r\n+                    userId: userId,\r\n                     color: column.color || randomHexColor(),\r\n                     board: {\r\n                         connect: {\r\n                             uuid: boardUUID,\r\n@@ -164,5 +163,5 @@\n             });\r\n         }\r\n         return res.status(200).json('Board updated');\r\n     });\r\n-};\n\\ No newline at end of file\n+};\r\n"
                }
            ],
            "date": 1737299612085,
            "name": "Commit-0",
            "content": "// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\nimport { prisma } from '../../../utils/db';\r\nimport { validate } from 'uuid';\r\nimport { Column } from '@/types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { getSession } from 'next-auth/react';\r\nimport { Session } from 'next-auth';\r\nimport { randomHexColor } from '../../../utils/utils';\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    const session = await getSession({ req });\r\n    if (!session) {\r\n        return res.status(401).end('Unauthorized');\r\n    }\r\n    if (!req.query.uuid || !validate(req.query.uuid.toString())) {\r\n        return res.status(400).end('Invalid board UUID');\r\n    }\r\n    switch (req.method) {\r\n        case 'DELETE': {\r\n            return await deleteBoard(req, res, session);\r\n        }\r\n        case 'GET': {\r\n            return await getBoard(req, res, session);\r\n        }\r\n        case 'PUT': {\r\n            return await updateBoard(req, res, session);\r\n        }\r\n        default:\r\n            return res.status(405).end('Method not allowed');\r\n    }\r\n}\r\n\r\nconst deleteBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const boardUUID = req.query.uuid?.toString();\r\n    if (!boardUUID) {\r\n        return res.status(400).end('Board uuid is required');\r\n    }\r\n    const result = await prisma.board.deleteMany({\r\n        where: {\r\n            uuid: boardUUID,\r\n            userId: session.user.id,\r\n        },\r\n    });\r\n    if (result.count === 0) return res.status(404).end('Board not found');\r\n    return res.status(200).end();\r\n};\r\n\r\nconst getBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    try {\r\n        const board = await prisma.board.findFirst({\r\n            where: {\r\n                uuid: req.query.uuid?.toString(),\r\n                userId: session.user.id,\r\n            },\r\n            include: {\r\n                columns: {\r\n                    include: {\r\n                        tasks: {\r\n                            include: {\r\n                                subtasks: {\r\n                                    orderBy: {\r\n                                        id: 'asc',\r\n                                    },\r\n                                },\r\n                            },\r\n                            orderBy: {\r\n                                position: 'asc',\r\n                            },\r\n                        },\r\n                    },\r\n                    orderBy: {\r\n                        position: 'asc',\r\n                    },\r\n                },\r\n            },\r\n        });\r\n        if (!board) {\r\n            res.status(404).end('Board not found');\r\n        } else {\r\n            res.status(200).json(board);\r\n        }\r\n    } catch (e) {\r\n        console.error(e);\r\n        res.status(500).json({ error: 'Something went wrong' });\r\n    }\r\n};\r\n\r\nconst updateBoard = async (req: NextApiRequest, res: NextApiResponse, session: Session) => {\r\n    const boardUUID = req.query.uuid?.toString();\r\n    const currentBoardData = await prisma.board.findFirst({\r\n        where: {\r\n            uuid: boardUUID,\r\n            userId: session.user.id,\r\n        },\r\n        include: {\r\n            columns: true,\r\n        },\r\n    });\r\n    if (!currentBoardData) {\r\n        return res.status(404).end('Board not found');\r\n    }\r\n    const columns: Column[] = req.body.columns;\r\n    const columnsToDelete: string[] = [];\r\n\r\n    if (columns) {\r\n        const set = new Set();\r\n        if (columns.some((col) => set.size === (set.add(col.name), set.size))) {\r\n            return res.status(400).json({ error: 'Column names must be unique' });\r\n        }\r\n    }\r\n\r\n    // Find out which columns were removed and delete them\r\n    for (const column of currentBoardData.columns) {\r\n        const found = columns.find((c) => c.uuid === column.uuid);\r\n        if (!found) {\r\n            columnsToDelete.push(column.uuid);\r\n        }\r\n    }\r\n    // Create a new array of columns\r\n    for (const column of columns) {\r\n        if (!column.uuid) {\r\n            column.uuid = uuidv4();\r\n        }\r\n    }\r\n\r\n    await prisma.$transaction(async () => {\r\n        if (req.body.name !== currentBoardData.name) {\r\n            await prisma.board.updateMany({\r\n                where: { uuid: boardUUID, userId: session.user.id },\r\n                data: { name: req.body.name },\r\n            });\r\n        }\r\n        if (columnsToDelete.length) {\r\n            await prisma.column.deleteMany({\r\n                where: {\r\n                    uuid: {\r\n                        in: columnsToDelete,\r\n                    },\r\n                },\r\n            });\r\n        }\r\n        for (const column of columns) {\r\n            await prisma.column.upsert({\r\n                where: {\r\n                    uuid: column.uuid,\r\n                },\r\n                create: {\r\n                    uuid: column.uuid,\r\n                    name: column.name,\r\n                    position: column.position,\r\n                    userId: session.user.id,\r\n                    color: column.color || randomHexColor(),\r\n                    board: {\r\n                        connect: {\r\n                            uuid: boardUUID,\r\n                        },\r\n                    },\r\n                },\r\n                update: {\r\n                    name: column.name,\r\n                    position: column.position,\r\n                },\r\n            });\r\n        }\r\n        return res.status(200).json('Board updated');\r\n    });\r\n};"
        }
    ]
}