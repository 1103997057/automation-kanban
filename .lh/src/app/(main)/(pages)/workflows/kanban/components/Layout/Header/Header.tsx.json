{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/components/Layout/Header/Header.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1737294024730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737294930353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,15 @@\n import { useRouter } from 'next/router';\r\n import BoardForm from '../../Modals/BoardForm';\r\n import { mutate } from 'swr';\r\n import { LinkContainer, PopoverLink } from '../../Popover/Popover';\r\n-import { signOut, useSession } from 'next-auth/react';\r\n \r\n const Header: FC = () => {\r\n     const [isMobile, setIsMobile] = useState(false);\r\n     const mobileMenu = useModal({ type: 'mobileMenu' });\r\n     const newTaskModal = useModal();\r\n     const router = useRouter();\r\n     const { selectedBoard, mutateBoards } = useBoardsContext();\r\n-    const session = useSession();\r\n \r\n     // Strings for the delete modal\r\n     const modalTitle = 'Delete this board?';\r\n     const modalMessage = `Are you sure you want to delete the ‘${selectedBoard?.name}’ board? This action will remove all columns and tasks and cannot be reversed.`;\r\n@@ -148,19 +146,8 @@\n                             id=\"board-delete\"\r\n                         >\r\n                             Delete Board\r\n                         </PopoverLink>\r\n-                        <div className=\"relative mb-4 mt-8 h-px w-full bg-mid-grey\">\r\n-                            {session.data?.user?.image && (\r\n-                                <img\r\n-                                    src={session.data?.user?.image}\r\n-                                    className=\"absolute left-1/2 top-1/2 w-8 -translate-y-1/2 -translate-x-1/2 rounded-full bg-white p-1 dark:bg-v-dark-grey\"\r\n-                                />\r\n-                            )}\r\n-                        </div>\r\n-                        <PopoverLink id=\"logout\" onClick={() => signOut()}>\r\n-                            Log out\r\n-                        </PopoverLink>\r\n                     </LinkContainer>\r\n                 </Popover>\r\n                 <DeleteBoardModal />\r\n                 <EditBoardModal>\r\n@@ -170,5 +157,5 @@\n         </header>\r\n     );\r\n };\r\n \r\n-export default Header;\n\\ No newline at end of file\n+export default Header;\r\n"
                }
            ],
            "date": 1737294024730,
            "name": "Commit-0",
            "content": "import React, { FC, useEffect, useState } from 'react';\r\nimport { ButtonPrimaryLarge } from '../../Buttons/Buttons';\r\nimport { VerticalEllipsisIcon, AddTaskIconMobile, Chevron } from '../../Icons/Icons';\r\nimport MobileMenu from '../../Modals/MobileMenu';\r\nimport { useBoardsContext } from '../../../store/BoardListContext';\r\nimport useModal from '../../../hooks/useModal';\r\nimport TaskForm from '../../Modals/TaskForm';\r\nimport usePopover from '../../../hooks/usePopover';\r\nimport { useRouter } from 'next/router';\r\nimport BoardForm from '../../Modals/BoardForm';\r\nimport { mutate } from 'swr';\r\nimport { LinkContainer, PopoverLink } from '../../Popover/Popover';\r\nimport { signOut, useSession } from 'next-auth/react';\r\n\r\nconst Header: FC = () => {\r\n    const [isMobile, setIsMobile] = useState(false);\r\n    const mobileMenu = useModal({ type: 'mobileMenu' });\r\n    const newTaskModal = useModal();\r\n    const router = useRouter();\r\n    const { selectedBoard, mutateBoards } = useBoardsContext();\r\n    const session = useSession();\r\n\r\n    // Strings for the delete modal\r\n    const modalTitle = 'Delete this board?';\r\n    const modalMessage = `Are you sure you want to delete the ‘${selectedBoard?.name}’ board? This action will remove all columns and tasks and cannot be reversed.`;\r\n\r\n    const confirmDeleteHandler = async () => {\r\n        await fetch(`/api/boards/${selectedBoard?.uuid}`, {\r\n            method: 'DELETE',\r\n        });\r\n        mutateBoards();\r\n        deleteBoardModal.close();\r\n        await router.push('/');\r\n    };\r\n    const deleteBoardModal = useModal({\r\n        type: 'danger',\r\n        dangerHeader: modalTitle,\r\n        dangerMessage: modalMessage,\r\n        onConfirmDelete: confirmDeleteHandler,\r\n    });\r\n    const DeleteBoardModal = deleteBoardModal.Component;\r\n\r\n    const { Component: Popover, ...optionsPopover } = usePopover();\r\n\r\n    const NewTaskModal = newTaskModal.Component;\r\n    const MenuModal = mobileMenu.Component;\r\n\r\n    const editBoardModal = useModal();\r\n    const EditBoardModal = editBoardModal.Component;\r\n\r\n    const handleOptionsClick = (e: React.MouseEvent) => {\r\n        mobileMenu.close();\r\n        optionsPopover.toggle(e);\r\n    };\r\n\r\n    const handleNewTaskClick = () => {\r\n        mobileMenu.close();\r\n        newTaskModal.toggle();\r\n    };\r\n\r\n    const handleEditBoard = () => {\r\n        optionsPopover.close();\r\n        editBoardModal.toggle();\r\n        mutate(`/api/boards/${selectedBoard?.uuid}`);\r\n    };\r\n\r\n    const handleBoardUpdate = () => {\r\n        editBoardModal.close();\r\n        mutateBoards();\r\n        mutate(`/api/boards/${selectedBoard?.uuid}`);\r\n    };\r\n\r\n    const handleDeleteBoard = () => {\r\n        optionsPopover.close();\r\n        deleteBoardModal.toggle();\r\n    };\r\n\r\n    const sortedColumns = selectedBoard?.columns.sort((a, b) => a.position - b.position);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsMobile(window.innerWidth < 640);\r\n        };\r\n        handleResize();\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return (\r\n        <header className=\"flex items-center justify-between border-lines-light bg-white font-jakarta dark:border-lines-dark dark:bg-dark-grey dark:text-white sm:border-l\">\r\n            <div className=\"relative flex\">\r\n                {isMobile ? (\r\n                    <button\r\n                        id=\"mobile-menu-toggle\"\r\n                        className=\"flex items-center justify-center sm:hidden\"\r\n                        onClick={mobileMenu.toggle}\r\n                    >\r\n                        <h1\r\n                            id=\"board-header\"\r\n                            className=\"max-w-[45vw] overflow-hidden text-ellipsis whitespace-nowrap text-lg\"\r\n                        >\r\n                            {selectedBoard?.name || 'Select board'}\r\n                        </h1>\r\n                        <Chevron className={`ml-2 transition-all ${mobileMenu.isOpen ? 'rotate-180' : ''}`} />\r\n                    </button>\r\n                ) : (\r\n                    <h1\r\n                        id=\"board-header\"\r\n                        className=\"ml-6 max-w-[30vw] overflow-hidden text-ellipsis whitespace-nowrap text-xl sm:font-bold lg:max-w-none lg:text-2xl\"\r\n                    >\r\n                        {selectedBoard?.name}\r\n                    </h1>\r\n                )}\r\n                <MenuModal>\r\n                    <MobileMenu setMenuIsOpen={mobileMenu.close} />\r\n                </MenuModal>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n                <ButtonPrimaryLarge\r\n                    onClick={handleNewTaskClick}\r\n                    id=\"new-task\"\r\n                    className=\"mr-2 md:mr-4\"\r\n                    disabled={!sortedColumns?.length}\r\n                >\r\n                    <span className=\"hidden sm:block\">+ Add New Task</span>\r\n                    <AddTaskIconMobile className=\"sm:hidden\" />\r\n                </ButtonPrimaryLarge>\r\n                <NewTaskModal>\r\n                    <TaskForm formType=\"new\" closeModal={newTaskModal.close} columns={sortedColumns} />\r\n                </NewTaskModal>\r\n                <button\r\n                    aria-label=\"Board options\"\r\n                    id=\"board-options\"\r\n                    className=\"mr-2 inline-flex w-6 justify-center\"\r\n                    onClick={handleOptionsClick}\r\n                >\r\n                    <VerticalEllipsisIcon className=\"pointer-events-none\" />\r\n                </button>\r\n                <Popover className=\"mt-8 -translate-x-full md:mt-12\">\r\n                    <LinkContainer>\r\n                        <PopoverLink disabled={!selectedBoard} onClick={handleEditBoard} id=\"board-edit\">\r\n                            Edit Board\r\n                        </PopoverLink>\r\n                        <PopoverLink\r\n                            disabled={!selectedBoard}\r\n                            danger={true}\r\n                            onClick={handleDeleteBoard}\r\n                            id=\"board-delete\"\r\n                        >\r\n                            Delete Board\r\n                        </PopoverLink>\r\n                        <div className=\"relative mb-4 mt-8 h-px w-full bg-mid-grey\">\r\n                            {session.data?.user?.image && (\r\n                                <img\r\n                                    src={session.data?.user?.image}\r\n                                    className=\"absolute left-1/2 top-1/2 w-8 -translate-y-1/2 -translate-x-1/2 rounded-full bg-white p-1 dark:bg-v-dark-grey\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <PopoverLink id=\"logout\" onClick={() => signOut()}>\r\n                            Log out\r\n                        </PopoverLink>\r\n                    </LinkContainer>\r\n                </Popover>\r\n                <DeleteBoardModal />\r\n                <EditBoardModal>\r\n                    <BoardForm formType=\"edit\" boardData={selectedBoard!} onBoardUpdated={handleBoardUpdate} />\r\n                </EditBoardModal>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;"
        }
    ]
}