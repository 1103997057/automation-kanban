{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/hooks/useModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1737289113058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1737289113058,
            "name": "Commit-0",
            "content": "import { useRouter } from 'next/router';\r\nimport { useState, useEffect, FC, PropsWithChildren, MouseEventHandler } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ModalElem from '../components/Modals/Modal';\r\n\r\ntype ModalHook = {\r\n    isOpen: boolean;\r\n    toggle: () => void;\r\n    close: () => void;\r\n    open: () => void;\r\n    Component: FC<PropsWithChildren>;\r\n};\r\n\r\nconst useModal = (options?: {\r\n    type?: 'mobileMenu' | 'danger';\r\n    dangerHeader?: string;\r\n    dangerMessage?: string;\r\n    onConfirmDelete?: MouseEventHandler<HTMLButtonElement>;\r\n}): ModalHook => {\r\n    const router = useRouter();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [modalRoot, setModalRoot] = useState<HTMLElement | null>(null);\r\n    const [mobileMenuRoot, setMobileMenuRoot] = useState<HTMLElement | null>(null);\r\n\r\n    const toggle = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    const close = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const open = () => {\r\n        setIsOpen(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        close();\r\n    }, [router.asPath]);\r\n\r\n    useEffect(() => {\r\n        setMobileMenuRoot(document.getElementById('mobile-menu-root'));\r\n        setModalRoot(document.getElementById('modal-root'));\r\n    }, []);\r\n\r\n    const Component = (props: PropsWithChildren<{}>) => {\r\n        return isOpen && modalRoot && mobileMenuRoot\r\n            ? ReactDOM.createPortal(\r\n                  <ModalElem closeModal={toggle} options={options}>\r\n                      {props.children}\r\n                  </ModalElem>,\r\n                  options?.type === 'mobileMenu' ? mobileMenuRoot : modalRoot\r\n              )\r\n            : null;\r\n    };\r\n\r\n    return {\r\n        isOpen,\r\n        toggle,\r\n        close,\r\n        open,\r\n        Component,\r\n    };\r\n};\r\n\r\nexport default useModal;"
        }
    ]
}