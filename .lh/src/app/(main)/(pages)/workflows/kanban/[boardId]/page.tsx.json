{
    "sourceFile": "src/app/(main)/(pages)/workflows/kanban/[boardId]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1740142480206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740143147314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,64 +8,45 @@\n import Spinner from '../components/Spinner/Spinner';\r\n import useModal from '../hooks/useModal';\r\n import { useBoardsContext } from '../store/BoardListContext';\r\n import { Metadata } from 'next';\r\n+import { notFound, redirect } from 'next/navigation'\r\n+import { getBoard } from '@/lib/kanban'\r\n \r\n-export const metadata: Metadata = {\r\n-    title: \"Kanban Board\",\r\n-    description: \"Task management web app\",\r\n-};\r\n-\r\n-export default function BoardPage({ params }: { params: { boardId: string } }) {\r\n-    const { userId } = auth(); \r\n-    if (!userId) return null; \r\n-\r\n-    const { selectedBoard, selectedTask, setSelectedTask, isLoading, isValidating } = useBoardsContext();\r\n-    const taskDetailsModal = useModal();\r\n-    const Modal = taskDetailsModal.Component;\r\n-\r\n-    useEffect(() => {\r\n-        if (selectedTask) {\r\n-            taskDetailsModal.open();\r\n-        }\r\n-    }, [selectedTask]);\r\n-\r\n-    useEffect(() => {\r\n-        if (selectedBoard && !taskDetailsModal.isOpen) {\r\n-            setSelectedTask(null);\r\n-            mutate(`/api/boards/${selectedBoard.uuid}`);\r\n-        }\r\n-    }, [taskDetailsModal.isOpen]);\r\n-\r\n+export async function generateMetadata({\r\n+    params,\r\n+  }: {\r\n+    params: { boardId: string }\r\n+  }): Promise<Metadata> {\r\n+    const board = await getBoard(params.boardId)\r\n+    \r\n+    return {\r\n+      title: board?.name ? `Kanban - ${board.name}` : 'Kanban Board',\r\n+      description: 'Task management web app',\r\n+    }\r\n+  }\r\n+  \r\n+  export default async function BoardPage({\r\n+    params,\r\n+  }: {\r\n+    params: { boardId: string }\r\n+  }) {\r\n+    const { userId } = auth()\r\n+  \r\n+    if (!userId) {\r\n+      redirect('/sign-in')\r\n+    }\r\n+  \r\n+    const board = await getBoard(params.boardId, userId)\r\n+  \r\n+    if (!board) {\r\n+      notFound()\r\n+    }\r\n+  \r\n     return (\r\n-        <Layout>\r\n-            <main className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n-                {selectedBoard ? (\r\n-                    <Board boardUUID={selectedBoard.uuid} />\r\n-                ) : (\r\n-                    <div className=\"flex h-full items-center justify-center\">\r\n-                        {isLoading || isValidating ? (\r\n-                            <Spinner />\r\n-                        ) : (\r\n-                            <div>\r\n-                                <h2 className=\"mb-4 text-3xl font-bold\">Board not found</h2>\r\n-                                <p>\r\n-                                    This board does not exist or is not available to you. <br />\r\n-                                    Please select another board\r\n-                                </p>\r\n-                            </div>\r\n-                        )}\r\n-                    </div>\r\n-                )}\r\n-                <Modal>\r\n-                    {selectedBoard && selectedTask && (\r\n-                        <TaskDetails\r\n-                            closeModal={taskDetailsModal.close}\r\n-                            taskUUID={selectedTask}\r\n-                            columns={selectedBoard.columns}\r\n-                        />\r\n-                    )}\r\n-                </Modal>\r\n-            </main>\r\n-        </Layout>\r\n-    );\r\n-}\r\n+      <Layout>\r\n+        <div className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n+        <Board boardUUID={String(board.id)} />\r\n+        </div>\r\n+      </Layout>\r\n+    )\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740206195057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { auth } from '@clerk/nextjs/server';\r\n+import { getAuth } from '@clerk/nextjs/server';\r\n import Head from 'next/head';\r\n import { useEffect } from 'react';\r\n import { mutate } from 'swr';\r\n import Board from '../components/Board/Board';\r\n@@ -7,46 +7,79 @@\n import TaskDetails from '../components/Modals/TaskDetails';\r\n import Spinner from '../components/Spinner/Spinner';\r\n import useModal from '../hooks/useModal';\r\n import { useBoardsContext } from '../store/BoardListContext';\r\n-import { Metadata } from 'next';\r\n-import { notFound, redirect } from 'next/navigation'\r\n-import { getBoard } from '@/lib/kanban'\r\n \r\n-export async function generateMetadata({\r\n-    params,\r\n-  }: {\r\n-    params: { boardId: string }\r\n-  }): Promise<Metadata> {\r\n-    const board = await getBoard(params.boardId)\r\n-    \r\n-    return {\r\n-      title: board?.name ? `Kanban - ${board.name}` : 'Kanban Board',\r\n-      description: 'Task management web app',\r\n-    }\r\n-  }\r\n-  \r\n-  export default async function BoardPage({\r\n-    params,\r\n-  }: {\r\n-    params: { boardId: string }\r\n-  }) {\r\n-    const { userId } = auth()\r\n-  \r\n+export default function BoardPage() {\r\n+    const { selectedBoard, selectedTask, setSelectedTask, isLoading, isValidating } = useBoardsContext();\r\n+    const taskDetailsModal = useModal();\r\n+    const Modal = taskDetailsModal.Component;\r\n+\r\n+    useEffect(() => {\r\n+        if (selectedTask) {\r\n+            taskDetailsModal.open();\r\n+        }\r\n+    }, [selectedTask]);\r\n+\r\n+    useEffect(() => {\r\n+        if (selectedBoard && !taskDetailsModal.isOpen) {\r\n+            setSelectedTask(null);\r\n+            mutate(`/api/boards/${selectedBoard.uuid}`);\r\n+        }\r\n+    }, [taskDetailsModal.isOpen]);\r\n+\r\n\\ No newline at end of file\n+    return (\r\n+        <Layout>\r\n+            <Head>\r\n+                <title>{`Kanban${selectedBoard?.name ? ' - ' + selectedBoard.name : ''}`}</title>\r\n+                <meta name=\"description\" content={`Task management web app`} />\r\n+                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n+                <link rel=\"icon\" href=\"/favicon.svg\" />\r\n+            </Head>\r\n+            <main className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n+                {selectedBoard ? (\r\n+                    <Board boardUUID={selectedBoard.uuid} />\r\n+                ) : (\r\n+                    <div className=\"flex h-full items-center justify-center\">\r\n+                        {isLoading || isValidating ? (\r\n+                            <Spinner />\r\n+                        ) : (\r\n+                            <div>\r\n+                                <h2 className=\"mb-4 text-3xl font-bold\">Board not found</h2>\r\n+                                <p>\r\n+                                    This board does not exist or is not available to you. <br />\r\n+                                    Please select another board\r\n+                                </p>\r\n+                            </div>\r\n+                        )}\r\n+                    </div>\r\n+                )}\r\n+                <Modal>\r\n+                    {selectedBoard && selectedTask && (\r\n+                        <TaskDetails\r\n+                            closeModal={taskDetailsModal.close}\r\n+                            taskUUID={selectedTask}\r\n+                            columns={selectedBoard.columns}\r\n+                        />\r\n+                    )}\r\n+                </Modal>\r\n+            </main>\r\n+        </Layout>\r\n+    );\r\n+}\r\n+\r\n+export async function getServerSideProps(context: any) {\r\n+    const { userId } = getAuth(context.req);\r\n+\r\n     if (!userId) {\r\n-      redirect('/sign-in')\r\n+        return {\r\n+            redirect: {\r\n+                destination: '/login',\r\n+                permanent: false,\r\n+            },\r\n+        };\r\n     }\r\n-  \r\n-    const board = await getBoard(params.boardId, userId)\r\n-  \r\n-    if (!board) {\r\n-      notFound()\r\n-    }\r\n-  \r\n-    return (\r\n-      <Layout>\r\n-        <div className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n-        <Board boardUUID={String(board.id)} />\r\n-        </div>\r\n-      </Layout>\r\n-    )\r\n-  }\n+\r\n+    return {\r\n+        props: {}, // Add any necessary props\r\n+    };\r\n+}\r\n"
                },
                {
                    "date": 1740206239083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+'use client'\r\n+\r\n import { getAuth } from '@clerk/nextjs/server';\r\n import Head from 'next/head';\r\n import { useEffect } from 'react';\r\n import { mutate } from 'swr';\r\n@@ -81,5 +83,5 @@\n \r\n     return {\r\n         props: {}, // Add any necessary props\r\n     };\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1740206712919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-'use client'\r\n-\r\n import { getAuth } from '@clerk/nextjs/server';\r\n import Head from 'next/head';\r\n import { useEffect } from 'react';\r\n import { mutate } from 'swr';\r\n"
                },
                {
                    "date": 1740206737772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { getAuth } from '@clerk/nextjs/server';\r\n+import { auth } from '@clerk/nextjs/server';\r\n import Head from 'next/head';\r\n import { useEffect } from 'react';\r\n import { mutate } from 'swr';\r\n import Board from '../components/Board/Board';\r\n@@ -7,79 +7,46 @@\n import TaskDetails from '../components/Modals/TaskDetails';\r\n import Spinner from '../components/Spinner/Spinner';\r\n import useModal from '../hooks/useModal';\r\n import { useBoardsContext } from '../store/BoardListContext';\r\n+import { Metadata } from 'next';\r\n+import { notFound, redirect } from 'next/navigation'\r\n+import { getBoard } from '@/lib/kanban'\r\n \r\n-export default function BoardPage() {\r\n-    const { selectedBoard, selectedTask, setSelectedTask, isLoading, isValidating } = useBoardsContext();\r\n-    const taskDetailsModal = useModal();\r\n-    const Modal = taskDetailsModal.Component;\r\n-\r\n-    useEffect(() => {\r\n-        if (selectedTask) {\r\n-            taskDetailsModal.open();\r\n-        }\r\n-    }, [selectedTask]);\r\n-\r\n-    useEffect(() => {\r\n-        if (selectedBoard && !taskDetailsModal.isOpen) {\r\n-            setSelectedTask(null);\r\n-            mutate(`/api/boards/${selectedBoard.uuid}`);\r\n-        }\r\n-    }, [taskDetailsModal.isOpen]);\r\n-\r\n-    return (\r\n-        <Layout>\r\n-            <Head>\r\n-                <title>{`Kanban${selectedBoard?.name ? ' - ' + selectedBoard.name : ''}`}</title>\r\n-                <meta name=\"description\" content={`Task management web app`} />\r\n-                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n-                <link rel=\"icon\" href=\"/favicon.svg\" />\r\n-            </Head>\r\n-            <main className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n-                {selectedBoard ? (\r\n-                    <Board boardUUID={selectedBoard.uuid} />\r\n-                ) : (\r\n-                    <div className=\"flex h-full items-center justify-center\">\r\n-                        {isLoading || isValidating ? (\r\n-                            <Spinner />\r\n-                        ) : (\r\n-                            <div>\r\n-                                <h2 className=\"mb-4 text-3xl font-bold\">Board not found</h2>\r\n-                                <p>\r\n-                                    This board does not exist or is not available to you. <br />\r\n-                                    Please select another board\r\n-                                </p>\r\n-                            </div>\r\n-                        )}\r\n-                    </div>\r\n-                )}\r\n-                <Modal>\r\n-                    {selectedBoard && selectedTask && (\r\n-                        <TaskDetails\r\n-                            closeModal={taskDetailsModal.close}\r\n-                            taskUUID={selectedTask}\r\n-                            columns={selectedBoard.columns}\r\n-                        />\r\n-                    )}\r\n-                </Modal>\r\n-            </main>\r\n-        </Layout>\r\n-    );\r\n-}\r\n-\r\n-export async function getServerSideProps(context: any) {\r\n-    const { userId } = getAuth(context.req);\r\n-\r\n+export async function generateMetadata({\r\n+    params,\r\n+  }: {\r\n+    params: { boardId: string }\r\n+  }): Promise<Metadata> {\r\n+    const board = await getBoard(params.boardId)\r\n+    \r\n+    return {\r\n+      title: board?.name ? `Kanban - ${board.name}` : 'Kanban Board',\r\n+      description: 'Task management web app',\r\n+    }\r\n+  }\r\n+  \r\n+  export default async function BoardPage({\r\n+    params,\r\n+  }: {\r\n+    params: { boardId: string }\r\n+  }) {\r\n+    const { userId } = auth()\r\n+  \r\n     if (!userId) {\r\n-        return {\r\n-            redirect: {\r\n-                destination: '/login',\r\n-                permanent: false,\r\n-            },\r\n-        };\r\n+      redirect('/sign-in')\r\n     }\r\n-\r\n-    return {\r\n-        props: {}, // Add any necessary props\r\n-    };\r\n-}\r\n+  \r\n+    const board = await getBoard(params.boardId, userId)\r\n+  \r\n+    if (!board) {\r\n+      notFound()\r\n+    }\r\n+  \r\n+    return (\r\n+      <Layout>\r\n+        <div className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n+        <Board boardUUID={String(board.id)} />\r\n+        </div>\r\n+      </Layout>\r\n+    )\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740213894255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,42 +11,53 @@\n import { Metadata } from 'next';\r\n import { notFound, redirect } from 'next/navigation'\r\n import { getBoard } from '@/lib/kanban'\r\n \r\n+// ✅ Fix: Ensure boardId is correctly mapped to uuid\r\n export async function generateMetadata({\r\n-    params,\r\n-  }: {\r\n-    params: { boardId: string }\r\n-  }): Promise<Metadata> {\r\n-    const board = await getBoard(params.boardId)\r\n-    \r\n-    return {\r\n-      title: board?.name ? `Kanban - ${board.name}` : 'Kanban Board',\r\n-      description: 'Task management web app',\r\n-    }\r\n+  params,\r\n+}: {\r\n+  params: { boardId: string };\r\n+}): Promise<Metadata> {\r\n+  const { userId } = auth();\r\n+  if (!userId) return { title: 'Kanban Board' };\r\n+\r\n+  console.log('🔍 Generating metadata for board:', params.boardId);\r\n+\r\n+  const board = await getBoard(params.boardId, userId);\r\n+  return {\r\n+    title: board?.name ? `Kanban - ${board.name}` : 'Kanban Board',\r\n+    description: 'Task management web app',\r\n+  };\r\n+}\r\n+\r\n+// ✅ Fix: Ensure user authentication and correct boardId usage\r\n+export default async function BoardPage({\r\n+  params,\r\n+}: {\r\n+  params: { boardId: string };\r\n+}) {\r\n+  const { userId } = auth();\r\n+\r\n+  // Redirect if not authenticated\r\n+  if (!userId) {\r\n\\ No newline at end of file\n+    console.log('🚨 User not authenticated, redirecting to sign-in');\r\n+    redirect('/sign-in');\r\n   }\r\n-  \r\n-  export default async function BoardPage({\r\n-    params,\r\n-  }: {\r\n-    params: { boardId: string }\r\n-  }) {\r\n-    const { userId } = auth()\r\n-  \r\n-    if (!userId) {\r\n-      redirect('/sign-in')\r\n-    }\r\n-  \r\n-    const board = await getBoard(params.boardId, userId)\r\n-  \r\n-    if (!board) {\r\n-      notFound()\r\n-    }\r\n-  \r\n-    return (\r\n-      <Layout>\r\n-        <div className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n-        <Board boardUUID={String(board.id)} />\r\n-        </div>\r\n-      </Layout>\r\n-    )\r\n-  }\n+\r\n+  console.log('🔍 Fetching board with UUID:', params.boardId, 'for user:', userId);\r\n+  const board = await getBoard(params.boardId, userId);\r\n+\r\n+  // Handle 404 if board is not found\r\n+  if (!board) {\r\n+    console.log('❌ Board not found, returning 404:', params.boardId);\r\n+    notFound();\r\n+  }\r\n+\r\n+  return (\r\n+    <Layout>\r\n+      <div className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n+        <Board boardUUID={board.uuid} />\r\n+      </div>\r\n+    </Layout>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740412011312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,49 +11,37 @@\n import { Metadata } from 'next';\r\n import { notFound, redirect } from 'next/navigation'\r\n import { getBoard } from '@/lib/kanban'\r\n \r\n-// ✅ Fix: Ensure boardId is correctly mapped to uuid\r\n export async function generateMetadata({\r\n   params,\r\n }: {\r\n   params: { boardId: string };\r\n }): Promise<Metadata> {\r\n-  const { userId } = auth();\r\n-  if (!userId) return { title: 'Kanban Board' };\r\n+  const { userId: clerkId } = auth(); // Changed to userId with alias\r\n+  if (!clerkId) return { title: 'Kanban Board' };\r\n \r\n-  console.log('🔍 Generating metadata for board:', params.boardId);\r\n-\r\n-  const board = await getBoard(params.boardId, userId);\r\n+  const board = await getBoard(params.boardId, clerkId);\r\n   return {\r\n     title: board?.name ? `Kanban - ${board.name}` : 'Kanban Board',\r\n     description: 'Task management web app',\r\n   };\r\n }\r\n \r\n-// ✅ Fix: Ensure user authentication and correct boardId usage\r\n export default async function BoardPage({\r\n   params,\r\n }: {\r\n   params: { boardId: string };\r\n }) {\r\n-  const { userId } = auth();\r\n+  const { userId: clerkId } = auth(); // Changed to userId with alias\r\n \r\n-  // Redirect if not authenticated\r\n-  if (!userId) {\r\n-    console.log('🚨 User not authenticated, redirecting to sign-in');\r\n+  if (!clerkId) {\r\n     redirect('/sign-in');\r\n   }\r\n \r\n-  console.log('🔍 Fetching board with UUID:', params.boardId, 'for user:', userId);\r\n-  const board = await getBoard(params.boardId, userId);\r\n+  const board = await getBoard(params.boardId, clerkId);\r\n+  if (!board) notFound();\r\n \r\n-  // Handle 404 if board is not found\r\n-  if (!board) {\r\n-    console.log('❌ Board not found, returning 404:', params.boardId);\r\n-    notFound();\r\n-  }\r\n-\r\n   return (\r\n     <Layout>\r\n       <div className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n         <Board boardUUID={board.uuid} />\r\n"
                }
            ],
            "date": 1740142480206,
            "name": "Commit-0",
            "content": "import { auth } from '@clerk/nextjs/server';\r\nimport Head from 'next/head';\r\nimport { useEffect } from 'react';\r\nimport { mutate } from 'swr';\r\nimport Board from '../components/Board/Board';\r\nimport Layout from '../components/Layout/Layout';\r\nimport TaskDetails from '../components/Modals/TaskDetails';\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport useModal from '../hooks/useModal';\r\nimport { useBoardsContext } from '../store/BoardListContext';\r\nimport { Metadata } from 'next';\r\n\r\nexport const metadata: Metadata = {\r\n    title: \"Kanban Board\",\r\n    description: \"Task management web app\",\r\n};\r\n\r\nexport default function BoardPage({ params }: { params: { boardId: string } }) {\r\n    const { userId } = auth(); \r\n    if (!userId) return null; \r\n\r\n    const { selectedBoard, selectedTask, setSelectedTask, isLoading, isValidating } = useBoardsContext();\r\n    const taskDetailsModal = useModal();\r\n    const Modal = taskDetailsModal.Component;\r\n\r\n    useEffect(() => {\r\n        if (selectedTask) {\r\n            taskDetailsModal.open();\r\n        }\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        if (selectedBoard && !taskDetailsModal.isOpen) {\r\n            setSelectedTask(null);\r\n            mutate(`/api/boards/${selectedBoard.uuid}`);\r\n        }\r\n    }, [taskDetailsModal.isOpen]);\r\n\r\n    return (\r\n        <Layout>\r\n            <main className=\"text-bold h-full overflow-scroll p-6 text-center font-jakarta text-lg text-mid-grey dark:text-white\">\r\n                {selectedBoard ? (\r\n                    <Board boardUUID={selectedBoard.uuid} />\r\n                ) : (\r\n                    <div className=\"flex h-full items-center justify-center\">\r\n                        {isLoading || isValidating ? (\r\n                            <Spinner />\r\n                        ) : (\r\n                            <div>\r\n                                <h2 className=\"mb-4 text-3xl font-bold\">Board not found</h2>\r\n                                <p>\r\n                                    This board does not exist or is not available to you. <br />\r\n                                    Please select another board\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                <Modal>\r\n                    {selectedBoard && selectedTask && (\r\n                        <TaskDetails\r\n                            closeModal={taskDetailsModal.close}\r\n                            taskUUID={selectedTask}\r\n                            columns={selectedBoard.columns}\r\n                        />\r\n                    )}\r\n                </Modal>\r\n            </main>\r\n        </Layout>\r\n    );\r\n}\r\n"
        }
    ]
}