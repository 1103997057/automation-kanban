{
    "sourceFile": "src/app/(main)/(pages)/workflows/_components/custom-kanban.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 51,
            "patches": [
                {
                    "date": 1728661016889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728712783261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,32 +355,5 @@\n     column: ColumnType;\r\n   };\r\n   \r\n   const DEFAULT_CARDS: CardType[] = [\r\n-    // BACKLOG\r\n-    { title: \"Look into render bug in dashboard\", id: \"1\", column: \"backlog\" },\r\n-    { title: \"SOX compliance checklist\", id: \"2\", column: \"backlog\" },\r\n-    { title: \"[SPIKE] Migrate to Azure\", id: \"3\", column: \"backlog\" },\r\n-    { title: \"Document Notifications service\", id: \"4\", column: \"backlog\" },\r\n-    // TODO\r\n-    {\r\n-      title: \"Research DB options for new microservice\",\r\n-      id: \"5\",\r\n-      column: \"todo\",\r\n-    },\r\n-    { title: \"Postmortem for outage\", id: \"6\", column: \"todo\" },\r\n-    { title: \"Sync with product on Q3 roadmap\", id: \"7\", column: \"todo\" },\r\n-  \r\n-    // DOING\r\n-    {\r\n-      title: \"Refactor context providers to use Zustand\",\r\n-      id: \"8\",\r\n-      column: \"doing\",\r\n-    },\r\n-    { title: \"Add logging to daily CRON\", id: \"9\", column: \"doing\" },\r\n-    // DONE\r\n-    {\r\n-      title: \"Set up DD dashboards for Lambda listener\",\r\n-      id: \"10\",\r\n-      column: \"done\",\r\n-    },\r\n   ];\r\n"
                },
                {
                    "date": 1728798453299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,359 +1,347 @@\n-'use client'\r\n+'use client';\r\n \r\n import React, {\r\n-    Dispatch,\r\n-    SetStateAction,\r\n-    useState,\r\n-    DragEvent,\r\n-    FormEvent,\r\n-  } from \"react\";\r\n-  import { FiPlus, FiTrash } from \"react-icons/fi\";\r\n-  import { motion } from \"framer-motion\";\r\n-  import { FaFire } from \"react-icons/fa\";\r\n-import Link from \"next/link\";\r\n-  \r\n-  export const CustomKanban = () => {\r\n-    return (\r\n-      <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-        <Board />\r\n-      </div>\r\n-    );\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n-  \r\n-  const Board = () => {\r\n-    const [cards, setCards] = useState(DEFAULT_CARDS);\r\n-  \r\n-    return (\r\n-      <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-        <Column\r\n-          title=\"Backlog\"\r\n-          column=\"backlog\"\r\n-          headingColor=\"text-neutral-500\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"TODO\"\r\n-          column=\"todo\"\r\n-          headingColor=\"text-yellow-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"In progress\"\r\n-          column=\"doing\"\r\n-          headingColor=\"text-blue-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"Complete\"\r\n-          column=\"done\"\r\n-          headingColor=\"text-emerald-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <BurnBarrel setCards={setCards} />\r\n-      </div>\r\n-    );\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n   };\r\n-  \r\n-  type ColumnProps = {\r\n-    title: string;\r\n-    headingColor: string;\r\n-    cards: CardType[];\r\n-    column: ColumnType;\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n   };\r\n-  \r\n-  const Column = ({\r\n-    title,\r\n-    headingColor,\r\n-    cards,\r\n-    column,\r\n-    setCards,\r\n-  }: ColumnProps) => {\r\n-    const [active, setActive] = useState(false);\r\n-  \r\n-    const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-      e.dataTransfer.setData(\"cardId\", card.id);\r\n-    };\r\n-  \r\n-    const handleDragEnd = (e: DragEvent) => {\r\n-      const cardId = e.dataTransfer.getData(\"cardId\");\r\n-  \r\n-      setActive(false);\r\n-      clearHighlights();\r\n-  \r\n-      const indicators = getIndicators();\r\n-      const { element } = getNearestIndicator(e, indicators);\r\n-  \r\n-      const before = element.dataset.before || \"-1\";\r\n-  \r\n-      if (before !== cardId) {\r\n-        let copy = [...cards];\r\n-  \r\n-        let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-        if (!cardToTransfer) return;\r\n-        cardToTransfer = { ...cardToTransfer, column };\r\n-  \r\n-        copy = copy.filter((c) => c.id !== cardId);\r\n-  \r\n-        const moveToBack = before === \"-1\";\r\n-  \r\n-        if (moveToBack) {\r\n-          copy.push(cardToTransfer);\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n         } else {\r\n-          const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-          if (insertAtIndex === undefined) return;\r\n-  \r\n-          copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+          return closest;\r\n         }\r\n-  \r\n-        setCards(copy);\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n       }\r\n-    };\r\n-  \r\n-    const handleDragOver = (e: DragEvent) => {\r\n-      e.preventDefault();\r\n-      highlightIndicator(e);\r\n-  \r\n-      setActive(true);\r\n-    };\r\n-  \r\n-    const clearHighlights = (els?: HTMLElement[]) => {\r\n-      const indicators = els || getIndicators();\r\n-  \r\n-      indicators.forEach((i) => {\r\n-        i.style.opacity = \"0\";\r\n-      });\r\n-    };\r\n-  \r\n-    const highlightIndicator = (e: DragEvent) => {\r\n-      const indicators = getIndicators();\r\n-  \r\n-      clearHighlights(indicators);\r\n-  \r\n-      const el = getNearestIndicator(e, indicators);\r\n-  \r\n-      el.element.style.opacity = \"1\";\r\n-    };\r\n-  \r\n-    const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-      const DISTANCE_OFFSET = 50;\r\n-  \r\n-      const el = indicators.reduce(\r\n-        (closest, child) => {\r\n-          const box = child.getBoundingClientRect();\r\n-  \r\n-          const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-  \r\n-          if (offset < 0 && offset > closest.offset) {\r\n-            return { offset: offset, element: child };\r\n-          } else {\r\n-            return closest;\r\n-          }\r\n-        },\r\n-        {\r\n-          offset: Number.NEGATIVE_INFINITY,\r\n-          element: indicators[indicators.length - 1],\r\n-        }\r\n-      );\r\n-  \r\n-      return el;\r\n-    };\r\n-  \r\n-    const getIndicators = () => {\r\n-      return Array.from(\r\n-        document.querySelectorAll(\r\n-          `[data-column=\"${column}\"]`\r\n-        ) as unknown as HTMLElement[]\r\n-      );\r\n-    };\r\n-  \r\n-    const handleDragLeave = () => {\r\n-      clearHighlights();\r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    const filteredCards = cards.filter((c) => c.column === column);\r\n-  \r\n-    return (\r\n-      <div className=\"w-56 shrink-0\">\r\n-        <div className=\"mb-3 flex items-center justify-between\">\r\n-          <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-          <span className=\"rounded text-sm text-neutral-400\">\r\n-            {filteredCards.length}\r\n-          </span>\r\n-        </div>\r\n-        <div\r\n-          onDrop={handleDragEnd}\r\n-          onDragOver={handleDragOver}\r\n-          onDragLeave={handleDragLeave}\r\n-          className={`h-full w-full transition-colors ${\r\n-            active ? \"bg-neutral-800/50\" : \"bg-neutral-800/0\"\r\n-          }`}\r\n-        >\r\n-          {filteredCards.map((c) => {\r\n-            return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-          })}\r\n-          <DropIndicator beforeId={null} column={column} />\r\n-          <AddCard column={column} setCards={setCards} />\r\n-        </div>\r\n-      </div>\r\n     );\r\n+\r\n+    return el;\r\n   };\r\n-  \r\n-  type CardProps = CardType & {\r\n-    handleDragStart: Function;\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n   };\r\n-  \r\n-  const Card = ({ title, id, column, handleDragStart }: CardProps) => {\r\n-    return (\r\n-      <>\r\n-        <DropIndicator beforeId={id} column={column} />\r\n-        <Link href={`/workflows/kanban/${id}`}>\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n         <motion.div\r\n           layout\r\n           layoutId={id}\r\n           draggable=\"true\"\r\n-          onDragStart={(e) => handleDragStart(e, { title, id, column })}\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n           className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n         >\r\n           <p className=\"text-sm text-neutral-100\">{title}</p>\r\n         </motion.div>\r\n-        </Link>\r\n-      </>\r\n-    );\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n   };\r\n-  \r\n-  type DropIndicatorProps = {\r\n-    beforeId: string | null;\r\n-    column: string;\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n   };\r\n-  \r\n-  const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-    return (\r\n-      <div\r\n-        data-before={beforeId || \"-1\"}\r\n-        data-column={column}\r\n-        className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-      />\r\n-    );\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n   };\r\n-  \r\n-  const BurnBarrel = ({\r\n-    setCards,\r\n-  }: {\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  }) => {\r\n-    const [active, setActive] = useState(false);\r\n-  \r\n-    const handleDragOver = (e: DragEvent) => {\r\n-      e.preventDefault();\r\n-      setActive(true);\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      animate={{\r\n+        opacity: active ? 1 : 0.5,\r\n+        backgroundColor: active ? '#E02424' : '#6B7280',\r\n+      }}\r\n+      onDrop={handleDrop}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className=\"fixed bottom-0 right-0 z-50 h-20 w-20 rounded-full p-3\"\r\n+    >\r\n+      <FiTrash className=\"h-full w-full text-neutral-50\" />\r\n+    </motion.div>\r\n+  );\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n     };\r\n-  \r\n-    const handleDragLeave = () => {\r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    const handleDragEnd = (e: DragEvent) => {\r\n-      const cardId = e.dataTransfer.getData(\"cardId\");\r\n-  \r\n-      setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n-  \r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    return (\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl ${\r\n-          active\r\n-            ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-            : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-        }`}\r\n-      >\r\n-        {active ? <FaFire className=\"animate-bounce\" /> : <FiTrash />}\r\n-      </div>\r\n-    );\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n   };\r\n-  \r\n-  type AddCardProps = {\r\n-    column: ColumnType;\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n   };\r\n-  \r\n-  const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-    const [text, setText] = useState(\"\");\r\n-    const [adding, setAdding] = useState(false);\r\n-  \r\n-    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n-      e.preventDefault();\r\n-  \r\n-      if (!text.trim().length) return;\r\n-  \r\n-      const newCard = {\r\n-        column,\r\n-        title: text.trim(),\r\n-        id: Math.random().toString(),\r\n-      };\r\n-  \r\n-      setCards((pv) => [...pv, newCard]);\r\n-  \r\n-      setAdding(false);\r\n-    };\r\n-  \r\n-    return (\r\n-      <>\r\n-        {adding ? (\r\n-          <motion.form layout onSubmit={handleSubmit}>\r\n-            <textarea\r\n-              onChange={(e) => setText(e.target.value)}\r\n-              autoFocus\r\n-              placeholder=\"Add new task...\"\r\n-              className=\"w-full rounded border border-violet-400 bg-violet-400/20 p-3 text-sm text-neutral-50 placeholder-violet-300 focus:outline-0\"\r\n-            />\r\n-            <div className=\"mt-1.5 flex items-center justify-end gap-1.5\">\r\n-              <button\r\n-                onClick={() => setAdding(false)}\r\n-                className=\"px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n-              >\r\n-                Close\r\n-              </button>\r\n-              <button\r\n-                type=\"submit\"\r\n-                className=\"flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300\"\r\n-              >\r\n-                <span>Add</span>\r\n-                <FiPlus />\r\n-              </button>\r\n-            </div>\r\n-          </motion.form>\r\n-        ) : (\r\n-          <motion.button\r\n-            layout\r\n-            onClick={() => setAdding(true)}\r\n-            className=\"flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n-          >\r\n-            <span>Add card</span>\r\n-            <FiPlus />\r\n-          </motion.button>\r\n-        )}\r\n-      </>\r\n-    );\r\n-  };\r\n-  \r\n-  type ColumnType = \"backlog\" | \"todo\" | \"doing\" | \"done\";\r\n-  \r\n-  type CardType = {\r\n-    title: string;\r\n-    id: string;\r\n-    column: ColumnType;\r\n-  };\r\n-  \r\n-  const DEFAULT_CARDS: CardType[] = [\r\n-  ];\r\n+\r\n+  return (\r\n+    <div>\r\n+    {adding ? (\r\n+      <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+    ) : (\r\n+      <motion.button\r\n+        layout\r\n+        layoutId={column}\r\n+        onClick={() => setAdding(true)}\r\n+        className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+      >\r\n+        <FiPlus className=\"text-neutral-500\" />\r\n+        Add card+\r\n+      </motion.button>\r\n+    )}\r\n+  </div>\r\n+);\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728804918687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,370 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    animate={active ? \"active\" : \"inactive\"}\r\n+    variants={{\r\n+      active: { backgroundColor: \"#E02424\", color: \"#ffffff\" },\r\n+      inactive: { backgroundColor: \"#6B7280\", color: \"#ffffff\" }\r\n+    }}\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className=\"mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl\"\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={column}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728805543226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,717 +1,386 @@\n-'use client';\r\n+'use client'\r\n \r\n import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n+    Dispatch,\r\n+    SetStateAction,\r\n+    useState,\r\n+    DragEvent,\r\n+    FormEvent,\r\n+  } from \"react\";\r\n+  import { FiPlus, FiTrash } from \"react-icons/fi\";\r\n+  import { motion } from \"framer-motion\";\r\n+  import { FaFire } from \"react-icons/fa\";\r\n+import Link from \"next/link\";\r\n+  \r\n+  export const CustomKanban = () => {\r\n+    return (\r\n+      <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+        <Board />\r\n+      </div>\r\n+    );\r\n   };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n+  \r\n+  const Board = () => {\r\n+    const [cards, setCards] = useState(DEFAULT_CARDS);\r\n+  \r\n+    return (\r\n+      <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+        <Column\r\n+          title=\"Backlog\"\r\n+          column=\"backlog\"\r\n+          headingColor=\"text-neutral-500\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <Column\r\n+          title=\"TODO\"\r\n+          column=\"todo\"\r\n+          headingColor=\"text-yellow-200\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <Column\r\n+          title=\"In progress\"\r\n+          column=\"doing\"\r\n+          headingColor=\"text-blue-200\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <Column\r\n+          title=\"Complete\"\r\n+          column=\"done\"\r\n+          headingColor=\"text-emerald-200\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <BurnBarrel setCards={setCards} />\r\n+      </div>\r\n+    );\r\n   };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n+  \r\n+  type ColumnProps = {\r\n+    title: string;\r\n+    headingColor: string;\r\n+    cards: CardType[];\r\n+    column: ColumnType;\r\n+    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n   };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n+  \r\n+  const Column = ({\r\n+    title,\r\n+    headingColor,\r\n+    cards,\r\n+    column,\r\n+    setCards,\r\n+  }: ColumnProps) => {\r\n+    const [active, setActive] = useState(false);\r\n+  \r\n+    const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+      e.dataTransfer.setData(\"cardId\", card.id);\r\n+    };\r\n+  \r\n+    const handleDragEnd = (e: DragEvent) => {\r\n+      const cardId = e.dataTransfer.getData(\"cardId\");\r\n+  \r\n+      setActive(false);\r\n+      clearHighlights();\r\n+  \r\n+      const indicators = getIndicators();\r\n+      const { element } = getNearestIndicator(e, indicators);\r\n+  \r\n+      const before = element.dataset.before || \"-1\";\r\n+  \r\n+      if (before !== cardId) {\r\n+        let copy = [...cards];\r\n+  \r\n+        let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+        if (!cardToTransfer) return;\r\n+        cardToTransfer = { ...cardToTransfer, column };\r\n+  \r\n+        copy = copy.filter((c) => c.id !== cardId);\r\n+  \r\n+        const moveToBack = before === \"-1\";\r\n+  \r\n+        if (moveToBack) {\r\n+          copy.push(cardToTransfer);\r\n         } else {\r\n-          return closest;\r\n+          const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+          if (insertAtIndex === undefined) return;\r\n+  \r\n+          copy.splice(insertAtIndex, 0, cardToTransfer);\r\n         }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n+  \r\n+        setCards(copy);\r\n       }\r\n+    };\r\n+  \r\n+    const handleDragOver = (e: DragEvent) => {\r\n+      e.preventDefault();\r\n+      highlightIndicator(e);\r\n+  \r\n+      setActive(true);\r\n+    };\r\n+  \r\n+    const clearHighlights = (els?: HTMLElement[]) => {\r\n+      const indicators = els || getIndicators();\r\n+  \r\n+      indicators.forEach((i) => {\r\n+        i.style.opacity = \"0\";\r\n+      });\r\n+    };\r\n+  \r\n+    const highlightIndicator = (e: DragEvent) => {\r\n+      const indicators = getIndicators();\r\n+  \r\n+      clearHighlights(indicators);\r\n+  \r\n+      const el = getNearestIndicator(e, indicators);\r\n+  \r\n+      el.element.style.opacity = \"1\";\r\n+    };\r\n+  \r\n+    const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+      const DISTANCE_OFFSET = 50;\r\n+  \r\n+      const el = indicators.reduce(\r\n+        (closest, child) => {\r\n+          const box = child.getBoundingClientRect();\r\n+  \r\n+          const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+  \r\n+          if (offset < 0 && offset > closest.offset) {\r\n+            return { offset: offset, element: child };\r\n+          } else {\r\n+            return closest;\r\n+          }\r\n+        },\r\n+        {\r\n+          offset: Number.NEGATIVE_INFINITY,\r\n+          element: indicators[indicators.length - 1],\r\n+        }\r\n+      );\r\n+  \r\n+      return el;\r\n+    };\r\n+  \r\n+    const getIndicators = () => {\r\n+      return Array.from(\r\n+        document.querySelectorAll(\r\n+          `[data-column=\"${column}\"]`\r\n+        ) as unknown as HTMLElement[]\r\n+      );\r\n+    };\r\n+  \r\n+    const handleDragLeave = () => {\r\n+      clearHighlights();\r\n+      setActive(false);\r\n+    };\r\n+  \r\n+    const filteredCards = cards.filter((c) => c.column === column);\r\n+  \r\n+    return (\r\n+      <div className=\"w-56 shrink-0\">\r\n+        <div className=\"mb-3 flex items-center justify-between\">\r\n+          <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+          <span className=\"rounded text-sm text-neutral-400\">\r\n+            {filteredCards.length}\r\n+          </span>\r\n+        </div>\r\n+        <div\r\n+          onDrop={handleDragEnd}\r\n+          onDragOver={handleDragOver}\r\n+          onDragLeave={handleDragLeave}\r\n+          className={`h-full w-full transition-colors ${\r\n+            active ? \"bg-neutral-800/50\" : \"bg-neutral-800/0\"\r\n+          }`}\r\n+        >\r\n+          {filteredCards.map((c) => {\r\n+            return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+          })}\r\n+          <DropIndicator beforeId={null} column={column} />\r\n+          <AddCard column={column} setCards={setCards} />\r\n+        </div>\r\n+      </div>\r\n     );\r\n-\r\n-    return el;\r\n   };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n+  \r\n+  type CardProps = CardType & {\r\n+    handleDragStart: Function;\r\n   };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n+  \r\n+  const Card = ({ title, id, column, handleDragStart }: CardProps) => {\r\n+    return (\r\n+      <>\r\n+        <DropIndicator beforeId={id} column={column} />\r\n+        <Link href={`/workflows/kanban/${id}`}>\r\n         <motion.div\r\n           layout\r\n           layoutId={id}\r\n           draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n+          onDragStart={(e) => handleDragStart(e, { title, id, column })}\r\n           className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n         >\r\n           <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Tag: {serviceTag}</p>\r\n         </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n+        </Link>\r\n+      </>\r\n+    );\r\n   };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n+  \r\n+  type DropIndicatorProps = {\r\n+    beforeId: string | null;\r\n+    column: string;\r\n   };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    animate={active ? \"active\" : \"inactive\"}\r\n-    variants={{\r\n-      active: { backgroundColor: \"#E02424\", color: \"#ffffff\" },\r\n-      inactive: { backgroundColor: \"#6B7280\", color: \"#ffffff\" }\r\n-    }}\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className=\"mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl\"\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={column}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n+  \r\n+  const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+    return (\r\n+      <div\r\n+        data-before={beforeId || \"-1\"}\r\n+        data-column={column}\r\n+        className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n       />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n     );\r\n-\r\n-    return el;\r\n   };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n+  \r\n+  const BurnBarrel = ({\r\n+    setCards,\r\n+  }: {\r\n+    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  }) => {\r\n+    const [active, setActive] = useState(false);\r\n+  \r\n+    const handleDragOver = (e: DragEvent) => {\r\n+      e.preventDefault();\r\n+      setActive(true);\r\n+    };\r\n+  \r\n+    const handleDragLeave = () => {\r\n+      setActive(false);\r\n+    };\r\n+  \r\n+    const handleDragEnd = (e: DragEvent) => {\r\n+      const cardId = e.dataTransfer.getData(\"cardId\");\r\n+  \r\n+      setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n+  \r\n+      setActive(false);\r\n+    };\r\n+  \r\n+    return (\r\n       <div\r\n         onDrop={handleDragEnd}\r\n         onDragOver={handleDragOver}\r\n         onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl ${\r\n+          active\r\n+            ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+            : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n         }`}\r\n       >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n+        {active ? <FaFire className=\"animate-bounce\" /> : <FiTrash />}\r\n       </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n+    );\r\n   };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n+  \r\n+  type AddCardProps = {\r\n+    column: ColumnType;\r\n+    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n   };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      animate={{\r\n-        opacity: active ? 1 : 0.5,\r\n-        backgroundColor: active ? '#E02424' : '#6B7280',\r\n-      }}\r\n-      onDrop={handleDrop}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      className=\"fixed bottom-0 right-0 z-50 h-20 w-20 rounded-full p-3\"\r\n-    >\r\n-      <FiTrash className=\"h-full w-full text-neutral-50\" />\r\n-    </motion.div>\r\n-  );\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n+  \r\n+  const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+    const [text, setText] = useState(\"\");\r\n+    const [adding, setAdding] = useState(false);\r\n+  \r\n+    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n+      e.preventDefault();\r\n+  \r\n+      if (!text.trim().length) return;\r\n+  \r\n+      const newCard = {\r\n+        column,\r\n+        title: text.trim(),\r\n+        id: Math.random().toString(),\r\n+      };\r\n+  \r\n+      setCards((pv) => [...pv, newCard]);\r\n+  \r\n+      setAdding(false);\r\n     };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n+  \r\n+    return (\r\n+      <>\r\n+        {adding ? (\r\n+          <motion.form layout onSubmit={handleSubmit}>\r\n+            <textarea\r\n+              onChange={(e) => setText(e.target.value)}\r\n+              autoFocus\r\n+              placeholder=\"Add new task...\"\r\n+              className=\"w-full rounded border border-violet-400 bg-violet-400/20 p-3 text-sm text-neutral-50 placeholder-violet-300 focus:outline-0\"\r\n+            />\r\n+            <div className=\"mt-1.5 flex items-center justify-end gap-1.5\">\r\n+              <button\r\n+                onClick={() => setAdding(false)}\r\n+                className=\"px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n+              >\r\n+                Close\r\n+              </button>\r\n+              <button\r\n+                type=\"submit\"\r\n+                className=\"flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300\"\r\n+              >\r\n+                <span>Add</span>\r\n+                <FiPlus />\r\n+              </button>\r\n+            </div>\r\n+          </motion.form>\r\n+        ) : (\r\n+          <motion.button\r\n+            layout\r\n+            onClick={() => setAdding(true)}\r\n+            className=\"flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n+          >\r\n+            <span>Add card</span>\r\n+            <FiPlus />\r\n+          </motion.button>\r\n+        )}\r\n+      </>\r\n+    );\r\n   };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n+  \r\n+  type ColumnType = \"backlog\" | \"todo\" | \"doing\" | \"done\";\r\n+  \r\n+  type CardType = {\r\n+    title: string;\r\n+    id: string;\r\n+    column: ColumnType;\r\n   };\r\n-\r\n-  return (\r\n-    <div>\r\n-    {adding ? (\r\n-      <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-    ) : (\r\n-      <motion.button\r\n-        layout\r\n-        layoutId={column}\r\n-        onClick={() => setAdding(true)}\r\n-        className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-      >\r\n-        <FiPlus className=\"text-neutral-500\" />\r\n-        Add card+\r\n-      </motion.button>\r\n-    )}\r\n-  </div>\r\n-);\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+  \r\n+  const DEFAULT_CARDS: CardType[] = [\r\n+    // BACKLOG\r\n+    { title: \"Look into render bug in dashboard\", id: \"1\", column: \"backlog\" },\r\n+    { title: \"SOX compliance checklist\", id: \"2\", column: \"backlog\" },\r\n+    { title: \"[SPIKE] Migrate to Azure\", id: \"3\", column: \"backlog\" },\r\n+    { title: \"Document Notifications service\", id: \"4\", column: \"backlog\" },\r\n+    // TODO\r\n+    {\r\n+      title: \"Research DB options for new microservice\",\r\n+      id: \"5\",\r\n+      column: \"todo\",\r\n+    },\r\n+    { title: \"Postmortem for outage\", id: \"6\", column: \"todo\" },\r\n+    { title: \"Sync with product on Q3 roadmap\", id: \"7\", column: \"todo\" },\r\n+  \r\n+    // DOING\r\n+    {\r\n+      title: \"Refactor context providers to use Zustand\",\r\n+      id: \"8\",\r\n+      column: \"doing\",\r\n+    },\r\n+    { title: \"Add logging to daily CRON\", id: \"9\", column: \"doing\" },\r\n+    // DONE\r\n+    {\r\n+      title: \"Set up DD dashboards for Lambda listener\",\r\n+      id: \"10\",\r\n+      column: \"done\",\r\n+    },\r\n+  ];\r\n"
                },
                {
                    "date": 1728814824834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,386 +1,371 @@\n-'use client'\r\n+'use client';\r\n \r\n import React, {\r\n-    Dispatch,\r\n-    SetStateAction,\r\n-    useState,\r\n-    DragEvent,\r\n-    FormEvent,\r\n-  } from \"react\";\r\n-  import { FiPlus, FiTrash } from \"react-icons/fi\";\r\n-  import { motion } from \"framer-motion\";\r\n-  import { FaFire } from \"react-icons/fa\";\r\n-import Link from \"next/link\";\r\n-  \r\n-  export const CustomKanban = () => {\r\n-    return (\r\n-      <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-        <Board />\r\n-      </div>\r\n-    );\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n-  \r\n-  const Board = () => {\r\n-    const [cards, setCards] = useState(DEFAULT_CARDS);\r\n-  \r\n-    return (\r\n-      <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-        <Column\r\n-          title=\"Backlog\"\r\n-          column=\"backlog\"\r\n-          headingColor=\"text-neutral-500\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"TODO\"\r\n-          column=\"todo\"\r\n-          headingColor=\"text-yellow-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"In progress\"\r\n-          column=\"doing\"\r\n-          headingColor=\"text-blue-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"Complete\"\r\n-          column=\"done\"\r\n-          headingColor=\"text-emerald-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <BurnBarrel setCards={setCards} />\r\n-      </div>\r\n-    );\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n   };\r\n-  \r\n-  type ColumnProps = {\r\n-    title: string;\r\n-    headingColor: string;\r\n-    cards: CardType[];\r\n-    column: ColumnType;\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n   };\r\n-  \r\n-  const Column = ({\r\n-    title,\r\n-    headingColor,\r\n-    cards,\r\n-    column,\r\n-    setCards,\r\n-  }: ColumnProps) => {\r\n-    const [active, setActive] = useState(false);\r\n-  \r\n-    const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-      e.dataTransfer.setData(\"cardId\", card.id);\r\n-    };\r\n-  \r\n-    const handleDragEnd = (e: DragEvent) => {\r\n-      const cardId = e.dataTransfer.getData(\"cardId\");\r\n-  \r\n-      setActive(false);\r\n-      clearHighlights();\r\n-  \r\n-      const indicators = getIndicators();\r\n-      const { element } = getNearestIndicator(e, indicators);\r\n-  \r\n-      const before = element.dataset.before || \"-1\";\r\n-  \r\n-      if (before !== cardId) {\r\n-        let copy = [...cards];\r\n-  \r\n-        let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-        if (!cardToTransfer) return;\r\n-        cardToTransfer = { ...cardToTransfer, column };\r\n-  \r\n-        copy = copy.filter((c) => c.id !== cardId);\r\n-  \r\n-        const moveToBack = before === \"-1\";\r\n-  \r\n-        if (moveToBack) {\r\n-          copy.push(cardToTransfer);\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n         } else {\r\n-          const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-          if (insertAtIndex === undefined) return;\r\n-  \r\n-          copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+          return closest;\r\n         }\r\n-  \r\n-        setCards(copy);\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n       }\r\n-    };\r\n-  \r\n-    const handleDragOver = (e: DragEvent) => {\r\n-      e.preventDefault();\r\n-      highlightIndicator(e);\r\n-  \r\n-      setActive(true);\r\n-    };\r\n-  \r\n-    const clearHighlights = (els?: HTMLElement[]) => {\r\n-      const indicators = els || getIndicators();\r\n-  \r\n-      indicators.forEach((i) => {\r\n-        i.style.opacity = \"0\";\r\n-      });\r\n-    };\r\n-  \r\n-    const highlightIndicator = (e: DragEvent) => {\r\n-      const indicators = getIndicators();\r\n-  \r\n-      clearHighlights(indicators);\r\n-  \r\n-      const el = getNearestIndicator(e, indicators);\r\n-  \r\n-      el.element.style.opacity = \"1\";\r\n-    };\r\n-  \r\n-    const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-      const DISTANCE_OFFSET = 50;\r\n-  \r\n-      const el = indicators.reduce(\r\n-        (closest, child) => {\r\n-          const box = child.getBoundingClientRect();\r\n-  \r\n-          const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-  \r\n-          if (offset < 0 && offset > closest.offset) {\r\n-            return { offset: offset, element: child };\r\n-          } else {\r\n-            return closest;\r\n-          }\r\n-        },\r\n-        {\r\n-          offset: Number.NEGATIVE_INFINITY,\r\n-          element: indicators[indicators.length - 1],\r\n-        }\r\n-      );\r\n-  \r\n-      return el;\r\n-    };\r\n-  \r\n-    const getIndicators = () => {\r\n-      return Array.from(\r\n-        document.querySelectorAll(\r\n-          `[data-column=\"${column}\"]`\r\n-        ) as unknown as HTMLElement[]\r\n-      );\r\n-    };\r\n-  \r\n-    const handleDragLeave = () => {\r\n-      clearHighlights();\r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    const filteredCards = cards.filter((c) => c.column === column);\r\n-  \r\n-    return (\r\n-      <div className=\"w-56 shrink-0\">\r\n-        <div className=\"mb-3 flex items-center justify-between\">\r\n-          <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-          <span className=\"rounded text-sm text-neutral-400\">\r\n-            {filteredCards.length}\r\n-          </span>\r\n-        </div>\r\n-        <div\r\n-          onDrop={handleDragEnd}\r\n-          onDragOver={handleDragOver}\r\n-          onDragLeave={handleDragLeave}\r\n-          className={`h-full w-full transition-colors ${\r\n-            active ? \"bg-neutral-800/50\" : \"bg-neutral-800/0\"\r\n-          }`}\r\n-        >\r\n-          {filteredCards.map((c) => {\r\n-            return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-          })}\r\n-          <DropIndicator beforeId={null} column={column} />\r\n-          <AddCard column={column} setCards={setCards} />\r\n-        </div>\r\n-      </div>\r\n     );\r\n+\r\n+    return el;\r\n   };\r\n-  \r\n-  type CardProps = CardType & {\r\n-    handleDragStart: Function;\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n   };\r\n-  \r\n-  const Card = ({ title, id, column, handleDragStart }: CardProps) => {\r\n-    return (\r\n-      <>\r\n-        <DropIndicator beforeId={id} column={column} />\r\n-        <Link href={`/workflows/kanban/${id}`}>\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n         <motion.div\r\n           layout\r\n           layoutId={id}\r\n           draggable=\"true\"\r\n-          onDragStart={(e) => handleDragStart(e, { title, id, column })}\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n           className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n         >\r\n           <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n         </motion.div>\r\n-        </Link>\r\n-      </>\r\n-    );\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n   };\r\n-  \r\n-  type DropIndicatorProps = {\r\n-    beforeId: string | null;\r\n-    column: string;\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n   };\r\n-  \r\n-  const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-    return (\r\n-      <div\r\n-        data-before={beforeId || \"-1\"}\r\n-        data-column={column}\r\n-        className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-      />\r\n-    );\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n   };\r\n-  \r\n-  const BurnBarrel = ({\r\n-    setCards,\r\n-  }: {\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  }) => {\r\n-    const [active, setActive] = useState(false);\r\n-  \r\n-    const handleDragOver = (e: DragEvent) => {\r\n-      e.preventDefault();\r\n-      setActive(true);\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    animate={active ? \"active\" : \"inactive\"}\r\n+    variants={{\r\n+      active: { backgroundColor: \"#E02424\", color: \"#ffffff\" },\r\n+      inactive: { backgroundColor: \"#6B7280\", color: \"#ffffff\" }\r\n+    }}\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className=\"mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl\"\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n     };\r\n-  \r\n-    const handleDragLeave = () => {\r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    const handleDragEnd = (e: DragEvent) => {\r\n-      const cardId = e.dataTransfer.getData(\"cardId\");\r\n-  \r\n-      setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n-  \r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    return (\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl ${\r\n-          active\r\n-            ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-            : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-        }`}\r\n-      >\r\n-        {active ? <FaFire className=\"animate-bounce\" /> : <FiTrash />}\r\n-      </div>\r\n-    );\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n   };\r\n-  \r\n-  type AddCardProps = {\r\n-    column: ColumnType;\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n   };\r\n-  \r\n-  const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-    const [text, setText] = useState(\"\");\r\n-    const [adding, setAdding] = useState(false);\r\n-  \r\n-    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n-      e.preventDefault();\r\n-  \r\n-      if (!text.trim().length) return;\r\n-  \r\n-      const newCard = {\r\n-        column,\r\n-        title: text.trim(),\r\n-        id: Math.random().toString(),\r\n-      };\r\n-  \r\n-      setCards((pv) => [...pv, newCard]);\r\n-  \r\n-      setAdding(false);\r\n-    };\r\n-  \r\n-    return (\r\n-      <>\r\n-        {adding ? (\r\n-          <motion.form layout onSubmit={handleSubmit}>\r\n-            <textarea\r\n-              onChange={(e) => setText(e.target.value)}\r\n-              autoFocus\r\n-              placeholder=\"Add new task...\"\r\n-              className=\"w-full rounded border border-violet-400 bg-violet-400/20 p-3 text-sm text-neutral-50 placeholder-violet-300 focus:outline-0\"\r\n-            />\r\n-            <div className=\"mt-1.5 flex items-center justify-end gap-1.5\">\r\n-              <button\r\n-                onClick={() => setAdding(false)}\r\n-                className=\"px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n-              >\r\n-                Close\r\n-              </button>\r\n-              <button\r\n-                type=\"submit\"\r\n-                className=\"flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300\"\r\n-              >\r\n-                <span>Add</span>\r\n-                <FiPlus />\r\n-              </button>\r\n-            </div>\r\n-          </motion.form>\r\n-        ) : (\r\n-          <motion.button\r\n-            layout\r\n-            onClick={() => setAdding(true)}\r\n-            className=\"flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n-          >\r\n-            <span>Add card</span>\r\n-            <FiPlus />\r\n-          </motion.button>\r\n-        )}\r\n-      </>\r\n-    );\r\n-  };\r\n-  \r\n-  type ColumnType = \"backlog\" | \"todo\" | \"doing\" | \"done\";\r\n-  \r\n-  type CardType = {\r\n-    title: string;\r\n-    id: string;\r\n-    column: ColumnType;\r\n-  };\r\n-  \r\n-  const DEFAULT_CARDS: CardType[] = [\r\n-    // BACKLOG\r\n-    { title: \"Look into render bug in dashboard\", id: \"1\", column: \"backlog\" },\r\n-    { title: \"SOX compliance checklist\", id: \"2\", column: \"backlog\" },\r\n-    { title: \"[SPIKE] Migrate to Azure\", id: \"3\", column: \"backlog\" },\r\n-    { title: \"Document Notifications service\", id: \"4\", column: \"backlog\" },\r\n-    // TODO\r\n-    {\r\n-      title: \"Research DB options for new microservice\",\r\n-      id: \"5\",\r\n-      column: \"todo\",\r\n-    },\r\n-    { title: \"Postmortem for outage\", id: \"6\", column: \"todo\" },\r\n-    { title: \"Sync with product on Q3 roadmap\", id: \"7\", column: \"todo\" },\r\n-  \r\n-    // DOING\r\n-    {\r\n-      title: \"Refactor context providers to use Zustand\",\r\n-      id: \"8\",\r\n-      column: \"doing\",\r\n-    },\r\n-    { title: \"Add logging to daily CRON\", id: \"9\", column: \"doing\" },\r\n-    // DONE\r\n-    {\r\n-      title: \"Set up DD dashboards for Lambda listener\",\r\n-      id: \"10\",\r\n-      column: \"done\",\r\n-    },\r\n-  ];\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728815990857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,368 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728816687285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728816908583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,743 +361,4 @@\n   serviceTag: string;\r\n };\r\n \r\n type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    animate={active ? \"active\" : \"inactive\"}\r\n-    variants={{\r\n-      active: { backgroundColor: \"#E02424\", color: \"#ffffff\" },\r\n-      inactive: { backgroundColor: \"#6B7280\", color: \"#ffffff\" }\r\n-    }}\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className=\"mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl\"\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728817991112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        data-column={column}\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728818009832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        // data-column={column}\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728818025983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n           {filteredCards.length}\r\n         </span>\r\n       </div>\r\n       <div\r\n-        // data-column={column}\r\n+        data-column={column}\r\n         onDrop={handleDragEnd}\r\n         onDragOver={handleDragOver}\r\n         onDragLeave={handleDragLeave}\r\n         className={`h-full w-full transition-colors ${\r\n"
                },
                {
                    "date": 1728818050107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,8 @@\n           {filteredCards.length}\r\n         </span>\r\n       </div>\r\n       <div\r\n-        data-column={column}\r\n         onDrop={handleDragEnd}\r\n         onDragOver={handleDragOver}\r\n         onDragLeave={handleDragLeave}\r\n         className={`h-full w-full transition-colors ${\r\n@@ -362,733 +361,4 @@\n   serviceTag: string;\r\n };\r\n \r\n type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        data-column={column}\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728821763859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  // const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728821907614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   );\r\n };\r\n \r\n const Board = () => {\r\n-  // const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n \r\n   return (\r\n     <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n       <Column\r\n"
                },
                {
                    "date": 1728822258556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,377 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+  //   setCards((prevCards) => [...prevCards, newCard]);\r\n+  //   setAdding(false);\r\n+  //   // setNewCardTitle('');\r\n+  // };\r\n+  setCards((prevCards) => {\r\n+    const updatedCards = prevCards.map((card) =>\r\n+      card.id === newCard.id\r\n+        ? { ...card, orderNumber: newCard.orderNumber, serviceTag: newCard.serviceTag }\r\n+        : card\r\n+    );\r\n+    return updatedCards;\r\n+  });\r\n+\r\n+  setAdding(false);\r\n+};\r\n+\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728822286598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728822495088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n \r\n \r\n export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n+  // const [cards, setCards] = useState<CardType[]>([]);\r\n   return (\r\n     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n       <Board />\r\n     </div>\r\n@@ -362,1110 +362,4 @@\n   serviceTag: string;\r\n };\r\n \r\n type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-  //   setCards((prevCards) => [...prevCards, newCard]);\r\n-  //   setAdding(false);\r\n-  //   // setNewCardTitle('');\r\n-  // };\r\n-  setCards((prevCards) => {\r\n-    const updatedCards = prevCards.map((card) =>\r\n-      card.id === newCard.id\r\n-        ? { ...card, orderNumber: newCard.orderNumber, serviceTag: newCard.serviceTag }\r\n-        : card\r\n-    );\r\n-    return updatedCards;\r\n-  });\r\n-\r\n-  setAdding(false);\r\n-};\r\n-\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728822525296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n \r\n \r\n export const CustomKanban = () => {\r\n-  // const [cards, setCards] = useState<CardType[]>([]);\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n   return (\r\n     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n       <Board />\r\n     </div>\r\n"
                },
                {
                    "date": 1728823494200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728823692419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n \r\n   return (\r\n     <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n+      {/* <Column\r\n         title=\"Backlog\"\r\n         column=\"backlog\"\r\n         headingColor=\"text-neutral-500\"\r\n         cards={cards}\r\n@@ -47,11 +47,11 @@\n         column=\"doing\"\r\n         headingColor=\"text-blue-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n-      />\r\n+      /> */}\r\n       <Column\r\n-        title=\"Complete\"\r\n+        title=\"Backlog\"\r\n         column=\"done\"\r\n         headingColor=\"text-emerald-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n@@ -264,9 +264,9 @@\n \r\n   const handleDrop = (e: DragEvent) => {\r\n     const cardId = e.dataTransfer.getData('cardId');\r\n \r\n-    setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n \r\n     setActive(false);\r\n   };\r\n \r\n"
                },
                {
                    "date": 1728823725821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,375 +27,10 @@\n   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n \r\n   return (\r\n     <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      {/* <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n       <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      /> */}\r\n-      <Column\r\n         title=\"Backlog\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n         column=\"backlog\"\r\n         headingColor=\"text-neutral-500\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n"
                },
                {
                    "date": 1728823892549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+'use client'\r\n+\r\n+import React, {\r\n+    Dispatch,\r\n+    SetStateAction,\r\n+    useState,\r\n+    DragEvent,\r\n+    FormEvent,\r\n+  } from \"react\";\r\n+  import { FiPlus, FiTrash } from \"react-icons/fi\";\r\n+  import { motion } from \"framer-motion\";\r\n+  import { FaFire } from \"react-icons/fa\";\r\n+import Link from \"next/link\";\r\n+  \r\n+  export const CustomKanban = () => {\r\n+    return (\r\n+      <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+        <Board />\r\n+      </div>\r\n+    );\r\n+  };\r\n+  \r\n+  const Board = () => {\r\n+    const [cards, setCards] = useState(DEFAULT_CARDS);\r\n+  \r\n+    return (\r\n+      <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+        <Column\r\n+          title=\"Backlog\"\r\n+          column=\"backlog\"\r\n+          headingColor=\"text-neutral-500\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <Column\r\n+          title=\"TODO\"\r\n+          column=\"todo\"\r\n+          headingColor=\"text-yellow-200\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <Column\r\n+          title=\"In progress\"\r\n+          column=\"doing\"\r\n+          headingColor=\"text-blue-200\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <Column\r\n+          title=\"Complete\"\r\n+          column=\"done\"\r\n+          headingColor=\"text-emerald-200\"\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+        />\r\n+        <BurnBarrel setCards={setCards} />\r\n+      </div>\r\n+    );\r\n+  };\r\n+  \r\n+  type ColumnProps = {\r\n+    title: string;\r\n+    headingColor: string;\r\n+    cards: CardType[];\r\n+    column: ColumnType;\r\n+    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  };\r\n+  \r\n+  const Column = ({\r\n+    title,\r\n+    headingColor,\r\n+    cards,\r\n+    column,\r\n+    setCards,\r\n+  }: ColumnProps) => {\r\n+    const [active, setActive] = useState(false);\r\n+  \r\n+    const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+      e.dataTransfer.setData(\"cardId\", card.id);\r\n+    };\r\n+  \r\n+    const handleDragEnd = (e: DragEvent) => {\r\n+      const cardId = e.dataTransfer.getData(\"cardId\");\r\n+  \r\n+      setActive(false);\r\n+      clearHighlights();\r\n+  \r\n+      const indicators = getIndicators();\r\n+      const { element } = getNearestIndicator(e, indicators);\r\n+  \r\n+      const before = element.dataset.before || \"-1\";\r\n+  \r\n+      if (before !== cardId) {\r\n+        let copy = [...cards];\r\n+  \r\n+        let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+        if (!cardToTransfer) return;\r\n+        cardToTransfer = { ...cardToTransfer, column };\r\n+  \r\n+        copy = copy.filter((c) => c.id !== cardId);\r\n+  \r\n+        const moveToBack = before === \"-1\";\r\n+  \r\n+        if (moveToBack) {\r\n+          copy.push(cardToTransfer);\r\n+        } else {\r\n+          const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+          if (insertAtIndex === undefined) return;\r\n+  \r\n+          copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+        }\r\n+  \r\n+        setCards(copy);\r\n+      }\r\n+    };\r\n+  \r\n+    const handleDragOver = (e: DragEvent) => {\r\n+      e.preventDefault();\r\n+      highlightIndicator(e);\r\n+  \r\n+      setActive(true);\r\n+    };\r\n+  \r\n+    const clearHighlights = (els?: HTMLElement[]) => {\r\n+      const indicators = els || getIndicators();\r\n+  \r\n+      indicators.forEach((i) => {\r\n+        i.style.opacity = \"0\";\r\n+      });\r\n+    };\r\n+  \r\n+    const highlightIndicator = (e: DragEvent) => {\r\n+      const indicators = getIndicators();\r\n+  \r\n+      clearHighlights(indicators);\r\n+  \r\n+      const el = getNearestIndicator(e, indicators);\r\n+  \r\n+      el.element.style.opacity = \"1\";\r\n+    };\r\n+  \r\n+    const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+      const DISTANCE_OFFSET = 50;\r\n+  \r\n+      const el = indicators.reduce(\r\n+        (closest, child) => {\r\n+          const box = child.getBoundingClientRect();\r\n+  \r\n+          const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+  \r\n+          if (offset < 0 && offset > closest.offset) {\r\n+            return { offset: offset, element: child };\r\n+          } else {\r\n+            return closest;\r\n+          }\r\n+        },\r\n+        {\r\n+          offset: Number.NEGATIVE_INFINITY,\r\n+          element: indicators[indicators.length - 1],\r\n+        }\r\n+      );\r\n+  \r\n+      return el;\r\n+    };\r\n+  \r\n+    const getIndicators = () => {\r\n+      return Array.from(\r\n+        document.querySelectorAll(\r\n+          `[data-column=\"${column}\"]`\r\n+        ) as unknown as HTMLElement[]\r\n+      );\r\n+    };\r\n+  \r\n+    const handleDragLeave = () => {\r\n+      clearHighlights();\r\n+      setActive(false);\r\n+    };\r\n+  \r\n+    const filteredCards = cards.filter((c) => c.column === column);\r\n+  \r\n+    return (\r\n+      <div className=\"w-56 shrink-0\">\r\n+        <div className=\"mb-3 flex items-center justify-between\">\r\n+          <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+          <span className=\"rounded text-sm text-neutral-400\">\r\n+            {filteredCards.length}\r\n+          </span>\r\n+        </div>\r\n+        <div\r\n+          onDrop={handleDragEnd}\r\n+          onDragOver={handleDragOver}\r\n+          onDragLeave={handleDragLeave}\r\n+          className={`h-full w-full transition-colors ${\r\n+            active ? \"bg-neutral-800/50\" : \"bg-neutral-800/0\"\r\n+          }`}\r\n+        >\r\n+          {filteredCards.map((c) => {\r\n+            return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+          })}\r\n+          <DropIndicator beforeId={null} column={column} />\r\n+          <AddCard column={column} setCards={setCards} />\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+  \r\n+  type CardProps = CardType & {\r\n+    handleDragStart: Function;\r\n+  };\r\n+  \r\n+  const Card = ({ title, id, column, handleDragStart }: CardProps) => {\r\n+    return (\r\n+      <>\r\n+        <DropIndicator beforeId={id} column={column} />\r\n+        <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => handleDragStart(e, { title, id, column })}\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+        </motion.div>\r\n+        </Link>\r\n+      </>\r\n+    );\r\n+  };\r\n+  \r\n+  type DropIndicatorProps = {\r\n+    beforeId: string | null;\r\n+    column: string;\r\n+  };\r\n+  \r\n+  const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+    return (\r\n+      <div\r\n+        data-before={beforeId || \"-1\"}\r\n+        data-column={column}\r\n+        className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+      />\r\n+    );\r\n+  };\r\n+  \r\n+  const BurnBarrel = ({\r\n+    setCards,\r\n+  }: {\r\n+    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  }) => {\r\n+    const [active, setActive] = useState(false);\r\n+  \r\n+    const handleDragOver = (e: DragEvent) => {\r\n+      e.preventDefault();\r\n+      setActive(true);\r\n+    };\r\n+  \r\n+    const handleDragLeave = () => {\r\n+      setActive(false);\r\n+    };\r\n+  \r\n+    const handleDragEnd = (e: DragEvent) => {\r\n+      const cardId = e.dataTransfer.getData(\"cardId\");\r\n+  \r\n+      setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n+  \r\n+      setActive(false);\r\n+    };\r\n+  \r\n+    return (\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl ${\r\n+          active\r\n+            ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+            : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+        }`}\r\n+      >\r\n+        {active ? <FaFire className=\"animate-bounce\" /> : <FiTrash />}\r\n+      </div>\r\n+    );\r\n+  };\r\n+  \r\n+  type AddCardProps = {\r\n+    column: ColumnType;\r\n+    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  };\r\n+  \r\n+  const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+    const [text, setText] = useState(\"\");\r\n+    const [adding, setAdding] = useState(false);\r\n+  \r\n+    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n+      e.preventDefault();\r\n+  \r\n+      if (!text.trim().length) return;\r\n+  \r\n+      const newCard = {\r\n+        column,\r\n+        title: text.trim(),\r\n+        id: Math.random().toString(),\r\n+      };\r\n+  \r\n+      setCards((pv) => [...pv, newCard]);\r\n+  \r\n+      setAdding(false);\r\n+    };\r\n+  \r\n+    return (\r\n+      <>\r\n+        {adding ? (\r\n+          <motion.form layout onSubmit={handleSubmit}>\r\n+            <textarea\r\n+              onChange={(e) => setText(e.target.value)}\r\n+              autoFocus\r\n+              placeholder=\"Add new task...\"\r\n+              className=\"w-full rounded border border-violet-400 bg-violet-400/20 p-3 text-sm text-neutral-50 placeholder-violet-300 focus:outline-0\"\r\n+            />\r\n+            <div className=\"mt-1.5 flex items-center justify-end gap-1.5\">\r\n+              <button\r\n+                onClick={() => setAdding(false)}\r\n+                className=\"px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n+              >\r\n+                Close\r\n+              </button>\r\n+              <button\r\n+                type=\"submit\"\r\n+                className=\"flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300\"\r\n+              >\r\n+                <span>Add</span>\r\n+                <FiPlus />\r\n+              </button>\r\n+            </div>\r\n+          </motion.form>\r\n+        ) : (\r\n+          <motion.button\r\n+            layout\r\n+            onClick={() => setAdding(true)}\r\n+            className=\"flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n+          >\r\n+            <span>Add card</span>\r\n+            <FiPlus />\r\n+          </motion.button>\r\n+        )}\r\n+      </>\r\n+    );\r\n+  };\r\n+  \r\n+  type ColumnType = \"backlog\" | \"todo\" | \"doing\" | \"done\";\r\n+  \r\n+  type CardType = {\r\n+    title: string;\r\n+    id: string;\r\n+    column: ColumnType;\r\n+  };\r\n+  \r\n+  const DEFAULT_CARDS: CardType[] = [\r\n+    // BACKLOG\r\n+    { title: \"Look into render bug in dashboard\", id: \"1\", column: \"backlog\" },\r\n+    { title: \"SOX compliance checklist\", id: \"2\", column: \"backlog\" },\r\n+    { title: \"[SPIKE] Migrate to Azure\", id: \"3\", column: \"backlog\" },\r\n+    { title: \"Document Notifications service\", id: \"4\", column: \"backlog\" },\r\n+    // TODO\r\n+    {\r\n+      title: \"Research DB options for new microservice\",\r\n+      id: \"5\",\r\n+      column: \"todo\",\r\n+    },\r\n+    { title: \"Postmortem for outage\", id: \"6\", column: \"todo\" },\r\n+    { title: \"Sync with product on Q3 roadmap\", id: \"7\", column: \"todo\" },\r\n+  \r\n+    // DOING\r\n+    {\r\n+      title: \"Refactor context providers to use Zustand\",\r\n+      id: \"8\",\r\n+      column: \"doing\",\r\n+    },\r\n+    { title: \"Add logging to daily CRON\", id: \"9\", column: \"doing\" },\r\n+    // DONE\r\n+    {\r\n+      title: \"Set up DD dashboards for Lambda listener\",\r\n+      id: \"10\",\r\n+      column: \"done\",\r\n+    },\r\n+  ];\r\n"
                },
                {
                    "date": 1728823922642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+  return (\r\n+    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+      <Board />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Board = () => {\r\n+  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728824491333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,16 +48,16 @@\n         headingColor=\"text-blue-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n       />\r\n-      <Column\r\n+      {/* <Column\r\n         title=\"Complete\"\r\n         column=\"done\"\r\n         headingColor=\"text-emerald-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n       />\r\n-      <BurnBarrel setCards={setCards} />\r\n+      <BurnBarrel setCards={setCards} /> */}\r\n     </div>\r\n   );\r\n };\r\n \r\n@@ -362,755 +362,4 @@\n   serviceTag: string;\r\n };\r\n \r\n type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-'use client'\r\n-\r\n-import React, {\r\n-    Dispatch,\r\n-    SetStateAction,\r\n-    useState,\r\n-    DragEvent,\r\n-    FormEvent,\r\n-  } from \"react\";\r\n-  import { FiPlus, FiTrash } from \"react-icons/fi\";\r\n-  import { motion } from \"framer-motion\";\r\n-  import { FaFire } from \"react-icons/fa\";\r\n-import Link from \"next/link\";\r\n-  \r\n-  export const CustomKanban = () => {\r\n-    return (\r\n-      <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-        <Board />\r\n-      </div>\r\n-    );\r\n-  };\r\n-  \r\n-  const Board = () => {\r\n-    const [cards, setCards] = useState(DEFAULT_CARDS);\r\n-  \r\n-    return (\r\n-      <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-        <Column\r\n-          title=\"Backlog\"\r\n-          column=\"backlog\"\r\n-          headingColor=\"text-neutral-500\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"TODO\"\r\n-          column=\"todo\"\r\n-          headingColor=\"text-yellow-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"In progress\"\r\n-          column=\"doing\"\r\n-          headingColor=\"text-blue-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <Column\r\n-          title=\"Complete\"\r\n-          column=\"done\"\r\n-          headingColor=\"text-emerald-200\"\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-        />\r\n-        <BurnBarrel setCards={setCards} />\r\n-      </div>\r\n-    );\r\n-  };\r\n-  \r\n-  type ColumnProps = {\r\n-    title: string;\r\n-    headingColor: string;\r\n-    cards: CardType[];\r\n-    column: ColumnType;\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  };\r\n-  \r\n-  const Column = ({\r\n-    title,\r\n-    headingColor,\r\n-    cards,\r\n-    column,\r\n-    setCards,\r\n-  }: ColumnProps) => {\r\n-    const [active, setActive] = useState(false);\r\n-  \r\n-    const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-      e.dataTransfer.setData(\"cardId\", card.id);\r\n-    };\r\n-  \r\n-    const handleDragEnd = (e: DragEvent) => {\r\n-      const cardId = e.dataTransfer.getData(\"cardId\");\r\n-  \r\n-      setActive(false);\r\n-      clearHighlights();\r\n-  \r\n-      const indicators = getIndicators();\r\n-      const { element } = getNearestIndicator(e, indicators);\r\n-  \r\n-      const before = element.dataset.before || \"-1\";\r\n-  \r\n-      if (before !== cardId) {\r\n-        let copy = [...cards];\r\n-  \r\n-        let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-        if (!cardToTransfer) return;\r\n-        cardToTransfer = { ...cardToTransfer, column };\r\n-  \r\n-        copy = copy.filter((c) => c.id !== cardId);\r\n-  \r\n-        const moveToBack = before === \"-1\";\r\n-  \r\n-        if (moveToBack) {\r\n-          copy.push(cardToTransfer);\r\n-        } else {\r\n-          const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-          if (insertAtIndex === undefined) return;\r\n-  \r\n-          copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-        }\r\n-  \r\n-        setCards(copy);\r\n-      }\r\n-    };\r\n-  \r\n-    const handleDragOver = (e: DragEvent) => {\r\n-      e.preventDefault();\r\n-      highlightIndicator(e);\r\n-  \r\n-      setActive(true);\r\n-    };\r\n-  \r\n-    const clearHighlights = (els?: HTMLElement[]) => {\r\n-      const indicators = els || getIndicators();\r\n-  \r\n-      indicators.forEach((i) => {\r\n-        i.style.opacity = \"0\";\r\n-      });\r\n-    };\r\n-  \r\n-    const highlightIndicator = (e: DragEvent) => {\r\n-      const indicators = getIndicators();\r\n-  \r\n-      clearHighlights(indicators);\r\n-  \r\n-      const el = getNearestIndicator(e, indicators);\r\n-  \r\n-      el.element.style.opacity = \"1\";\r\n-    };\r\n-  \r\n-    const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-      const DISTANCE_OFFSET = 50;\r\n-  \r\n-      const el = indicators.reduce(\r\n-        (closest, child) => {\r\n-          const box = child.getBoundingClientRect();\r\n-  \r\n-          const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-  \r\n-          if (offset < 0 && offset > closest.offset) {\r\n-            return { offset: offset, element: child };\r\n-          } else {\r\n-            return closest;\r\n-          }\r\n-        },\r\n-        {\r\n-          offset: Number.NEGATIVE_INFINITY,\r\n-          element: indicators[indicators.length - 1],\r\n-        }\r\n-      );\r\n-  \r\n-      return el;\r\n-    };\r\n-  \r\n-    const getIndicators = () => {\r\n-      return Array.from(\r\n-        document.querySelectorAll(\r\n-          `[data-column=\"${column}\"]`\r\n-        ) as unknown as HTMLElement[]\r\n-      );\r\n-    };\r\n-  \r\n-    const handleDragLeave = () => {\r\n-      clearHighlights();\r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    const filteredCards = cards.filter((c) => c.column === column);\r\n-  \r\n-    return (\r\n-      <div className=\"w-56 shrink-0\">\r\n-        <div className=\"mb-3 flex items-center justify-between\">\r\n-          <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-          <span className=\"rounded text-sm text-neutral-400\">\r\n-            {filteredCards.length}\r\n-          </span>\r\n-        </div>\r\n-        <div\r\n-          onDrop={handleDragEnd}\r\n-          onDragOver={handleDragOver}\r\n-          onDragLeave={handleDragLeave}\r\n-          className={`h-full w-full transition-colors ${\r\n-            active ? \"bg-neutral-800/50\" : \"bg-neutral-800/0\"\r\n-          }`}\r\n-        >\r\n-          {filteredCards.map((c) => {\r\n-            return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-          })}\r\n-          <DropIndicator beforeId={null} column={column} />\r\n-          <AddCard column={column} setCards={setCards} />\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-  \r\n-  type CardProps = CardType & {\r\n-    handleDragStart: Function;\r\n-  };\r\n-  \r\n-  const Card = ({ title, id, column, handleDragStart }: CardProps) => {\r\n-    return (\r\n-      <>\r\n-        <DropIndicator beforeId={id} column={column} />\r\n-        <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => handleDragStart(e, { title, id, column })}\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-        </motion.div>\r\n-        </Link>\r\n-      </>\r\n-    );\r\n-  };\r\n-  \r\n-  type DropIndicatorProps = {\r\n-    beforeId: string | null;\r\n-    column: string;\r\n-  };\r\n-  \r\n-  const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-    return (\r\n-      <div\r\n-        data-before={beforeId || \"-1\"}\r\n-        data-column={column}\r\n-        className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-      />\r\n-    );\r\n-  };\r\n-  \r\n-  const BurnBarrel = ({\r\n-    setCards,\r\n-  }: {\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  }) => {\r\n-    const [active, setActive] = useState(false);\r\n-  \r\n-    const handleDragOver = (e: DragEvent) => {\r\n-      e.preventDefault();\r\n-      setActive(true);\r\n-    };\r\n-  \r\n-    const handleDragLeave = () => {\r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    const handleDragEnd = (e: DragEvent) => {\r\n-      const cardId = e.dataTransfer.getData(\"cardId\");\r\n-  \r\n-      setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n-  \r\n-      setActive(false);\r\n-    };\r\n-  \r\n-    return (\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl ${\r\n-          active\r\n-            ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-            : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-        }`}\r\n-      >\r\n-        {active ? <FaFire className=\"animate-bounce\" /> : <FiTrash />}\r\n-      </div>\r\n-    );\r\n-  };\r\n-  \r\n-  type AddCardProps = {\r\n-    column: ColumnType;\r\n-    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  };\r\n-  \r\n-  const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-    const [text, setText] = useState(\"\");\r\n-    const [adding, setAdding] = useState(false);\r\n-  \r\n-    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n-      e.preventDefault();\r\n-  \r\n-      if (!text.trim().length) return;\r\n-  \r\n-      const newCard = {\r\n-        column,\r\n-        title: text.trim(),\r\n-        id: Math.random().toString(),\r\n-      };\r\n-  \r\n-      setCards((pv) => [...pv, newCard]);\r\n-  \r\n-      setAdding(false);\r\n-    };\r\n-  \r\n-    return (\r\n-      <>\r\n-        {adding ? (\r\n-          <motion.form layout onSubmit={handleSubmit}>\r\n-            <textarea\r\n-              onChange={(e) => setText(e.target.value)}\r\n-              autoFocus\r\n-              placeholder=\"Add new task...\"\r\n-              className=\"w-full rounded border border-violet-400 bg-violet-400/20 p-3 text-sm text-neutral-50 placeholder-violet-300 focus:outline-0\"\r\n-            />\r\n-            <div className=\"mt-1.5 flex items-center justify-end gap-1.5\">\r\n-              <button\r\n-                onClick={() => setAdding(false)}\r\n-                className=\"px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n-              >\r\n-                Close\r\n-              </button>\r\n-              <button\r\n-                type=\"submit\"\r\n-                className=\"flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300\"\r\n-              >\r\n-                <span>Add</span>\r\n-                <FiPlus />\r\n-              </button>\r\n-            </div>\r\n-          </motion.form>\r\n-        ) : (\r\n-          <motion.button\r\n-            layout\r\n-            onClick={() => setAdding(true)}\r\n-            className=\"flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n-          >\r\n-            <span>Add card</span>\r\n-            <FiPlus />\r\n-          </motion.button>\r\n-        )}\r\n-      </>\r\n-    );\r\n-  };\r\n-  \r\n-  type ColumnType = \"backlog\" | \"todo\" | \"doing\" | \"done\";\r\n-  \r\n-  type CardType = {\r\n-    title: string;\r\n-    id: string;\r\n-    column: ColumnType;\r\n-  };\r\n-  \r\n-  const DEFAULT_CARDS: CardType[] = [\r\n-    // BACKLOG\r\n-    { title: \"Look into render bug in dashboard\", id: \"1\", column: \"backlog\" },\r\n-    { title: \"SOX compliance checklist\", id: \"2\", column: \"backlog\" },\r\n-    { title: \"[SPIKE] Migrate to Azure\", id: \"3\", column: \"backlog\" },\r\n-    { title: \"Document Notifications service\", id: \"4\", column: \"backlog\" },\r\n-    // TODO\r\n-    {\r\n-      title: \"Research DB options for new microservice\",\r\n-      id: \"5\",\r\n-      column: \"todo\",\r\n-    },\r\n-    { title: \"Postmortem for outage\", id: \"6\", column: \"todo\" },\r\n-    { title: \"Sync with product on Q3 roadmap\", id: \"7\", column: \"todo\" },\r\n-  \r\n-    // DOING\r\n-    {\r\n-      title: \"Refactor context providers to use Zustand\",\r\n-      id: \"8\",\r\n-      column: \"doing\",\r\n-    },\r\n-    { title: \"Add logging to daily CRON\", id: \"9\", column: \"doing\" },\r\n-    // DONE\r\n-    {\r\n-      title: \"Set up DD dashboards for Lambda listener\",\r\n-      id: \"10\",\r\n-      column: \"done\",\r\n-    },\r\n-  ];\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728824526536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n         column=\"done\"\r\n         headingColor=\"text-emerald-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} /> */}\r\n+      /> */}\r\n+      <BurnBarrel setCards={setCards} />\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1728824572851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,15 +48,15 @@\n         headingColor=\"text-blue-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n       />\r\n-      {/* <Column\r\n+      <Column\r\n         title=\"Complete\"\r\n         column=\"done\"\r\n         headingColor=\"text-emerald-200\"\r\n         cards={cards}\r\n         setCards={setCards}\r\n-      /> */}\r\n+      />\r\n       <BurnBarrel setCards={setCards} />\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1728833852007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,387 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+  const newCard: CardType = {\r\n+    id: `${Math.random()}`,\r\n+    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+    column,\r\n+    orderNumber,\r\n+    serviceTag,\r\n+  };\r\n+  setCards((prevCards) => [...prevCards, newCard]);\r\n+\r\n+};\r\n+\r\n+  // return (\r\n+//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+//       <Board />\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// const Board = () => {\r\n+//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+     \r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+\r\n"
                },
                {
                    "date": 1728833884607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,387 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+  const newCard: CardType = {\r\n+    id: `${Math.random()}`,\r\n+    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+    column,\r\n+    orderNumber,\r\n+    serviceTag,\r\n+  };\r\n+  setCards((prevCards) => [...prevCards, newCard]);\r\n+\r\n+};\r\n+\r\n+  // return (\r\n+//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+//       <Board />\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// const Board = () => {\r\n+//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+     \r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+\r\n"
                },
                {
                    "date": 1728908586075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         {filteredCards.map((c) => {\r\n           return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n         })}\r\n         <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n+        <AddCard column={column} setCards={setCards} onAddCard={onAddCard} />\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n@@ -335,399 +335,13 @@\n };\r\n \r\n type AddCardProps = {\r\n   column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-  const newCard: CardType = {\r\n-    id: `${Math.random()}`,\r\n-    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-    column,\r\n-    orderNumber,\r\n-    serviceTag,\r\n-  };\r\n-  setCards((prevCards) => [...prevCards, newCard]);\r\n-\r\n-};\r\n-\r\n-  // return (\r\n-//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-//       <Board />\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// const Board = () => {\r\n-//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-     \r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n   onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n   setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n };\r\n \r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+const AddCard = ({ column,onAddCard, setCards }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false);\r\n   // const [newCardTitle, setNewCardTitle] = useState('');\r\n \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n@@ -749,10 +363,17 @@\n   };\r\n \r\n   return (\r\n     <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+   {adding ? (\r\n+        <CardWithForm\r\n+          onSubmit={(orderNumber, serviceTag) => {\r\n+            // Now using the prop function to add the card\r\n+            onAddCard(column, orderNumber, serviceTag);\r\n+            setAdding(false);\r\n+          }}\r\n+          onCancel={closeForm}\r\n+        />\r\n       ) : (\r\n         <motion.button\r\n           layout\r\n           layoutId={`add-card-${column}`}\r\n@@ -771,369 +392,4 @@\n \r\n ];\r\n \r\n \r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-  return (\r\n-    <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-      <Board />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Board = () => {\r\n-  const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n"
                },
                {
                    "date": 1728910481901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,13 @@\n \r\n const AddCard = ({ column,onAddCard, setCards }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false);\r\n   // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n+  const handleSubmit = (orderNumber: string, serviceTag: string) => {\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n+    setAdding(false);\r\n+  };\r\n+  \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n     const newCard: CardType = {\r\n       id: `${Math.random()}`,\r\n       title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n"
                },
                {
                    "date": 1728912383770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,18 @@\n     column,\r\n     orderNumber,\r\n     serviceTag,\r\n   };\r\n-  setCards((prevCards) => [...prevCards, newCard]);\r\n-\r\n+  setCards((prevCards) => {\r\n+    const existingCardIndex = prevCards.findIndex(card => card.orderNumber === orderNumber);\r\n+    if (existingCardIndex !== -1) {\r\n+      const updatedCards = [...prevCards];\r\n+      updatedCards[existingCardIndex] = { ...updatedCards[existingCardIndex], column, orderNumber, serviceTag };\r\n+      return updatedCards;\r\n+    } else {\r\n+      return [...prevCards, newCard];\r\n+    }\r\n+  });\r\n };\r\n \r\n   // return (\r\n //     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n@@ -114,31 +122,31 @@\n   const handleDragEnd = (e: DragEvent) => {\r\n     const cardId = e.dataTransfer.getData('cardId');\r\n     setActive(false);\r\n     clearHighlights();\r\n-\r\n+  \r\n     const indicators = getIndicators();\r\n     const { element } = getNearestIndicator(e, indicators);\r\n     const before = element.dataset.before || '-1';\r\n-\r\n+  \r\n     if (before !== cardId) {\r\n       let copy = [...cards];\r\n       let cardToTransfer = copy.find((c) => c.id === cardId);\r\n       if (!cardToTransfer) return;\r\n       cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n+  \r\n       copy = copy.filter((c) => c.id !== cardId);\r\n       const moveToBack = before === '-1';\r\n-\r\n+  \r\n       if (moveToBack) {\r\n         copy.push(cardToTransfer);\r\n       } else {\r\n         const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n         if (insertAtIndex === undefined) return;\r\n-\r\n+  \r\n         copy.splice(insertAtIndex, 0, cardToTransfer);\r\n       }\r\n-\r\n+  \r\n       setCards(copy);\r\n     }\r\n   };\r\n \r\n@@ -346,9 +354,9 @@\n   const handleSubmit = (orderNumber: string, serviceTag: string) => {\r\n     onAddCard(column, orderNumber, serviceTag);\r\n     setAdding(false);\r\n   };\r\n-  \r\n+\r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n     const newCard: CardType = {\r\n       id: `${Math.random()}`,\r\n       title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n"
                },
                {
                    "date": 1728912682488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,18 +33,10 @@\n     column,\r\n     orderNumber,\r\n     serviceTag,\r\n   };\r\n-  setCards((prevCards) => {\r\n-    const existingCardIndex = prevCards.findIndex(card => card.orderNumber === orderNumber);\r\n-    if (existingCardIndex !== -1) {\r\n-      const updatedCards = [...prevCards];\r\n-      updatedCards[existingCardIndex] = { ...updatedCards[existingCardIndex], column, orderNumber, serviceTag };\r\n-      return updatedCards;\r\n-    } else {\r\n-      return [...prevCards, newCard];\r\n-    }\r\n-  });\r\n+  setCards((prevCards) => [...prevCards, newCard]);\r\n+\r\n };\r\n \r\n   // return (\r\n //     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n@@ -122,31 +114,31 @@\n   const handleDragEnd = (e: DragEvent) => {\r\n     const cardId = e.dataTransfer.getData('cardId');\r\n     setActive(false);\r\n     clearHighlights();\r\n-  \r\n+\r\n     const indicators = getIndicators();\r\n     const { element } = getNearestIndicator(e, indicators);\r\n     const before = element.dataset.before || '-1';\r\n-  \r\n+\r\n     if (before !== cardId) {\r\n       let copy = [...cards];\r\n       let cardToTransfer = copy.find((c) => c.id === cardId);\r\n       if (!cardToTransfer) return;\r\n       cardToTransfer = { ...cardToTransfer, column };\r\n-  \r\n+\r\n       copy = copy.filter((c) => c.id !== cardId);\r\n       const moveToBack = before === '-1';\r\n-  \r\n+\r\n       if (moveToBack) {\r\n         copy.push(cardToTransfer);\r\n       } else {\r\n         const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n         if (insertAtIndex === undefined) return;\r\n-  \r\n+\r\n         copy.splice(insertAtIndex, 0, cardToTransfer);\r\n       }\r\n-  \r\n+\r\n       setCards(copy);\r\n     }\r\n   };\r\n \r\n@@ -234,9 +226,9 @@\n         {filteredCards.map((c) => {\r\n           return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n         })}\r\n         <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} onAddCard={onAddCard} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n@@ -343,19 +335,14 @@\n };\r\n \r\n type AddCardProps = {\r\n   column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n   setCards: Dispatch<SetStateAction<CardType[]>>;\r\n };\r\n \r\n-const AddCard = ({ column,onAddCard, setCards }: AddCardProps) => {\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false);\r\n   // const [newCardTitle, setNewCardTitle] = useState('');\r\n-  const handleSubmit = (orderNumber: string, serviceTag: string) => {\r\n-    onAddCard(column, orderNumber, serviceTag);\r\n-    setAdding(false);\r\n-  };\r\n \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n     const newCard: CardType = {\r\n       id: `${Math.random()}`,\r\n@@ -375,17 +362,10 @@\n   };\r\n \r\n   return (\r\n     <div>\r\n-   {adding ? (\r\n-        <CardWithForm\r\n-          onSubmit={(orderNumber, serviceTag) => {\r\n-            // Now using the prop function to add the card\r\n-            onAddCard(column, orderNumber, serviceTag);\r\n-            setAdding(false);\r\n-          }}\r\n-          onCancel={closeForm}\r\n-        />\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n       ) : (\r\n         <motion.button\r\n           layout\r\n           layoutId={`add-card-${column}`}\r\n@@ -401,7 +381,5 @@\n };\r\n \r\n const DEFAULT_CARDS: CardType[] = [\r\n \r\n-];\r\n-\r\n-\r\n+];\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728912946268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,407 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+  const newCard: CardType = {\r\n+    id: `${Math.random()}`,\r\n+    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+    column,\r\n+    orderNumber,\r\n+    serviceTag,\r\n+  };\r\n+  setCards((prevCards) => {\r\n+    const existingCardIndex = prevCards.findIndex(card => card.orderNumber === orderNumber);\r\n+    if (existingCardIndex !== -1) {\r\n+      const updatedCards = [...prevCards];\r\n+      updatedCards[existingCardIndex] = { ...updatedCards[existingCardIndex], column, orderNumber, serviceTag };\r\n+      return updatedCards;\r\n+    } else {\r\n+      return [...prevCards, newCard];\r\n+    }\r\n+  });\r\n+};\r\n+\r\n+  // return (\r\n+//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+//       <Board />\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// const Board = () => {\r\n+//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+     \r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+  \r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+  \r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+  \r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+  \r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+  \r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+  \r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} onAddCard={onAddCard} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column,onAddCard, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+  const handleSubmit = (orderNumber: string, serviceTag: string) => {\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+   {adding ? (\r\n+        <CardWithForm\r\n+          onSubmit={(orderNumber, serviceTag) => {\r\n+            // Now using the prop function to add the card\r\n+            onAddCard(column, orderNumber, serviceTag);\r\n+            setAdding(false);\r\n+          }}\r\n+          onCancel={closeForm}\r\n+        />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\r\n+\r\n+\r\n"
                },
                {
                    "date": 1728912990237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,385 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+  const newCard: CardType = {\r\n+    id: `${Math.random()}`,\r\n+    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+    column,\r\n+    orderNumber,\r\n+    serviceTag,\r\n+  };\r\n+  setCards((prevCards) => [...prevCards, newCard]);\r\n+\r\n+};\r\n+\r\n+  // return (\r\n+//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n+//       <Board />\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// const Board = () => {\r\n+//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+     \r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === undefined) return;\r\n+\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+\r\n+    clearHighlights(indicators);\r\n+\r\n+    const el = getNearestIndicator(e, indicators);\r\n+\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(\r\n+        `[data-column=\"${column}\"]`\r\n+      ) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">\r\n+          {filteredCards.length}\r\n+\r\n+        </span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => {\r\n+          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n+        })}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} setCards={setCards} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+    onDrop={handleDrop}\r\n+    onDragOver={handleDragOver}\r\n+    onDragLeave={handleDragLeave}\r\n+    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+    }`}\r\n+  >\r\n+    <AnimatePresence>\r\n+      {active ? (\r\n+        <motion.div\r\n+          key=\"fire\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FaFire className=\"animate-bounce\" />\r\n+        </motion.div>\r\n+      ) : (\r\n+        <motion.div\r\n+          key=\"trash\"\r\n+          initial={{ opacity: 0 }}\r\n+          animate={{ opacity: 1 }}\r\n+          exit={{ opacity: 0 }}\r\n+        >\r\n+          <FiTrash />\r\n+        </motion.div>\r\n+      )}\r\n+    </AnimatePresence>\r\n+  </motion.div>\r\n+);\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+};\r\n+\r\n+const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+  // const [newCardTitle, setNewCardTitle] = useState('');\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column: column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+    setAdding(false);\r\n+    // setNewCardTitle('');\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+  {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => setAdding(true)}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [\r\n+\r\n+];\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728920153047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,811 +105,19 @@\n   setCards,\r\n   onAddCard,\r\n }: ColumnProps) => {\r\n   const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n   const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-  {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-  const newCard: CardType = {\r\n-    id: `${Math.random()}`,\r\n-    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-    column,\r\n-    orderNumber,\r\n-    serviceTag,\r\n-  };\r\n-  setCards((prevCards) => {\r\n-    const existingCardIndex = prevCards.findIndex(card => card.orderNumber === orderNumber);\r\n-    if (existingCardIndex !== -1) {\r\n-      const updatedCards = [...prevCards];\r\n-      updatedCards[existingCardIndex] = { ...updatedCards[existingCardIndex], column, orderNumber, serviceTag };\r\n-      return updatedCards;\r\n-    } else {\r\n-      return [...prevCards, newCard];\r\n-    }\r\n-  });\r\n-};\r\n-\r\n-  // return (\r\n-//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-//       <Board />\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// const Board = () => {\r\n-//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-     \r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n   const handleDragStart = (e: DragEvent, card: CardType) => {\r\n     e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n \r\n   const handleDragEnd = (e: DragEvent) => {\r\n     const cardId = e.dataTransfer.getData('cardId');\r\n     setActive(false);\r\n     clearHighlights();\r\n-  \r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-  \r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-  \r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-  \r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-  \r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-  \r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n \r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n     const indicators = getIndicators();\r\n-\r\n-    clearHighlights(indicators);\r\n-\r\n-    const el = getNearestIndicator(e, indicators);\r\n-\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-\r\n-        </span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} onAddCard={onAddCard} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-};\r\n-\r\n-const AddCard = ({ column,onAddCard, setCards }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n-  const handleSubmit = (orderNumber: string, serviceTag: string) => {\r\n-    onAddCard(column, orderNumber, serviceTag);\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-    setAdding(false);\r\n-    // setNewCardTitle('');\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-   {adding ? (\r\n-        <CardWithForm\r\n-          onSubmit={(orderNumber, serviceTag) => {\r\n-            // Now using the prop function to add the card\r\n-            onAddCard(column, orderNumber, serviceTag);\r\n-            setAdding(false);\r\n-          }}\r\n-          onCancel={closeForm}\r\n-        />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n-\r\n-\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-  const newCard: CardType = {\r\n-    id: `${Math.random()}`,\r\n-    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-    column,\r\n-    orderNumber,\r\n-    serviceTag,\r\n-  };\r\n-  setCards((prevCards) => [...prevCards, newCard]);\r\n-\r\n-};\r\n-\r\n-  // return (\r\n-//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-//       <Board />\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// const Board = () => {\r\n-//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-     \r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n     const { element } = getNearestIndicator(e, indicators);\r\n     const before = element.dataset.before || '-1';\r\n \r\n     if (before !== cardId) {\r\n@@ -995,9 +203,9 @@\n     clearHighlights();\r\n     setActive(false);\r\n   };\r\n \r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n+  // const filteredCards = cards.filter((c) => c.column === column);\r\n \r\n   return (\r\n     <div className=\"w-56 shrink-0\">\r\n       <div className=\"mb-3 flex items-center justify-between\">\r\n"
                },
                {
                    "date": 1728923500125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,30 +25,19 @@\n \r\n export const CustomKanban = () => {\r\n   const [cards, setCards] = useState<CardType[]>([]);\r\n \r\n-const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-  const newCard: CardType = {\r\n-    id: `${Math.random()}`,\r\n-    title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-    column,\r\n-    orderNumber,\r\n-    serviceTag,\r\n+  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+    const newCard: CardType = {\r\n+      id: `${Math.random()}`,\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n   };\r\n-  setCards((prevCards) => [...prevCards, newCard]);\r\n \r\n-};\r\n-\r\n-  // return (\r\n-//     <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n-//       <Board />\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// const Board = () => {\r\n-//   const [cards, setCards] = useState<CardType[]>(DEFAULT_CARDS);\r\n-\r\n   return (\r\n     <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n       <Column\r\n         title=\"Backlog\"\r\n@@ -82,9 +71,8 @@\n         setCards={setCards}\r\n         onAddCard={handleAddCard} \r\n       />\r\n       <BurnBarrel setCards={setCards} />\r\n-     \r\n     </div>\r\n   );\r\n };\r\n \r\n@@ -106,8 +94,9 @@\n   onAddCard,\r\n }: ColumnProps) => {\r\n   const [active, setActive] = useState(false);\r\n   const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n   const handleDragStart = (e: DragEvent, card: CardType) => {\r\n     e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n \r\n@@ -132,10 +121,9 @@\n       if (moveToBack) {\r\n         copy.push(cardToTransfer);\r\n       } else {\r\n         const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === undefined) return;\r\n-\r\n+        if (insertAtIndex === -1) return; // Correct check\r\n         copy.splice(insertAtIndex, 0, cardToTransfer);\r\n       }\r\n \r\n       setCards(copy);\r\n@@ -144,27 +132,22 @@\n \r\n   const handleDragOver = (e: DragEvent) => {\r\n     e.preventDefault();\r\n     highlightIndicator(e);\r\n-\r\n     setActive(true);\r\n   };\r\n \r\n   const clearHighlights = (els?: HTMLElement[]) => {\r\n     const indicators = els || getIndicators();\r\n-\r\n     indicators.forEach((i) => {\r\n       i.style.opacity = '0';\r\n     });\r\n   };\r\n \r\n   const highlightIndicator = (e: DragEvent) => {\r\n     const indicators = getIndicators();\r\n-\r\n     clearHighlights(indicators);\r\n-\r\n     const el = getNearestIndicator(e, indicators);\r\n-\r\n     el.element.style.opacity = '1';\r\n   };\r\n \r\n   const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n@@ -172,9 +155,8 @@\n \r\n     const el = indicators.reduce(\r\n       (closest, child) => {\r\n         const box = child.getBoundingClientRect();\r\n-\r\n         const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n \r\n         if (offset < 0 && offset > closest.offset) {\r\n           return { offset: offset, element: child };\r\n@@ -203,17 +185,14 @@\n     clearHighlights();\r\n     setActive(false);\r\n   };\r\n \r\n-  // const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n   return (\r\n     <div className=\"w-56 shrink-0\">\r\n       <div className=\"mb-3 flex items-center justify-between\">\r\n         <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n         <span className=\"rounded text-sm text-neutral-400\">\r\n           {filteredCards.length}\r\n-\r\n         </span>\r\n       </div>\r\n       <div\r\n         onDrop={handleDragEnd}\r\n@@ -222,13 +201,13 @@\n         className={`h-full w-full transition-colors ${\r\n           active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n         }`}\r\n       >\r\n-        {filteredCards.map((c) => {\r\n-          return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n-        })}\r\n+        {filteredCards.map((c) => (\r\n+          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n+        ))}\r\n         <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} setCards={setCards} />\r\n+        <AddCard column={column} onAddCard={onAddCard} /> {/* Pass onAddCard */}\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n@@ -293,78 +272,68 @@\n   };\r\n \r\n   const handleDrop = (e: DragEvent) => {\r\n     const cardId = e.dataTransfer.getData('cardId');\r\n-\r\n     setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-\r\n     setActive(false);\r\n   };\r\n \r\n   return (\r\n     <motion.div\r\n-    onDrop={handleDrop}\r\n-    onDragOver={handleDragOver}\r\n-    onDragLeave={handleDragLeave}\r\n-    className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-      active ? \"border-red-800 bg-red-800/20 text-red-500\" : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-    }`}\r\n-  >\r\n-    <AnimatePresence>\r\n-      {active ? (\r\n-        <motion.div\r\n-          key=\"fire\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FaFire className=\"animate-bounce\" />\r\n-        </motion.div>\r\n-      ) : (\r\n-        <motion.div\r\n-          key=\"trash\"\r\n-          initial={{ opacity: 0 }}\r\n-          animate={{ opacity: 1 }}\r\n-          exit={{ opacity: 0 }}\r\n-        >\r\n-          <FiTrash />\r\n-        </motion.div>\r\n-      )}\r\n-    </AnimatePresence>\r\n-  </motion.div>\r\n-);\r\n+      onDrop={handleDrop}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+        active\r\n+          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+      }`}\r\n+    >\r\n+      <AnimatePresence>\r\n+        {active ? (\r\n+          <motion.div\r\n+            key=\"fire\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FaFire className=\"animate-bounce\" />\r\n+          </motion.div>\r\n+        ) : (\r\n+          <motion.div\r\n+            key=\"trash\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FiTrash />\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+    </motion.div>\r\n+  );\r\n };\r\n \r\n type AddCardProps = {\r\n   column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n };\r\n \r\n-const AddCard = ({ column, setCards }: AddCardProps) => {\r\n+const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false);\r\n-  // const [newCardTitle, setNewCardTitle] = useState('');\r\n \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column: column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n+    onAddCard(column, orderNumber, serviceTag); // Use the onAddCard prop correctly\r\n     setAdding(false);\r\n-    // setNewCardTitle('');\r\n   };\r\n \r\n   const closeForm = () => {\r\n     setAdding(false);\r\n   };\r\n \r\n   return (\r\n     <div>\r\n-  {adding ? (\r\n+      {adding ? (\r\n         <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n       ) : (\r\n         <motion.button\r\n           layout\r\n@@ -381,5 +350,5 @@\n };\r\n \r\n const DEFAULT_CARDS: CardType[] = [\r\n \r\n-];\n\\ No newline at end of file\n+];\r\n"
                },
                {
                    "date": 1728995555009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,11 @@\n export const CustomKanban = () => {\r\n   const [cards, setCards] = useState<CardType[]>([]);\r\n \r\n   const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n     const newCard: CardType = {\r\n-      id: `${Math.random()}`,\r\n+      id: `${Math.random()}`, // Consider using a more robust unique ID like UUID\r\n       title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n       column,\r\n       orderNumber,\r\n       serviceTag,\r\n@@ -121,9 +122,9 @@\n       if (moveToBack) {\r\n         copy.push(cardToTransfer);\r\n       } else {\r\n         const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === -1) return; // Correct check\r\n+        if (insertAtIndex === -1) return; // Corrected condition\r\n         copy.splice(insertAtIndex, 0, cardToTransfer);\r\n       }\r\n \r\n       setCards(copy);\r\n@@ -174,11 +175,9 @@\n   };\r\n \r\n   const getIndicators = () => {\r\n     return Array.from(\r\n-      document.querySelectorAll(\r\n-        `[data-column=\"${column}\"]`\r\n-      ) as unknown as HTMLElement[]\r\n+      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n     );\r\n   };\r\n \r\n   const handleDragLeave = () => {\r\n@@ -189,25 +188,21 @@\n   return (\r\n     <div className=\"w-56 shrink-0\">\r\n       <div className=\"mb-3 flex items-center justify-between\">\r\n         <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">\r\n-          {filteredCards.length}\r\n-        </span>\r\n+        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n       </div>\r\n       <div\r\n         onDrop={handleDragEnd}\r\n         onDragOver={handleDragOver}\r\n         onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n+        className={`h-full w-full transition-colors ${active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'}`}\r\n       >\r\n         {filteredCards.map((c) => (\r\n           <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n         ))}\r\n         <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} onAddCard={onAddCard} /> {/* Pass onAddCard */}\r\n+        <AddCard column={column} onAddCard={onAddCard} /> {/* Correctly pass onAddCard */}\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n@@ -238,9 +233,8 @@\n     </>\r\n   );\r\n };\r\n \r\n-\r\n type DropIndicatorProps = {\r\n   beforeId: string | null;\r\n   column: string;\r\n };\r\n@@ -314,16 +308,17 @@\n };\r\n \r\n type AddCardProps = {\r\n   column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; // Correct type\r\n };\r\n \r\n const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false);\r\n \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    onAddCard(column, orderNumber, serviceTag); // Use the onAddCard prop correctly\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n     setAdding(false);\r\n   };\r\n \r\n   const closeForm = () => {\r\n@@ -348,7 +343,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-const DEFAULT_CARDS: CardType[] = [\r\n-\r\n-];\r\n+const DEFAULT_CARDS: CardType[] = [];\r\n"
                },
                {
                    "date": 1728997633819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import { motion, AnimatePresence } from 'framer-motion';\r\n import { FaFire } from 'react-icons/fa';\r\n import Link from 'next/link';\r\n import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+import { v4 as uuidv4 } from 'uuid';\r\n \r\n type CardType = {\r\n   id: string;\r\n   title: string;\r\n@@ -28,9 +29,9 @@\n \r\n   const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n     console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n     const newCard: CardType = {\r\n-      id: `${Math.random()}`, // Consider using a more robust unique ID like UUID\r\n+      id: uuidv4(),\r\n       title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n       column,\r\n       orderNumber,\r\n       serviceTag,\r\n"
                },
                {
                    "date": 1729001415850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,351 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+import { v4 as uuidv4 } from 'uuid';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    const newCard: CardType = {\r\n+      id: uuidv4(),\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+    setCards((prevCards) => [...prevCards, newCard]);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      <Column\r\n+        title=\"Backlog\"\r\n+        column=\"backlog\"\r\n+        headingColor=\"text-neutral-500\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"TODO\"\r\n+        column=\"todo\"\r\n+        headingColor=\"text-yellow-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"In progress\"\r\n+        column=\"doing\"\r\n+        headingColor=\"text-blue-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <Column\r\n+        title=\"Complete\"\r\n+        column=\"done\"\r\n+        headingColor=\"text-emerald-200\"\r\n+        cards={cards}\r\n+        setCards={setCards}\r\n+        onAddCard={handleAddCard} \r\n+      />\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+  const filteredCards = cards.filter((c) => c.column === column);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === -1) return; // Corrected condition\r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+    clearHighlights(indicators);\r\n+    const el = getNearestIndicator(e, indicators);\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'}`}\r\n+      >\r\n+        {filteredCards.map((c) => (\r\n+          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n+        ))}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} onAddCard={onAddCard} /> {/* Correctly pass onAddCard */}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      onDrop={handleDrop}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+        active\r\n+          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+      }`}\r\n+    >\r\n+      <AnimatePresence>\r\n+        {active ? (\r\n+          <motion.div\r\n+            key=\"fire\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FaFire className=\"animate-bounce\" />\r\n+          </motion.div>\r\n+        ) : (\r\n+          <motion.div\r\n+            key=\"trash\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FiTrash />\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+    </motion.div>\r\n+  );\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; // Correct type\r\n+};\r\n+\r\n+const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      {adding ? (\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => {\r\n+            console.log(`Clicked Add Card for column: ${column}`);\r\n+            setAdding(true);\r\n+          }}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [];\r\n"
                },
                {
                    "date": 1729088679854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,40 +40,19 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n+      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n+        <Column\r\n+          key={columnType}\r\n+          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n+          column={columnType as ColumnType}\r\n+          headingColor={getHeadingColor(columnType as ColumnType)}\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+          onAddCard={handleAddCard}\r\n+        />\r\n+      ))}\r\n       <BurnBarrel setCards={setCards} />\r\n     </div>\r\n   );\r\n };\r\n@@ -123,9 +102,9 @@\n       if (moveToBack) {\r\n         copy.push(cardToTransfer);\r\n       } else {\r\n         const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === -1) return; // Corrected condition\r\n+        if (insertAtIndex === -1) return; \r\n         copy.splice(insertAtIndex, 0, cardToTransfer);\r\n       }\r\n \r\n       setCards(copy);\r\n@@ -187,28 +166,29 @@\n   };\r\n \r\n   return (\r\n     <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'}`}\r\n-      >\r\n-        {filteredCards.map((c) => (\r\n-          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n-        ))}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} onAddCard={onAddCard} /> {/* Correctly pass onAddCard */}\r\n-      </div>\r\n+    <div className=\"mb-3 flex items-center justify-between\">\r\n+      <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+      <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n     </div>\r\n-  );\r\n+    <div\r\n+      onDrop={handleDragEnd}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className={`h-full w-full transition-colors ${active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'}`}\r\n+    >\r\n+      {filteredCards.map((c) => (\r\n+        <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n+      ))}\r\n+      <DropIndicator beforeId={null} column={column} />\r\n+      <AddCard column={column} onAddCard={onAddCard} />\r\n+    </div>\r\n+  </div>\r\n+);\r\n };\r\n \r\n+\r\n type CardProps = CardType & {\r\n   handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n };\r\n \r\n@@ -348,352 +328,19 @@\n   );\r\n };\r\n \r\n const DEFAULT_CARDS: CardType[] = [];\r\n-'use client';\r\n \r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-import { v4 as uuidv4 } from 'uuid';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n+const getHeadingColor = (column: ColumnType): string => {\r\n+  switch (column) {\r\n+    case 'backlog':\r\n+      return 'text-neutral-500';\r\n+    case 'todo':\r\n+      return 'text-yellow-200';\r\n+    case 'doing':\r\n+      return 'text-blue-200';\r\n+    case 'done':\r\n+      return 'text-emerald-200';\r\n+    default:\r\n+      return 'text-neutral-500';\r\n+  }\r\n };\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    const newCard: CardType = {\r\n-      id: uuidv4(),\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      <Column\r\n-        title=\"Backlog\"\r\n-        column=\"backlog\"\r\n-        headingColor=\"text-neutral-500\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"TODO\"\r\n-        column=\"todo\"\r\n-        headingColor=\"text-yellow-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"In progress\"\r\n-        column=\"doing\"\r\n-        headingColor=\"text-blue-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <Column\r\n-        title=\"Complete\"\r\n-        column=\"done\"\r\n-        headingColor=\"text-emerald-200\"\r\n-        cards={cards}\r\n-        setCards={setCards}\r\n-        onAddCard={handleAddCard} \r\n-      />\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === -1) return; // Corrected condition\r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-    clearHighlights(indicators);\r\n-    const el = getNearestIndicator(e, indicators);\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'}`}\r\n-      >\r\n-        {filteredCards.map((c) => (\r\n-          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n-        ))}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} onAddCard={onAddCard} /> {/* Correctly pass onAddCard */}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      onDrop={handleDrop}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-        active\r\n-          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-      }`}\r\n-    >\r\n-      <AnimatePresence>\r\n-        {active ? (\r\n-          <motion.div\r\n-            key=\"fire\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FaFire className=\"animate-bounce\" />\r\n-          </motion.div>\r\n-        ) : (\r\n-          <motion.div\r\n-            key=\"trash\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FiTrash />\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-    </motion.div>\r\n-  );\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; // Correct type\r\n-};\r\n-\r\n-const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    onAddCard(column, orderNumber, serviceTag);\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => setAdding(true)}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [];\r\n"
                },
                {
                    "date": 1729089283024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,11 @@\n }: ColumnProps) => {\r\n   const [active, setActive] = useState(false);\r\n   const filteredCards = cards.filter((c) => c.column === column);\r\n \r\n+  console.log(`Column ${column}: Received cards:`, cards);\r\n+  console.log(`Column ${column}: Filtered cards:`, filteredCards);\r\n+\r\n   const handleDragStart = (e: DragEvent, card: CardType) => {\r\n     e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n \r\n"
                },
                {
                    "date": 1729169521897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,17 @@\n       column,\r\n       orderNumber,\r\n       serviceTag,\r\n     };\r\n-    setCards((prevCards) => [...prevCards, newCard]);\r\n-  };\r\n+  //   setCards((prevCards) => [...prevCards, newCard]);\r\n+  // };\r\n+  console.log('CustomKanban: New card object:', newCard);\r\n+  setCards((prevCards) => {\r\n+    const updatedCards = [...prevCards, newCard];\r\n+    console.log('CustomKanban: Updated cards state:', updatedCards);\r\n+    return updatedCards;\r\n+  });\r\n+};\r\n \r\n   return (\r\n     <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n       {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n@@ -311,9 +318,9 @@\n \r\n   return (\r\n     <div>\r\n       {adding ? (\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n+        <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n       ) : (\r\n         <motion.button\r\n           layout\r\n           layoutId={`add-card-${column}`}\r\n"
                },
                {
                    "date": 1729325671523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,362 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+import { v4 as uuidv4 } from 'uuid';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    const newCard: CardType = {\r\n+      id: uuidv4(),\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+  //   setCards((prevCards) => [...prevCards, newCard]);\r\n+  // };\r\n+  setCards((prevCards) => {\r\n+    const updatedCards = [...prevCards, newCard];\r\n+    console.log('CustomKanban: Updated cards state:', updatedCards);\r\n+    return updatedCards;\r\n+\r\n+  });\r\n+\r\n+};\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n+        <Column\r\n+          key={columnType}\r\n+          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n+          column={columnType as ColumnType}\r\n+          headingColor={getHeadingColor(columnType as ColumnType)}\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+          onAddCard={handleAddCard}\r\n+        />\r\n+      ))}\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+  // const filteredCards = cards.filter((c) => c.column === column);\r\n+  const filteredCards = React.useMemo(() => { return cards.filter((c) => c.column === column);}, [cards, column]);\r\n+\r\n+  console.log(`Column ${column}: Received cards:`, cards);\r\n+  console.log(`Column ${column}: Filtered cards:`, filteredCards);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === -1) return; \r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+    clearHighlights(indicators);\r\n+    const el = getNearestIndicator(e, indicators);\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => (\r\n+          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n+        ))}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} onAddCard={onAddCard} />\r\n+      </div>\r\n+    </div>\r\n+\r\n+  );\r\n+\r\n+};\r\n+\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+};\r\n+\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      <Link href={`/workflows/kanban/${id}`}>\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      </Link>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      onDrop={handleDrop}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+        active\r\n+          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+      }`}\r\n+    >\r\n+      <AnimatePresence>\r\n+        {active ? (\r\n+          <motion.div\r\n+            key=\"fire\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FaFire className=\"animate-bounce\" />\r\n+          </motion.div>\r\n+        ) : (\r\n+          <motion.div\r\n+            key=\"trash\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FiTrash />\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+    </motion.div>\r\n+  );\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; // Correct type\r\n+};\r\n+\r\n+const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n+  const [adding, setAdding] = useState(false); \r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      {adding ? (\r\n+        <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => {\r\n+            console.log(`Clicked Add Card for column: ${column}`);\r\n+            setAdding(true);\r\n+          }}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [];\r\n+\r\n+const getHeadingColor = (column: ColumnType): string => {\r\n+  switch (column) {\r\n+    case 'backlog':\r\n+      return 'text-neutral-500';\r\n+    case 'todo':\r\n+      return 'text-yellow-200';\r\n+    case 'doing':\r\n+      return 'text-blue-200';\r\n+    case 'done':\r\n+      return 'text-emerald-200';\r\n+    default:\r\n+      return 'text-neutral-500';\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1729327019616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n };\r\n \r\n type AddCardProps = {\r\n   column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; // Correct type\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; \r\n };\r\n \r\n const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false); \r\n"
                },
                {
                    "date": 1729337111481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,8 @@\n     setActive(false);\r\n   };\r\n \r\n   return (\r\n-\r\n     <div className=\"w-56 shrink-0\">\r\n       <div className=\"mb-3 flex items-center justify-between\">\r\n         <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n         <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n@@ -198,11 +197,9 @@\n         <DropIndicator beforeId={null} column={column} />\r\n         <AddCard column={column} onAddCard={onAddCard} />\r\n       </div>\r\n     </div>\r\n-\r\n   );\r\n-\r\n };\r\n \r\n \r\n type CardProps = CardType & {\r\n@@ -310,363 +307,8 @@\n   onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; \r\n };\r\n \r\n const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false); \r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    onAddCard(column, orderNumber, serviceTag);\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      {adding ? (\r\n-        <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => {\r\n-            console.log(`Clicked Add Card for column: ${column}`);\r\n-            setAdding(true);\r\n-          }}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [];\r\n-\r\n-const getHeadingColor = (column: ColumnType): string => {\r\n-  switch (column) {\r\n-    case 'backlog':\r\n-      return 'text-neutral-500';\r\n-    case 'todo':\r\n-      return 'text-yellow-200';\r\n-    case 'doing':\r\n-      return 'text-blue-200';\r\n-    case 'done':\r\n-      return 'text-emerald-200';\r\n-    default:\r\n-      return 'text-neutral-500';\r\n-  }\r\n-};\r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-import { v4 as uuidv4 } from 'uuid';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    const newCard: CardType = {\r\n-      id: uuidv4(),\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-  //   setCards((prevCards) => [...prevCards, newCard]);\r\n-  // };\r\n-  console.log('CustomKanban: New card object:', newCard);\r\n-  setCards((prevCards) => {\r\n-    const updatedCards = [...prevCards, newCard];\r\n-    console.log('CustomKanban: Updated cards state:', updatedCards);\r\n-    return updatedCards;\r\n-  });\r\n-};\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n-        <Column\r\n-          key={columnType}\r\n-          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n-          column={columnType as ColumnType}\r\n-          headingColor={getHeadingColor(columnType as ColumnType)}\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-          onAddCard={handleAddCard}\r\n-        />\r\n-      ))}\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-  const filteredCards = cards.filter((c) => c.column === column);\r\n-\r\n-  console.log(`Column ${column}: Received cards:`, cards);\r\n-  console.log(`Column ${column}: Filtered cards:`, filteredCards);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === -1) return; \r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-    clearHighlights(indicators);\r\n-    const el = getNearestIndicator(e, indicators);\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-    <div className=\"mb-3 flex items-center justify-between\">\r\n-      <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-      <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n-    </div>\r\n-    <div\r\n-      onDrop={handleDragEnd}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      className={`h-full w-full transition-colors ${active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'}`}\r\n-    >\r\n-      {filteredCards.map((c) => (\r\n-        <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n-      ))}\r\n-      <DropIndicator beforeId={null} column={column} />\r\n-      <AddCard column={column} onAddCard={onAddCard} />\r\n-    </div>\r\n-  </div>\r\n-);\r\n-};\r\n-\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n-};\r\n-\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      </Link>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      onDrop={handleDrop}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-        active\r\n-          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-      }`}\r\n-    >\r\n-      <AnimatePresence>\r\n-        {active ? (\r\n-          <motion.div\r\n-            key=\"fire\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FaFire className=\"animate-bounce\" />\r\n-          </motion.div>\r\n-        ) : (\r\n-          <motion.div\r\n-            key=\"trash\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FiTrash />\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-    </motion.div>\r\n-  );\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; // Correct type\r\n-};\r\n-\r\n-const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n   const [adding, setAdding] = useState(false);\r\n \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n     console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n@@ -680,9 +322,10 @@\n \r\n   return (\r\n     <div>\r\n       {adding ? (\r\n-        <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n+        // <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n       ) : (\r\n         <motion.button\r\n           layout\r\n           layoutId={`add-card-${column}`}\r\n@@ -714,5 +357,5 @@\n       return 'text-emerald-200';\r\n     default:\r\n       return 'text-neutral-500';\r\n   }\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729339082498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,16 +202,15 @@\n };\r\n \r\n \r\n type CardProps = CardType & {\r\n-  handleDragStart: (e: DragEvent<HTMLDivElement>, card: CardType) => void;\r\n+  handleDragStart: Function;\r\n };\r\n-\r\n const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n   return (\r\n     <>\r\n       <DropIndicator beforeId={id} column={column} />\r\n-      <Link href={`/workflows/kanban/${id}`}>\r\n+      {/* <Link href={`/workflows/kanban/${id}`}> */}\r\n         <motion.div\r\n           layout\r\n           layoutId={id}\r\n           draggable=\"true\"\r\n@@ -223,9 +222,9 @@\n           <p className=\"text-sm text-neutral-100\">{title}</p>\r\n           <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n           <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n         </motion.div>\r\n-      </Link>\r\n+      {/* </Link> */}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1729341281631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+import { v4 as uuidv4 } from 'uuid';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    const newCard: CardType = {\r\n+      id: uuidv4(),\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+  //   setCards((prevCards) => [...prevCards, newCard]);\r\n+  // };\r\n+  setCards((prevCards) => {\r\n+    const updatedCards = [...prevCards, newCard];\r\n+    console.log('CustomKanban: Updated cards state:', updatedCards);\r\n+    return updatedCards;\r\n+\r\n+  });\r\n+\r\n+};\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n+        <Column\r\n+          key={columnType}\r\n+          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n+          column={columnType as ColumnType}\r\n+          headingColor={getHeadingColor(columnType as ColumnType)}\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+          onAddCard={handleAddCard}\r\n+        />\r\n+      ))}\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+  // const filteredCards = cards.filter((c) => c.column === column);\r\n+  const filteredCards = React.useMemo(() => { return cards.filter((c) => c.column === column);}, [cards, column]);\r\n+\r\n+  console.log(`Column ${column}: Received cards:`, cards);\r\n+  console.log(`Column ${column}: Filtered cards:`, filteredCards);\r\n+\r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === -1) return; \r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+    clearHighlights(indicators);\r\n+    const el = getNearestIndicator(e, indicators);\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => (\r\n+          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n+        ))}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} onAddCard={onAddCard} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: Function;\r\n+};\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      {/* <Link href={`/workflows/kanban/${id}`}> */}\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      {/* </Link> */}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      onDrop={handleDrop}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+        active\r\n+          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+      }`}\r\n+    >\r\n+      <AnimatePresence>\r\n+        {active ? (\r\n+          <motion.div\r\n+            key=\"fire\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FaFire className=\"animate-bounce\" />\r\n+          </motion.div>\r\n+        ) : (\r\n+          <motion.div\r\n+            key=\"trash\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FiTrash />\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+    </motion.div>\r\n+  );\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; \r\n+};\r\n+\r\n+const AddCard: React.FC<AddCardProps> = ({ column, onAddCard }) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+\r\n+  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n+    console.log(`AddCard: Attempting to add card to ${column}`);\r\n+    console.log(`AddCard: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n+    console.log(`AddCard: Card added to ${column}, closing form`);\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  const closeForm = () => {\r\n+    console.log(`AddCard: Closing form for ${column}`);\r\n+    setAdding(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      {adding ? (\r\n+        // <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n+        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} column={column}/>\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => {\r\n+            console.log(`Clicked Add Card for column: ${column}`);\r\n+            setAdding(true);\r\n+          }}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [];\r\n+\r\n+const getHeadingColor = (column: ColumnType): string => {\r\n+  switch (column) {\r\n+    case 'backlog':\r\n+      return 'text-neutral-500';\r\n+    case 'todo':\r\n+      return 'text-yellow-200';\r\n+    case 'doing':\r\n+      return 'text-blue-200';\r\n+    case 'done':\r\n+      return 'text-emerald-200';\r\n+    default:\r\n+      return 'text-neutral-500';\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729343028369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,13 +83,13 @@\n   onAddCard,\r\n }: ColumnProps) => {\r\n   const [active, setActive] = useState(false);\r\n   // const filteredCards = cards.filter((c) => c.column === column);\r\n-  const filteredCards = React.useMemo(() => { return cards.filter((c) => c.column === column);}, [cards, column]);\r\n-\r\n-  console.log(`Column ${column}: Received cards:`, cards);\r\n-  console.log(`Column ${column}: Filtered cards:`, filteredCards);\r\n-\r\n+  const filteredCards = React.useMemo(() => { const filtered = cards.filter((c) => c.column === column);\r\n+    console.log(`Column ${column}: Filtering cards:`, cards);\r\n+    console.log(`Column ${column}: Filtered result:`, filtered);\r\n+    return filtered;  }, [cards, column])\r\n+    \r\n   const handleDragStart = (e: DragEvent, card: CardType) => {\r\n     e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n \r\n@@ -360,365 +360,5 @@\n       return 'text-emerald-200';\r\n     default:\r\n       return 'text-neutral-500';\r\n   }\r\n-};\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-import { v4 as uuidv4 } from 'uuid';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    const newCard: CardType = {\r\n-      id: uuidv4(),\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-  //   setCards((prevCards) => [...prevCards, newCard]);\r\n-  // };\r\n-  setCards((prevCards) => {\r\n-    const updatedCards = [...prevCards, newCard];\r\n-    console.log('CustomKanban: Updated cards state:', updatedCards);\r\n-    return updatedCards;\r\n-\r\n-  });\r\n-\r\n-};\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n-        <Column\r\n-          key={columnType}\r\n-          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n-          column={columnType as ColumnType}\r\n-          headingColor={getHeadingColor(columnType as ColumnType)}\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-          onAddCard={handleAddCard}\r\n-        />\r\n-      ))}\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-  // const filteredCards = cards.filter((c) => c.column === column);\r\n-  const filteredCards = React.useMemo(() => { return cards.filter((c) => c.column === column);}, [cards, column]);\r\n-\r\n-  console.log(`Column ${column}: Received cards:`, cards);\r\n-  console.log(`Column ${column}: Filtered cards:`, filteredCards);\r\n-\r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === -1) return; \r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-    clearHighlights(indicators);\r\n-    const el = getNearestIndicator(e, indicators);\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => (\r\n-          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n-        ))}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} onAddCard={onAddCard} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: Function;\r\n-};\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      {/* <Link href={`/workflows/kanban/${id}`}> */}\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      {/* </Link> */}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      onDrop={handleDrop}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-        active\r\n-          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-      }`}\r\n-    >\r\n-      <AnimatePresence>\r\n-        {active ? (\r\n-          <motion.div\r\n-            key=\"fire\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FaFire className=\"animate-bounce\" />\r\n-          </motion.div>\r\n-        ) : (\r\n-          <motion.div\r\n-            key=\"trash\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FiTrash />\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-    </motion.div>\r\n-  );\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; \r\n-};\r\n-\r\n-const AddCard = ({ column, onAddCard }: AddCardProps) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    onAddCard(column, orderNumber, serviceTag);\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      {adding ? (\r\n-        // <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => {\r\n-            console.log(`Clicked Add Card for column: ${column}`);\r\n-            setAdding(true);\r\n-          }}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [];\r\n-\r\n-const getHeadingColor = (column: ColumnType): string => {\r\n-  switch (column) {\r\n-    case 'backlog':\r\n-      return 'text-neutral-500';\r\n-    case 'todo':\r\n-      return 'text-yellow-200';\r\n-    case 'doing':\r\n-      return 'text-blue-200';\r\n-    case 'done':\r\n-      return 'text-emerald-200';\r\n-    default:\r\n-      return 'text-neutral-500';\r\n-  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729345010005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,8 @@\n   const [adding, setAdding] = useState(false);\r\n \r\n   const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n     console.log(`AddCard: Attempting to add card to ${column}`);\r\n-    console.log(`AddCard: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n     onAddCard(column, orderNumber, serviceTag);\r\n     console.log(`AddCard: Card added to ${column}, closing form`);\r\n     setAdding(false);\r\n   };\r\n@@ -325,9 +324,13 @@\n   return (\r\n     <div>\r\n       {adding ? (\r\n         // <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n-        <CardWithForm onSubmit={handleAddCard} onCancel={closeForm} column={column}/>\r\n+        <CardWithForm \r\n+        onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} \r\n+         onCancel={closeForm} \r\n+        column={column}\r\n+        />\r\n       ) : (\r\n         <motion.button\r\n           layout\r\n           layoutId={`add-card-${column}`}\r\n"
                },
                {
                    "date": 1729355099144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+'use client';\r\n+\r\n+import React, {\r\n+  Dispatch,\r\n+  SetStateAction,\r\n+  useState,\r\n+  DragEvent,\r\n+  FormEvent,\r\n+  useCallback,\r\n+} from 'react';\r\n+import { FiPlus, FiTrash } from 'react-icons/fi';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { FaFire } from 'react-icons/fa';\r\n+import Link from 'next/link';\r\n+import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n+import { v4 as uuidv4 } from 'uuid';\r\n+\r\n+type CardType = {\r\n+  id: string;\r\n+  title: string;\r\n+  column: ColumnType;\r\n+  orderNumber: string;\r\n+  serviceTag: string;\r\n+};\r\n+\r\n+type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n+\r\n+export const CustomKanban = () => {\r\n+  const [cards, setCards] = useState<CardType[]>([]);\r\n+\r\n+  const handleAddCard = useCallback((column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n+    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n+    const newCard: CardType = {\r\n+      id: uuidv4(),\r\n+      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n+      column,\r\n+      orderNumber,\r\n+      serviceTag,\r\n+    };\r\n+    setCards((prevCards) => {\r\n+      const updatedCards = [...prevCards, newCard];\r\n+      console.log('CustomKanban: Updated cards state:', updatedCards);\r\n+      return updatedCards;\r\n+    });\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n+      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n+        <Column\r\n+          key={columnType}\r\n+          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n+          column={columnType as ColumnType}\r\n+          headingColor={getHeadingColor(columnType as ColumnType)}\r\n+          cards={cards}\r\n+          setCards={setCards}\r\n+          onAddCard={handleAddCard}\r\n+        />\r\n+      ))}\r\n+      <BurnBarrel setCards={setCards} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+type ColumnProps = {\r\n+  title: string;\r\n+  headingColor: string;\r\n+  cards: CardType[];\r\n+  column: ColumnType;\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n+};\r\n+\r\n+const Column = ({\r\n+  title,\r\n+  headingColor,\r\n+  cards,\r\n+  column,\r\n+  setCards,\r\n+  onAddCard,\r\n+}: ColumnProps) => {\r\n+  const [active, setActive] = useState(false);\r\n+  // const filteredCards = cards.filter((c) => c.column === column);\r\n+  const filteredCards = React.useMemo(() => { const filtered = cards.filter((c) => c.column === column);\r\n+    console.log(`Column ${column}: Filtering cards:`, cards);\r\n+    console.log(`Column ${column}: Filtered result:`, filtered);\r\n+    return filtered;  }, [cards, column])\r\n+    \r\n+  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n+    e.dataTransfer.setData('cardId', card.id);\r\n+  };\r\n+\r\n+  const handleDragEnd = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setActive(false);\r\n+    clearHighlights();\r\n+\r\n+    const indicators = getIndicators();\r\n+    const { element } = getNearestIndicator(e, indicators);\r\n+    const before = element.dataset.before || '-1';\r\n+\r\n+    if (before !== cardId) {\r\n+      let copy = [...cards];\r\n+      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n+      if (!cardToTransfer) return;\r\n+      cardToTransfer = { ...cardToTransfer, column };\r\n+\r\n+      copy = copy.filter((c) => c.id !== cardId);\r\n+      const moveToBack = before === '-1';\r\n+\r\n+      if (moveToBack) {\r\n+        copy.push(cardToTransfer);\r\n+      } else {\r\n+        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n+        if (insertAtIndex === -1) return; \r\n+        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n+      }\r\n+\r\n+      setCards(copy);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    highlightIndicator(e);\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const clearHighlights = (els?: HTMLElement[]) => {\r\n+    const indicators = els || getIndicators();\r\n+    indicators.forEach((i) => {\r\n+      i.style.opacity = '0';\r\n+    });\r\n+  };\r\n+\r\n+  const highlightIndicator = (e: DragEvent) => {\r\n+    const indicators = getIndicators();\r\n+    clearHighlights(indicators);\r\n+    const el = getNearestIndicator(e, indicators);\r\n+    el.element.style.opacity = '1';\r\n+  };\r\n+\r\n+  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n+    const DISTANCE_OFFSET = 50;\r\n+\r\n+    const el = indicators.reduce(\r\n+      (closest, child) => {\r\n+        const box = child.getBoundingClientRect();\r\n+        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n+\r\n+        if (offset < 0 && offset > closest.offset) {\r\n+          return { offset: offset, element: child };\r\n+        } else {\r\n+          return closest;\r\n+        }\r\n+      },\r\n+      {\r\n+        offset: Number.NEGATIVE_INFINITY,\r\n+        element: indicators[indicators.length - 1],\r\n+      }\r\n+    );\r\n+\r\n+    return el;\r\n+  };\r\n+\r\n+  const getIndicators = () => {\r\n+    return Array.from(\r\n+      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n+    );\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    clearHighlights();\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"w-56 shrink-0\">\r\n+      <div className=\"mb-3 flex items-center justify-between\">\r\n+        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n+        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n+      </div>\r\n+      <div\r\n+        onDrop={handleDragEnd}\r\n+        onDragOver={handleDragOver}\r\n+        onDragLeave={handleDragLeave}\r\n+        className={`h-full w-full transition-colors ${\r\n+          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n+        }`}\r\n+      >\r\n+        {filteredCards.map((c) => (\r\n+          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n+        ))}\r\n+        <DropIndicator beforeId={null} column={column} />\r\n+        <AddCard column={column} onAddCard={onAddCard} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+\r\n+type CardProps = CardType & {\r\n+  handleDragStart: Function;\r\n+};\r\n+const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n+  return (\r\n+    <>\r\n+      <DropIndicator beforeId={id} column={column} />\r\n+      {/* <Link href={`/workflows/kanban/${id}`}> */}\r\n+        <motion.div\r\n+          layout\r\n+          layoutId={id}\r\n+          draggable=\"true\"\r\n+          onDragStart={(e) => \r\n+            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n+          }\r\n+          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n+        >\r\n+          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n+          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n+        </motion.div>\r\n+      {/* </Link> */}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+type DropIndicatorProps = {\r\n+  beforeId: string | null;\r\n+  column: string;\r\n+};\r\n+\r\n+const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n+  return (\r\n+    <div\r\n+      data-before={beforeId || '-1'}\r\n+      data-column={column}\r\n+      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n+    />\r\n+  );\r\n+};\r\n+\r\n+const BurnBarrel = ({\r\n+  setCards,\r\n+}: {\r\n+  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n+}) => {\r\n+  const [active, setActive] = useState(false);\r\n+\r\n+  const handleDragOver = (e: DragEvent) => {\r\n+    e.preventDefault();\r\n+    setActive(true);\r\n+  };\r\n+\r\n+  const handleDragLeave = () => {\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  const handleDrop = (e: DragEvent) => {\r\n+    const cardId = e.dataTransfer.getData('cardId');\r\n+    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n+    setActive(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      onDrop={handleDrop}\r\n+      onDragOver={handleDragOver}\r\n+      onDragLeave={handleDragLeave}\r\n+      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n+        active\r\n+          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n+          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n+      }`}\r\n+    >\r\n+      <AnimatePresence>\r\n+        {active ? (\r\n+          <motion.div\r\n+            key=\"fire\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FaFire className=\"animate-bounce\" />\r\n+          </motion.div>\r\n+        ) : (\r\n+          <motion.div\r\n+            key=\"trash\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+          >\r\n+            <FiTrash />\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+    </motion.div>\r\n+  );\r\n+};\r\n+\r\n+type AddCardProps = {\r\n+  column: ColumnType;\r\n+  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; \r\n+};\r\n+\r\n+const AddCard: React.FC<AddCardProps> = React.memo(({ column, onAddCard }) => {\r\n+  const [adding, setAdding] = useState(false);\r\n+\r\n+  const handleAddCard = useCallback((orderNumber: string, serviceTag: string) => {\r\n+    console.log(`AddCard: Attempting to add card to ${column}`);\r\n+    onAddCard(column, orderNumber, serviceTag);\r\n+    console.log(`AddCard: Card added to ${column}, closing form`);\r\n+    setAdding(false);\r\n+  }, [column, onAddCard]);\r\n+\r\n+  const closeForm = useCallback(() => {\r\n+    console.log(`AddCard: Closing form for ${column}`);\r\n+    setAdding(false);\r\n+  }, [column]);\r\n+\r\n+  return (\r\n+    <div>\r\n+      {adding ? (\r\n+        <CardWithForm \r\n+          onSubmit={handleAddCard}\r\n+          onCancel={closeForm}\r\n+          column={column}\r\n+        />\r\n+      ) : (\r\n+        <motion.button\r\n+          layout\r\n+          layoutId={`add-card-${column}`}\r\n+          onClick={() => {\r\n+            console.log(`Clicked Add Card for column: ${column}`);\r\n+            setAdding(true);\r\n+          }}\r\n+          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n+        >\r\n+          <FiPlus className=\"text-neutral-500\" />\r\n+          Add card\r\n+        </motion.button>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+});\r\n+\r\n+\r\n+const DEFAULT_CARDS: CardType[] = [];\r\n+\r\n+const getHeadingColor = (column: ColumnType): string => {\r\n+  switch (column) {\r\n+    case 'backlog':\r\n+      return 'text-neutral-500';\r\n+    case 'todo':\r\n+      return 'text-yellow-200';\r\n+    case 'doing':\r\n+      return 'text-blue-200';\r\n+    case 'done':\r\n+      return 'text-emerald-200';\r\n+    default:\r\n+      return 'text-neutral-500';\r\n+  }\r\n+};\r\n+\r\n+\r\n"
                },
                {
                    "date": 1729397411331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,12 +80,12 @@\n   onAddCard,\r\n }: ColumnProps) => {\r\n   const [active, setActive] = useState(false);\r\n   // const filteredCards = cards.filter((c) => c.column === column);\r\n-  const filteredCards = React.useMemo(() => { const filtered = cards.filter((c) => c.column === column);\r\n-    console.log(`Column ${column}: Filtering cards:`, cards);\r\n-    console.log(`Column ${column}: Filtered result:`, filtered);\r\n-    return filtered;  }, [cards, column])\r\n+  const filteredCards = React.useMemo(() => {\r\n+    console.log(`Filtering cards for column: ${column}`);\r\n+    return cards.filter((c) => c.column === column);\r\n+  }, [cards, column]);\r\n     \r\n   const handleDragStart = (e: DragEvent, card: CardType) => {\r\n     e.dataTransfer.setData('cardId', card.id);\r\n   };\r\n@@ -362,371 +362,4 @@\n   }\r\n };\r\n \r\n \r\n-'use client';\r\n-\r\n-import React, {\r\n-  Dispatch,\r\n-  SetStateAction,\r\n-  useState,\r\n-  DragEvent,\r\n-  FormEvent,\r\n-} from 'react';\r\n-import { FiPlus, FiTrash } from 'react-icons/fi';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { FaFire } from 'react-icons/fa';\r\n-import Link from 'next/link';\r\n-import { CardWithForm } from '../kanban/[kanbanid]/kanban-card';\r\n-import { v4 as uuidv4 } from 'uuid';\r\n-\r\n-type CardType = {\r\n-  id: string;\r\n-  title: string;\r\n-  column: ColumnType;\r\n-  orderNumber: string;\r\n-  serviceTag: string;\r\n-};\r\n-\r\n-type ColumnType = 'backlog' | 'todo' | 'doing' | 'done';\r\n-\r\n-export const CustomKanban = () => {\r\n-  const [cards, setCards] = useState<CardType[]>([]);\r\n-\r\n-  const handleAddCard = (column: ColumnType, orderNumber: string, serviceTag: string) => {\r\n-    console.log(`Adding card to ${column}: Order Number - ${orderNumber}, Service Tag - ${serviceTag}`);\r\n-    const newCard: CardType = {\r\n-      id: uuidv4(),\r\n-      title: `Order: ${orderNumber} - Tag: ${serviceTag}`,\r\n-      column,\r\n-      orderNumber,\r\n-      serviceTag,\r\n-    };\r\n-  //   setCards((prevCards) => [...prevCards, newCard]);\r\n-  // };\r\n-  setCards((prevCards) => {\r\n-    const updatedCards = [...prevCards, newCard];\r\n-    console.log('CustomKanban: Updated cards state:', updatedCards);\r\n-    return updatedCards;\r\n-\r\n-  });\r\n-\r\n-};\r\n-\r\n-  return (\r\n-    <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n-      {['backlog', 'todo', 'doing', 'done'].map((columnType) => (\r\n-        <Column\r\n-          key={columnType}\r\n-          title={columnType.charAt(0).toUpperCase() + columnType.slice(1)}\r\n-          column={columnType as ColumnType}\r\n-          headingColor={getHeadingColor(columnType as ColumnType)}\r\n-          cards={cards}\r\n-          setCards={setCards}\r\n-          onAddCard={handleAddCard}\r\n-        />\r\n-      ))}\r\n-      <BurnBarrel setCards={setCards} />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-type ColumnProps = {\r\n-  title: string;\r\n-  headingColor: string;\r\n-  cards: CardType[];\r\n-  column: ColumnType;\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void;\r\n-};\r\n-\r\n-const Column = ({\r\n-  title,\r\n-  headingColor,\r\n-  cards,\r\n-  column,\r\n-  setCards,\r\n-  onAddCard,\r\n-}: ColumnProps) => {\r\n-  const [active, setActive] = useState(false);\r\n-  // const filteredCards = cards.filter((c) => c.column === column);\r\n-  const filteredCards = React.useMemo(() => { const filtered = cards.filter((c) => c.column === column);\r\n-    console.log(`Column ${column}: Filtering cards:`, cards);\r\n-    console.log(`Column ${column}: Filtered result:`, filtered);\r\n-    return filtered;  }, [cards, column])\r\n-    \r\n-  const handleDragStart = (e: DragEvent, card: CardType) => {\r\n-    e.dataTransfer.setData('cardId', card.id);\r\n-  };\r\n-\r\n-  const handleDragEnd = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setActive(false);\r\n-    clearHighlights();\r\n-\r\n-    const indicators = getIndicators();\r\n-    const { element } = getNearestIndicator(e, indicators);\r\n-    const before = element.dataset.before || '-1';\r\n-\r\n-    if (before !== cardId) {\r\n-      let copy = [...cards];\r\n-      let cardToTransfer = copy.find((c) => c.id === cardId);\r\n-      if (!cardToTransfer) return;\r\n-      cardToTransfer = { ...cardToTransfer, column };\r\n-\r\n-      copy = copy.filter((c) => c.id !== cardId);\r\n-      const moveToBack = before === '-1';\r\n-\r\n-      if (moveToBack) {\r\n-        copy.push(cardToTransfer);\r\n-      } else {\r\n-        const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n-        if (insertAtIndex === -1) return; \r\n-        copy.splice(insertAtIndex, 0, cardToTransfer);\r\n-      }\r\n-\r\n-      setCards(copy);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    highlightIndicator(e);\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const clearHighlights = (els?: HTMLElement[]) => {\r\n-    const indicators = els || getIndicators();\r\n-    indicators.forEach((i) => {\r\n-      i.style.opacity = '0';\r\n-    });\r\n-  };\r\n-\r\n-  const highlightIndicator = (e: DragEvent) => {\r\n-    const indicators = getIndicators();\r\n-    clearHighlights(indicators);\r\n-    const el = getNearestIndicator(e, indicators);\r\n-    el.element.style.opacity = '1';\r\n-  };\r\n-\r\n-  const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n-    const DISTANCE_OFFSET = 50;\r\n-\r\n-    const el = indicators.reduce(\r\n-      (closest, child) => {\r\n-        const box = child.getBoundingClientRect();\r\n-        const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n-\r\n-        if (offset < 0 && offset > closest.offset) {\r\n-          return { offset: offset, element: child };\r\n-        } else {\r\n-          return closest;\r\n-        }\r\n-      },\r\n-      {\r\n-        offset: Number.NEGATIVE_INFINITY,\r\n-        element: indicators[indicators.length - 1],\r\n-      }\r\n-    );\r\n-\r\n-    return el;\r\n-  };\r\n-\r\n-  const getIndicators = () => {\r\n-    return Array.from(\r\n-      document.querySelectorAll(`[data-column=\"${column}\"]`) as unknown as HTMLElement[]\r\n-    );\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    clearHighlights();\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"w-56 shrink-0\">\r\n-      <div className=\"mb-3 flex items-center justify-between\">\r\n-        <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n-        <span className=\"rounded text-sm text-neutral-400\">{filteredCards.length}</span>\r\n-      </div>\r\n-      <div\r\n-        onDrop={handleDragEnd}\r\n-        onDragOver={handleDragOver}\r\n-        onDragLeave={handleDragLeave}\r\n-        className={`h-full w-full transition-colors ${\r\n-          active ? 'bg-neutral-800/50' : 'bg-neutral-800/0'\r\n-        }`}\r\n-      >\r\n-        {filteredCards.map((c) => (\r\n-          <Card key={c.id} {...c} handleDragStart={handleDragStart} />\r\n-        ))}\r\n-        <DropIndicator beforeId={null} column={column} />\r\n-        <AddCard column={column} onAddCard={onAddCard} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-\r\n-type CardProps = CardType & {\r\n-  handleDragStart: Function;\r\n-};\r\n-const Card = ({ title, id, column, orderNumber, serviceTag, handleDragStart }: CardProps) => {\r\n-  return (\r\n-    <>\r\n-      <DropIndicator beforeId={id} column={column} />\r\n-      {/* <Link href={`/workflows/kanban/${id}`}> */}\r\n-        <motion.div\r\n-          layout\r\n-          layoutId={id}\r\n-          draggable=\"true\"\r\n-          onDragStart={(e) => \r\n-            handleDragStart(e as unknown as DragEvent<HTMLDivElement>, { id, title, column, orderNumber, serviceTag })\r\n-          }\r\n-          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n-        >\r\n-          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Order Number: {orderNumber}</p>\r\n-          <p className=\"text-xs text-neutral-400\">Service Tag: {serviceTag}</p>\r\n-        </motion.div>\r\n-      {/* </Link> */}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-type DropIndicatorProps = {\r\n-  beforeId: string | null;\r\n-  column: string;\r\n-};\r\n-\r\n-const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n-  return (\r\n-    <div\r\n-      data-before={beforeId || '-1'}\r\n-      data-column={column}\r\n-      className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n-    />\r\n-  );\r\n-};\r\n-\r\n-const BurnBarrel = ({\r\n-  setCards,\r\n-}: {\r\n-  setCards: Dispatch<SetStateAction<CardType[]>>;\r\n-}) => {\r\n-  const [active, setActive] = useState(false);\r\n-\r\n-  const handleDragOver = (e: DragEvent) => {\r\n-    e.preventDefault();\r\n-    setActive(true);\r\n-  };\r\n-\r\n-  const handleDragLeave = () => {\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  const handleDrop = (e: DragEvent) => {\r\n-    const cardId = e.dataTransfer.getData('cardId');\r\n-    setCards((cards) => cards.filter((c) => c.id !== cardId));\r\n-    setActive(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      onDrop={handleDrop}\r\n-      onDragOver={handleDragOver}\r\n-      onDragLeave={handleDragLeave}\r\n-      className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl transition-colors ${\r\n-        active\r\n-          ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n-          : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n-      }`}\r\n-    >\r\n-      <AnimatePresence>\r\n-        {active ? (\r\n-          <motion.div\r\n-            key=\"fire\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FaFire className=\"animate-bounce\" />\r\n-          </motion.div>\r\n-        ) : (\r\n-          <motion.div\r\n-            key=\"trash\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-          >\r\n-            <FiTrash />\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-    </motion.div>\r\n-  );\r\n-};\r\n-\r\n-type AddCardProps = {\r\n-  column: ColumnType;\r\n-  onAddCard: (column: ColumnType, orderNumber: string, serviceTag: string) => void; \r\n-};\r\n-\r\n-const AddCard: React.FC<AddCardProps> = ({ column, onAddCard }) => {\r\n-  const [adding, setAdding] = useState(false);\r\n-\r\n-  const handleAddCard = (orderNumber: string, serviceTag: string) => {\r\n-    console.log(`AddCard: Attempting to add card to ${column}`);\r\n-    onAddCard(column, orderNumber, serviceTag);\r\n-    console.log(`AddCard: Card added to ${column}, closing form`);\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  const closeForm = () => {\r\n-    console.log(`AddCard: Closing form for ${column}`);\r\n-    setAdding(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      {adding ? (\r\n-        // <CardWithForm onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} onCancel={closeForm} />\r\n-        <CardWithForm \r\n-        onSubmit={(orderNumber, serviceTag) => handleAddCard(orderNumber, serviceTag)} \r\n-         onCancel={closeForm} \r\n-        column={column}\r\n-        />\r\n-      ) : (\r\n-        <motion.button\r\n-          layout\r\n-          layoutId={`add-card-${column}`}\r\n-          onClick={() => {\r\n-            console.log(`Clicked Add Card for column: ${column}`);\r\n-            setAdding(true);\r\n-          }}\r\n-          className=\"flex w-full items-center gap-2 rounded border border-dashed border-neutral-700 p-3 text-neutral-500\"\r\n-        >\r\n-          <FiPlus className=\"text-neutral-500\" />\r\n-          Add card\r\n-        </motion.button>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-\r\n-const DEFAULT_CARDS: CardType[] = [];\r\n-\r\n-const getHeadingColor = (column: ColumnType): string => {\r\n-  switch (column) {\r\n-    case 'backlog':\r\n-      return 'text-neutral-500';\r\n-    case 'todo':\r\n-      return 'text-yellow-200';\r\n-    case 'doing':\r\n-      return 'text-blue-200';\r\n-    case 'done':\r\n-      return 'text-emerald-200';\r\n-    default:\r\n-      return 'text-neutral-500';\r\n-  }\r\n-};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1728661016889,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport React, {\r\n    Dispatch,\r\n    SetStateAction,\r\n    useState,\r\n    DragEvent,\r\n    FormEvent,\r\n  } from \"react\";\r\n  import { FiPlus, FiTrash } from \"react-icons/fi\";\r\n  import { motion } from \"framer-motion\";\r\n  import { FaFire } from \"react-icons/fa\";\r\nimport Link from \"next/link\";\r\n  \r\n  export const CustomKanban = () => {\r\n    return (\r\n      <div className=\"h-screen w-full bg-neutral-900 text-neutral-50\">\r\n        <Board />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const Board = () => {\r\n    const [cards, setCards] = useState(DEFAULT_CARDS);\r\n  \r\n    return (\r\n      <div className=\"flex h-full w-full gap-3 overflow-scroll p-12\">\r\n        <Column\r\n          title=\"Backlog\"\r\n          column=\"backlog\"\r\n          headingColor=\"text-neutral-500\"\r\n          cards={cards}\r\n          setCards={setCards}\r\n        />\r\n        <Column\r\n          title=\"TODO\"\r\n          column=\"todo\"\r\n          headingColor=\"text-yellow-200\"\r\n          cards={cards}\r\n          setCards={setCards}\r\n        />\r\n        <Column\r\n          title=\"In progress\"\r\n          column=\"doing\"\r\n          headingColor=\"text-blue-200\"\r\n          cards={cards}\r\n          setCards={setCards}\r\n        />\r\n        <Column\r\n          title=\"Complete\"\r\n          column=\"done\"\r\n          headingColor=\"text-emerald-200\"\r\n          cards={cards}\r\n          setCards={setCards}\r\n        />\r\n        <BurnBarrel setCards={setCards} />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  type ColumnProps = {\r\n    title: string;\r\n    headingColor: string;\r\n    cards: CardType[];\r\n    column: ColumnType;\r\n    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n  };\r\n  \r\n  const Column = ({\r\n    title,\r\n    headingColor,\r\n    cards,\r\n    column,\r\n    setCards,\r\n  }: ColumnProps) => {\r\n    const [active, setActive] = useState(false);\r\n  \r\n    const handleDragStart = (e: DragEvent, card: CardType) => {\r\n      e.dataTransfer.setData(\"cardId\", card.id);\r\n    };\r\n  \r\n    const handleDragEnd = (e: DragEvent) => {\r\n      const cardId = e.dataTransfer.getData(\"cardId\");\r\n  \r\n      setActive(false);\r\n      clearHighlights();\r\n  \r\n      const indicators = getIndicators();\r\n      const { element } = getNearestIndicator(e, indicators);\r\n  \r\n      const before = element.dataset.before || \"-1\";\r\n  \r\n      if (before !== cardId) {\r\n        let copy = [...cards];\r\n  \r\n        let cardToTransfer = copy.find((c) => c.id === cardId);\r\n        if (!cardToTransfer) return;\r\n        cardToTransfer = { ...cardToTransfer, column };\r\n  \r\n        copy = copy.filter((c) => c.id !== cardId);\r\n  \r\n        const moveToBack = before === \"-1\";\r\n  \r\n        if (moveToBack) {\r\n          copy.push(cardToTransfer);\r\n        } else {\r\n          const insertAtIndex = copy.findIndex((el) => el.id === before);\r\n          if (insertAtIndex === undefined) return;\r\n  \r\n          copy.splice(insertAtIndex, 0, cardToTransfer);\r\n        }\r\n  \r\n        setCards(copy);\r\n      }\r\n    };\r\n  \r\n    const handleDragOver = (e: DragEvent) => {\r\n      e.preventDefault();\r\n      highlightIndicator(e);\r\n  \r\n      setActive(true);\r\n    };\r\n  \r\n    const clearHighlights = (els?: HTMLElement[]) => {\r\n      const indicators = els || getIndicators();\r\n  \r\n      indicators.forEach((i) => {\r\n        i.style.opacity = \"0\";\r\n      });\r\n    };\r\n  \r\n    const highlightIndicator = (e: DragEvent) => {\r\n      const indicators = getIndicators();\r\n  \r\n      clearHighlights(indicators);\r\n  \r\n      const el = getNearestIndicator(e, indicators);\r\n  \r\n      el.element.style.opacity = \"1\";\r\n    };\r\n  \r\n    const getNearestIndicator = (e: DragEvent, indicators: HTMLElement[]) => {\r\n      const DISTANCE_OFFSET = 50;\r\n  \r\n      const el = indicators.reduce(\r\n        (closest, child) => {\r\n          const box = child.getBoundingClientRect();\r\n  \r\n          const offset = e.clientY - (box.top + DISTANCE_OFFSET);\r\n  \r\n          if (offset < 0 && offset > closest.offset) {\r\n            return { offset: offset, element: child };\r\n          } else {\r\n            return closest;\r\n          }\r\n        },\r\n        {\r\n          offset: Number.NEGATIVE_INFINITY,\r\n          element: indicators[indicators.length - 1],\r\n        }\r\n      );\r\n  \r\n      return el;\r\n    };\r\n  \r\n    const getIndicators = () => {\r\n      return Array.from(\r\n        document.querySelectorAll(\r\n          `[data-column=\"${column}\"]`\r\n        ) as unknown as HTMLElement[]\r\n      );\r\n    };\r\n  \r\n    const handleDragLeave = () => {\r\n      clearHighlights();\r\n      setActive(false);\r\n    };\r\n  \r\n    const filteredCards = cards.filter((c) => c.column === column);\r\n  \r\n    return (\r\n      <div className=\"w-56 shrink-0\">\r\n        <div className=\"mb-3 flex items-center justify-between\">\r\n          <h3 className={`font-medium ${headingColor}`}>{title}</h3>\r\n          <span className=\"rounded text-sm text-neutral-400\">\r\n            {filteredCards.length}\r\n          </span>\r\n        </div>\r\n        <div\r\n          onDrop={handleDragEnd}\r\n          onDragOver={handleDragOver}\r\n          onDragLeave={handleDragLeave}\r\n          className={`h-full w-full transition-colors ${\r\n            active ? \"bg-neutral-800/50\" : \"bg-neutral-800/0\"\r\n          }`}\r\n        >\r\n          {filteredCards.map((c) => {\r\n            return <Card key={c.id} {...c} handleDragStart={handleDragStart} />;\r\n          })}\r\n          <DropIndicator beforeId={null} column={column} />\r\n          <AddCard column={column} setCards={setCards} />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  type CardProps = CardType & {\r\n    handleDragStart: Function;\r\n  };\r\n  \r\n  const Card = ({ title, id, column, handleDragStart }: CardProps) => {\r\n    return (\r\n      <>\r\n        <DropIndicator beforeId={id} column={column} />\r\n        <Link href={`/workflows/kanban/${id}`}>\r\n        <motion.div\r\n          layout\r\n          layoutId={id}\r\n          draggable=\"true\"\r\n          onDragStart={(e) => handleDragStart(e, { title, id, column })}\r\n          className=\"cursor-grab rounded border border-neutral-700 bg-neutral-800 p-3 active:cursor-grabbing\"\r\n        >\r\n          <p className=\"text-sm text-neutral-100\">{title}</p>\r\n        </motion.div>\r\n        </Link>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  type DropIndicatorProps = {\r\n    beforeId: string | null;\r\n    column: string;\r\n  };\r\n  \r\n  const DropIndicator = ({ beforeId, column }: DropIndicatorProps) => {\r\n    return (\r\n      <div\r\n        data-before={beforeId || \"-1\"}\r\n        data-column={column}\r\n        className=\"my-0.5 h-0.5 w-full bg-violet-400 opacity-0\"\r\n      />\r\n    );\r\n  };\r\n  \r\n  const BurnBarrel = ({\r\n    setCards,\r\n  }: {\r\n    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n  }) => {\r\n    const [active, setActive] = useState(false);\r\n  \r\n    const handleDragOver = (e: DragEvent) => {\r\n      e.preventDefault();\r\n      setActive(true);\r\n    };\r\n  \r\n    const handleDragLeave = () => {\r\n      setActive(false);\r\n    };\r\n  \r\n    const handleDragEnd = (e: DragEvent) => {\r\n      const cardId = e.dataTransfer.getData(\"cardId\");\r\n  \r\n      setCards((pv) => pv.filter((c) => c.id !== cardId));\r\n  \r\n      setActive(false);\r\n    };\r\n  \r\n    return (\r\n      <div\r\n        onDrop={handleDragEnd}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        className={`mt-10 grid h-56 w-56 shrink-0 place-content-center rounded border text-3xl ${\r\n          active\r\n            ? \"border-red-800 bg-red-800/20 text-red-500\"\r\n            : \"border-neutral-500 bg-neutral-500/20 text-neutral-500\"\r\n        }`}\r\n      >\r\n        {active ? <FaFire className=\"animate-bounce\" /> : <FiTrash />}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  type AddCardProps = {\r\n    column: ColumnType;\r\n    setCards: Dispatch<SetStateAction<CardType[]>>;\r\n  };\r\n  \r\n  const AddCard = ({ column, setCards }: AddCardProps) => {\r\n    const [text, setText] = useState(\"\");\r\n    const [adding, setAdding] = useState(false);\r\n  \r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n  \r\n      if (!text.trim().length) return;\r\n  \r\n      const newCard = {\r\n        column,\r\n        title: text.trim(),\r\n        id: Math.random().toString(),\r\n      };\r\n  \r\n      setCards((pv) => [...pv, newCard]);\r\n  \r\n      setAdding(false);\r\n    };\r\n  \r\n    return (\r\n      <>\r\n        {adding ? (\r\n          <motion.form layout onSubmit={handleSubmit}>\r\n            <textarea\r\n              onChange={(e) => setText(e.target.value)}\r\n              autoFocus\r\n              placeholder=\"Add new task...\"\r\n              className=\"w-full rounded border border-violet-400 bg-violet-400/20 p-3 text-sm text-neutral-50 placeholder-violet-300 focus:outline-0\"\r\n            />\r\n            <div className=\"mt-1.5 flex items-center justify-end gap-1.5\">\r\n              <button\r\n                onClick={() => setAdding(false)}\r\n                className=\"px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n              >\r\n                Close\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex items-center gap-1.5 rounded bg-neutral-50 px-3 py-1.5 text-xs text-neutral-950 transition-colors hover:bg-neutral-300\"\r\n              >\r\n                <span>Add</span>\r\n                <FiPlus />\r\n              </button>\r\n            </div>\r\n          </motion.form>\r\n        ) : (\r\n          <motion.button\r\n            layout\r\n            onClick={() => setAdding(true)}\r\n            className=\"flex w-full items-center gap-1.5 px-3 py-1.5 text-xs text-neutral-400 transition-colors hover:text-neutral-50\"\r\n          >\r\n            <span>Add card</span>\r\n            <FiPlus />\r\n          </motion.button>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n  \r\n  type ColumnType = \"backlog\" | \"todo\" | \"doing\" | \"done\";\r\n  \r\n  type CardType = {\r\n    title: string;\r\n    id: string;\r\n    column: ColumnType;\r\n  };\r\n  \r\n  const DEFAULT_CARDS: CardType[] = [\r\n    // BACKLOG\r\n    { title: \"Look into render bug in dashboard\", id: \"1\", column: \"backlog\" },\r\n    { title: \"SOX compliance checklist\", id: \"2\", column: \"backlog\" },\r\n    { title: \"[SPIKE] Migrate to Azure\", id: \"3\", column: \"backlog\" },\r\n    { title: \"Document Notifications service\", id: \"4\", column: \"backlog\" },\r\n    // TODO\r\n    {\r\n      title: \"Research DB options for new microservice\",\r\n      id: \"5\",\r\n      column: \"todo\",\r\n    },\r\n    { title: \"Postmortem for outage\", id: \"6\", column: \"todo\" },\r\n    { title: \"Sync with product on Q3 roadmap\", id: \"7\", column: \"todo\" },\r\n  \r\n    // DOING\r\n    {\r\n      title: \"Refactor context providers to use Zustand\",\r\n      id: \"8\",\r\n      column: \"doing\",\r\n    },\r\n    { title: \"Add logging to daily CRON\", id: \"9\", column: \"doing\" },\r\n    // DONE\r\n    {\r\n      title: \"Set up DD dashboards for Lambda listener\",\r\n      id: \"10\",\r\n      column: \"done\",\r\n    },\r\n  ];\r\n"
        }
    ]
}