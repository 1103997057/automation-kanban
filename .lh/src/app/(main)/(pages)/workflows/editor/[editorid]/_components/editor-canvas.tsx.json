{
    "sourceFile": "src/app/(main)/(pages)/workflows/editor/[editorid]/_components/editor-canvas.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1728216815773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1728216815773,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport  { ReactFlow,Node, Edge, Connection, ReactFlowInstance, addEdge, applyEdgeChanges, applyNodeChanges, Controls, MiniMap, ReactFlowProvider } from '@xyflow/react'\r\nimport '@xyflow/react/dist/style.css'\r\nimport { EditorCanvasCardType,EditorNodeType } from '@/lib/type'\r\nimport { useEditor } from '@/providers/editor-provider'\r\nimport EditorCanvasCardSingle from './editor-canvas-card-single'\r\nimport { ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'\r\nimport { toast } from 'sonner'\r\nimport { usePathname } from 'next/navigation'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { EditorCanvasDefaultCardTypes } from '@/lib/constant'\r\nimport { Background } from '@xyflow/react'\r\n\r\ntype Props = {}\r\n\r\nconst initialNodes: EditorNodeType[] = []\r\nconst initialEdges: Edge[] = []\r\n\r\nconst EditorCanvas = (props: Props) => {\r\n  const { dispatch, state } = useEditor()\r\n  const [nodes, setNodes] = useState<Node[]>(initialNodes)\r\n  const [edges, setEdges] = useState<Edge[]>(initialEdges)\r\n  const [isWorkFlowLoading, setIsWorkFlowLoading] = useState<boolean>(false)\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null)\r\n  const pathname = usePathname()\r\n  \r\n  const onDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault()\r\n    event.dataTransfer.dropEffect = 'move'\r\n  }, [])\r\n\r\n  const onDrop = useCallback(\r\n    (event: React.DragEvent<HTMLDivElement>) => {\r\n      event.preventDefault()\r\n\r\n      const type = event.dataTransfer.getData('application/reactflow') as EditorCanvasCardType['type']\r\n\r\n      if (typeof type === 'undefined' || !type) {\r\n        return\r\n      }\r\n\r\n      const triggerAlreadyExists = state.editor.elements.find(\r\n        (node) => node.type === 'Trigger'\r\n      )\r\n\r\n      if (type === 'Trigger' && triggerAlreadyExists) {\r\n        toast('Only one trigger can be added to automations at the moment')\r\n        return\r\n      }\r\n\r\n      if (!reactFlowInstance) return\r\n      const position = reactFlowInstance.screenToFlowPosition({\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n      })\r\n\r\n      const newNode = {\r\n        id: uuidv4(),\r\n        type,\r\n        position,\r\n        data: {\r\n          title: type,\r\n          description: EditorCanvasDefaultCardTypes[type].description,\r\n          completed: false,\r\n          current: false,\r\n          metadata: {},\r\n          type: type,\r\n        },\r\n      }\r\n\r\n      setNodes((nds) => nds.concat(newNode))\r\n    },\r\n    [reactFlowInstance, state.editor.elements]\r\n  )\r\n\r\n  const onNodesChange = useCallback((changes: any) => {\r\n    setNodes((nds) => applyNodeChanges(changes, nds))\r\n  }, [setNodes])\r\n\r\n  const onEdgesChange = useCallback((changes: any) => {\r\n    setEdges((eds) => applyEdgeChanges(changes, eds))\r\n  }, [setEdges])\r\n\r\n  const onConnect = useCallback(\r\n    (connection: Edge | Connection) => setEdges((eds) => addEdge(connection, eds)),\r\n    [setEdges]\r\n  )\r\n\r\n  const nodeTypes = useMemo(\r\n    () => ({\r\n      Action: EditorCanvasCardSingle,\r\n      Trigger: EditorCanvasCardSingle,\r\n      Email: EditorCanvasCardSingle,\r\n      Condition: EditorCanvasCardSingle,\r\n      AI: EditorCanvasCardSingle,\r\n      Slack: EditorCanvasCardSingle,\r\n      'Google Drive': EditorCanvasCardSingle,\r\n      Notion: EditorCanvasCardSingle,\r\n      Discord: EditorCanvasCardSingle,\r\n      'Custom Webhook': EditorCanvasCardSingle,\r\n      'Google Calendar': EditorCanvasCardSingle,\r\n      Wait: EditorCanvasCardSingle,\r\n    }),\r\n    []\r\n  )\r\n\r\n  const handleClickCanvas = useCallback(() => {\r\n    // Add your canvas click handler logic here\r\n  }, [])\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n    <ResizablePanelGroup direction=\"horizontal\">\r\n      <ResizablePanel defaultSize={70}>\r\n        <div className=\"flex h-full items-center justify-center\">\r\n          <div\r\n            style={{ width: '100%', height: '100%', paddingBottom: '70px' }}\r\n            className=\"relative\"\r\n          >\r\n            <ReactFlow\r\n              className=\"w-[300px]\"\r\n              onDrop={onDrop}\r\n              onDragOver={onDragOver}\r\n              nodes={nodes}\r\n              onNodesChange={onNodesChange}\r\n              edges={edges}\r\n              onEdgesChange={onEdgesChange}\r\n              onConnect={onConnect}\r\n              onInit={setReactFlowInstance}\r\n              fitView\r\n              onClick={handleClickCanvas}\r\n              nodeTypes={nodeTypes}\r\n            />\r\n             <Controls position=\"top-left\" />\r\n             <MiniMap\r\n                  position=\"bottom-left\"\r\n                  className=\"!bg-background\"\r\n                  zoomable\r\n                  pannable\r\n            />\r\n            <Background\r\n                  //@ts-ignore\r\n                  color=\"#eee\"\r\n                  gap={12}\r\n                  size={1}\r\n                />\r\n          </div>\r\n        </div>\r\n      </ResizablePanel>\r\n    </ResizablePanelGroup>\r\n    </ReactFlowProvider>\r\n  )\r\n}\r\n\r\nexport default EditorCanvas\r\n\r\n"
        }
    ]
}