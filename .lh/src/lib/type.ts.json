{
    "sourceFile": "src/lib/type.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1716719422992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726815072290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,20 @@\n+import { ConnectionProviderProps } from '@/providers/connections-provider'\r\n import { z } from 'zod'\r\n \r\n export const EditUserProfileSchema = z.object({\r\n     email: z.string().email('Required'),\r\n     name: z.string().min(1, 'Required'),\r\n\\ No newline at end of file\n-  })\n+  })\r\n+\r\n+  export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n+\r\n+export type Connection = {\r\n+  title: ConnectionTypes\r\n+  description: string\r\n+  image: string\r\n+  connectionKey: keyof ConnectionProviderProps\r\n+  accessTokenKey?: string\r\n+  alwaysTrue?: boolean\r\n+  slackSpecial?: boolean\r\n+  // siteURL?: string\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727003985954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,13 @@\n export const EditUserProfileSchema = z.object({\r\n     email: z.string().email('Required'),\r\n     name: z.string().min(1, 'Required'),\r\n   })\r\n-\r\n+  export const WorkflowFormSchema = z.object({\r\n+    name: z.string().min(1, 'Required'),\r\n+    description: z.string().min(1, 'Required'),\r\n+  })\r\n+  \r\n   export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n \r\n export type Connection = {\r\n   title: ConnectionTypes\r\n"
                },
                {
                    "date": 1727417087399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,45 @@\n export const EditUserProfileSchema = z.object({\r\n     email: z.string().email('Required'),\r\n     name: z.string().min(1, 'Required'),\r\n   })\r\n+  // export const WorkflowFormSchema = z.object({\r\n+  //   name: z.string().min(1, 'Required'),\r\n+  //   description: z.string().min(1, 'Required'),\r\n+  // })\r\n+\r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-  })\r\n+    pilotStartDate: z.date({\r\n+      required_error: \"Pilot Start Date is required\",\r\n+    }),\r\n+    pilotEndDate: z.date({\r\n+      required_error: \"Pilot End Date is required\",\r\n+    }),\r\n+    frcDate: z.date({\r\n+      required_error: \"FRC Date is required\",\r\n+    }),\r\n+  }).superRefine((data, ctx) => {\r\n+    if (data.pilotEndDate < data.pilotStartDate) {\r\n+      ctx.addIssue({\r\n+        code: 'custom',\r\n+        path: ['pilotEndDate'],\r\n+        message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n+      });\r\n+    }\r\n   \r\n+    if (data.frcDate < data.pilotStartDate) {\r\n+      ctx.addIssue({\r\n+        code: 'custom',\r\n+        path: ['frcDate'],\r\n+        message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n+      });\r\n+    }\r\n+  });\r\n+  \r\n+  \r\n+  \r\n   export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n \r\n export type Connection = {\r\n   title: ConnectionTypes\r\n"
                },
                {
                    "date": 1727419044187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,27 +12,37 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.date({\r\n+    pilotStartDate: z.string({\r\n       required_error: \"Pilot Start Date is required\",\r\n+    }).refine((val) => !isNaN(Date.parse(val)), {\r\n+      message: \"Invalid Pilot Start Date\",\r\n     }),\r\n-    pilotEndDate: z.date({\r\n+    pilotEndDate: z.string({\r\n       required_error: \"Pilot End Date is required\",\r\n+    }).refine((val) => !isNaN(Date.parse(val)), {\r\n+      message: \"Invalid Pilot End Date\",\r\n     }),\r\n-    frcDate: z.date({\r\n+    frcDate: z.string({\r\n       required_error: \"FRC Date is required\",\r\n+    }).refine((val) => !isNaN(Date.parse(val)), {\r\n+      message: \"Invalid FRC Date\",\r\n     }),\r\n   }).superRefine((data, ctx) => {\r\n-    if (data.pilotEndDate < data.pilotStartDate) {\r\n+    const pilotStartDate = new Date(data.pilotStartDate);\r\n+    const pilotEndDate = new Date(data.pilotEndDate);\r\n+    const frcDate = new Date(data.frcDate);\r\n+  \r\n+    if (pilotEndDate < pilotStartDate) {\r\n       ctx.addIssue({\r\n         code: 'custom',\r\n         path: ['pilotEndDate'],\r\n         message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n       });\r\n     }\r\n   \r\n-    if (data.frcDate < data.pilotStartDate) {\r\n+    if (frcDate < pilotStartDate) {\r\n       ctx.addIssue({\r\n         code: 'custom',\r\n         path: ['frcDate'],\r\n         message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n"
                },
                {
                    "date": 1727420001891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,43 +12,27 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.string({\r\n-      required_error: \"Pilot Start Date is required\",\r\n-    }).refine((val) => !isNaN(Date.parse(val)), {\r\n-      message: \"Invalid Pilot Start Date\",\r\n-    }),\r\n-    pilotEndDate: z.string({\r\n-      required_error: \"Pilot End Date is required\",\r\n-    }).refine((val) => !isNaN(Date.parse(val)), {\r\n-      message: \"Invalid Pilot End Date\",\r\n-    }),\r\n-    frcDate: z.string({\r\n-      required_error: \"FRC Date is required\",\r\n-    }).refine((val) => !isNaN(Date.parse(val)), {\r\n-      message: \"Invalid FRC Date\",\r\n-    }),\r\n-  }).superRefine((data, ctx) => {\r\n-    const pilotStartDate = new Date(data.pilotStartDate);\r\n-    const pilotEndDate = new Date(data.pilotEndDate);\r\n-    const frcDate = new Date(data.frcDate);\r\n-  \r\n-    if (pilotEndDate < pilotStartDate) {\r\n-      ctx.addIssue({\r\n-        code: 'custom',\r\n-        path: ['pilotEndDate'],\r\n-        message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n-      });\r\n+    pilotStartDate: z.string().optional(),\r\n+    pilotEndDate: z.string().optional(),\r\n+    frcDate: z.string().optional(),\r\n+  }).refine((data) => {\r\n+    if (data.pilotStartDate && data.pilotEndDate) {\r\n+      return new Date(data.pilotEndDate) >= new Date(data.pilotStartDate);\r\n     }\r\n-  \r\n-    if (frcDate < pilotStartDate) {\r\n-      ctx.addIssue({\r\n-        code: 'custom',\r\n-        path: ['frcDate'],\r\n-        message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n-      });\r\n+    return true;\r\n+  }, {\r\n+    message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n+    path: [\"pilotEndDate\"],\r\n+  }).refine((data) => {\r\n+    if (data.pilotStartDate && data.frcDate) {\r\n+      return new Date(data.frcDate) >= new Date(data.pilotStartDate);\r\n     }\r\n+    return true;\r\n+  }, {\r\n+    message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n+    path: [\"frcDate\"],\r\n   });\r\n   \r\n   \r\n   \r\n"
                },
                {
                    "date": 1727420048410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,27 +12,43 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.string().optional(),\r\n-    pilotEndDate: z.string().optional(),\r\n-    frcDate: z.string().optional(),\r\n-  }).refine((data) => {\r\n-    if (data.pilotStartDate && data.pilotEndDate) {\r\n-      return new Date(data.pilotEndDate) >= new Date(data.pilotStartDate);\r\n+    pilotStartDate: z.string({\r\n+      required_error: \"Pilot Start Date is required\",\r\n+    }).refine((val) => !isNaN(Date.parse(val)), {\r\n+      message: \"Invalid Pilot Start Date\",\r\n+    }),\r\n+    pilotEndDate: z.string({\r\n+      required_error: \"Pilot End Date is required\",\r\n+    }).refine((val) => !isNaN(Date.parse(val)), {\r\n+      message: \"Invalid Pilot End Date\",\r\n+    }),\r\n+    frcDate: z.string({\r\n+      required_error: \"FRC Date is required\",\r\n+    }).refine((val) => !isNaN(Date.parse(val)), {\r\n+      message: \"Invalid FRC Date\",\r\n+    }),\r\n+  }).superRefine((data, ctx) => {\r\n+    const pilotStartDate = new Date(data.pilotStartDate);\r\n+    const pilotEndDate = new Date(data.pilotEndDate);\r\n+    const frcDate = new Date(data.frcDate);\r\n+  \r\n+    if (pilotEndDate < pilotStartDate) {\r\n+      ctx.addIssue({\r\n+        code: 'custom',\r\n+        path: ['pilotEndDate'],\r\n+        message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n+      });\r\n     }\r\n-    return true;\r\n-  }, {\r\n-    message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n-    path: [\"pilotEndDate\"],\r\n-  }).refine((data) => {\r\n-    if (data.pilotStartDate && data.frcDate) {\r\n-      return new Date(data.frcDate) >= new Date(data.pilotStartDate);\r\n+  \r\n+    if (frcDate < pilotStartDate) {\r\n+      ctx.addIssue({\r\n+        code: 'custom',\r\n+        path: ['frcDate'],\r\n+        message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n+      });\r\n     }\r\n-    return true;\r\n-  }, {\r\n-    message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n-    path: [\"frcDate\"],\r\n   });\r\n   \r\n   \r\n   \r\n"
                },
                {
                    "date": 1727420381635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,43 +12,27 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.string({\r\n-      required_error: \"Pilot Start Date is required\",\r\n-    }).refine((val) => !isNaN(Date.parse(val)), {\r\n-      message: \"Invalid Pilot Start Date\",\r\n-    }),\r\n-    pilotEndDate: z.string({\r\n-      required_error: \"Pilot End Date is required\",\r\n-    }).refine((val) => !isNaN(Date.parse(val)), {\r\n-      message: \"Invalid Pilot End Date\",\r\n-    }),\r\n-    frcDate: z.string({\r\n-      required_error: \"FRC Date is required\",\r\n-    }).refine((val) => !isNaN(Date.parse(val)), {\r\n-      message: \"Invalid FRC Date\",\r\n-    }),\r\n-  }).superRefine((data, ctx) => {\r\n-    const pilotStartDate = new Date(data.pilotStartDate);\r\n-    const pilotEndDate = new Date(data.pilotEndDate);\r\n-    const frcDate = new Date(data.frcDate);\r\n-  \r\n-    if (pilotEndDate < pilotStartDate) {\r\n-      ctx.addIssue({\r\n-        code: 'custom',\r\n-        path: ['pilotEndDate'],\r\n-        message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n-      });\r\n+    pilotStartDate: z.string().optional(),\r\n+    pilotEndDate: z.string().optional(),\r\n+    frcDate: z.string().optional(),\r\n+  }).refine((data) => {\r\n+    if (data.pilotStartDate && data.pilotEndDate) {\r\n+      return new Date(data.pilotEndDate) >= new Date(data.pilotStartDate);\r\n     }\r\n-  \r\n-    if (frcDate < pilotStartDate) {\r\n-      ctx.addIssue({\r\n-        code: 'custom',\r\n-        path: ['frcDate'],\r\n-        message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n-      });\r\n+    return true;\r\n+  }, {\r\n+    message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n+    path: [\"pilotEndDate\"],\r\n+  }).refine((data) => {\r\n+    if (data.pilotStartDate && data.frcDate) {\r\n+      return new Date(data.frcDate) >= new Date(data.pilotStartDate);\r\n     }\r\n+    return true;\r\n+  }, {\r\n+    message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n+    path: [\"frcDate\"],\r\n   });\r\n   \r\n   \r\n   \r\n"
                },
                {
                    "date": 1727420771623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,31 +12,38 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.string().optional(),\r\n-    pilotEndDate: z.string().optional(),\r\n-    frcDate: z.string().optional(),\r\n-  }).refine((data) => {\r\n-    if (data.pilotStartDate && data.pilotEndDate) {\r\n-      return new Date(data.pilotEndDate) >= new Date(data.pilotStartDate);\r\n+    pilotStartDate: z.date({\r\n+      required_error: \"Pilot Start Date is required\",\r\n+    }),\r\n+    pilotEndDate: z.date({\r\n+      required_error: \"Pilot End Date is required\",\r\n+    }),\r\n+    frcDate: z.date({\r\n+      required_error: \"FRC Date is required\",\r\n+    }),\r\n+  }).superRefine((data, ctx) => {\r\n+    if (data.pilotEndDate < data.pilotStartDate) {\r\n+      ctx.addIssue({\r\n+        code: 'custom',\r\n+        path: ['pilotEndDate'],\r\n+        message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n+      });\r\n     }\r\n-    return true;\r\n-  }, {\r\n-    message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n-    path: [\"pilotEndDate\"],\r\n-  }).refine((data) => {\r\n-    if (data.pilotStartDate && data.frcDate) {\r\n-      return new Date(data.frcDate) >= new Date(data.pilotStartDate);\r\n+  \r\n+    if (data.frcDate < data.pilotStartDate) {\r\n+      ctx.addIssue({\r\n+        code: 'custom',\r\n+        path: ['frcDate'],\r\n+        message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n+      });\r\n     }\r\n-    return true;\r\n-  }, {\r\n-    message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n-    path: [\"frcDate\"],\r\n   });\r\n   \r\n   \r\n   \r\n+  \r\n   export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n \r\n export type Connection = {\r\n   title: ConnectionTypes\r\n"
                },
                {
                    "date": 1727421114206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,38 +13,41 @@\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n     pilotStartDate: z.date({\r\n-      required_error: \"Pilot Start Date is required\",\r\n+      required_error: 'Pilot Start Date is required',\r\n     }),\r\n     pilotEndDate: z.date({\r\n-      required_error: \"Pilot End Date is required\",\r\n+      required_error: 'Pilot End Date is required',\r\n     }),\r\n     frcDate: z.date({\r\n-      required_error: \"FRC Date is required\",\r\n+      required_error: 'FRC Date is required',\r\n     }),\r\n   }).superRefine((data, ctx) => {\r\n-    if (data.pilotEndDate < data.pilotStartDate) {\r\n+    const pilotStartDate = new Date(data.pilotStartDate);\r\n+    const pilotEndDate = new Date(data.pilotEndDate);\r\n+    const frcDate = new Date(data.frcDate);\r\n+  \r\n+    if (pilotEndDate < pilotStartDate) {\r\n       ctx.addIssue({\r\n         code: 'custom',\r\n         path: ['pilotEndDate'],\r\n-        message: \"Pilot End Date must not be earlier than Pilot Start Date\",\r\n+        message: 'Pilot End Date must not be earlier than Pilot Start Date',\r\n       });\r\n     }\r\n   \r\n-    if (data.frcDate < data.pilotStartDate) {\r\n+    if (frcDate < pilotStartDate) {\r\n       ctx.addIssue({\r\n         code: 'custom',\r\n         path: ['frcDate'],\r\n-        message: \"FRC Date must not be earlier than Pilot Start Date\",\r\n+        message: 'FRC Date must not be earlier than Pilot Start Date',\r\n       });\r\n     }\r\n   });\r\n   \r\n+    \r\n   \r\n-  \r\n-  \r\n-  export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n+export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n \r\n export type Connection = {\r\n   title: ConnectionTypes\r\n   description: string\r\n"
                },
                {
                    "date": 1727522321271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,40 +12,14 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.date({\r\n-      required_error: 'Pilot Start Date is required',\r\n-    }),\r\n-    pilotEndDate: z.date({\r\n-      required_error: 'Pilot End Date is required',\r\n-    }),\r\n-    frcDate: z.date({\r\n-      required_error: 'FRC Date is required',\r\n-    }),\r\n-  }).superRefine((data, ctx) => {\r\n-    const pilotStartDate = new Date(data.pilotStartDate);\r\n-    const pilotEndDate = new Date(data.pilotEndDate);\r\n-    const frcDate = new Date(data.frcDate);\r\n-  \r\n-    if (pilotEndDate < pilotStartDate) {\r\n-      ctx.addIssue({\r\n-        code: 'custom',\r\n-        path: ['pilotEndDate'],\r\n-        message: 'Pilot End Date must not be earlier than Pilot Start Date',\r\n-      });\r\n-    }\r\n-  \r\n-    if (frcDate < pilotStartDate) {\r\n-      ctx.addIssue({\r\n-        code: 'custom',\r\n-        path: ['frcDate'],\r\n-        message: 'FRC Date must not be earlier than Pilot Start Date',\r\n-      });\r\n-    }\r\n+    pilotStartDate: z.date().nullable().refine(val => val !== null, 'Pilot Start Date is required'),  \r\n+    pilotEndDate: z.date().nullable().refine(val => val !== null, 'Pilot End Date is required'),\r\n+    frcDate: z.date().nullable().refine(val => val !== null, 'FRC Date is required'),\r\n   });\r\n   \r\n-    \r\n+ \r\n   \r\n export type ConnectionTypes = 'Google Drive' | 'Notion' | 'Slack' | 'Discord'\r\n \r\n export type Connection = {\r\n"
                },
                {
                    "date": 1727532025529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.date().nullable().refine(val => val !== null, 'Pilot Start Date is required'),  \r\n-    pilotEndDate: z.date().nullable().refine(val => val !== null, 'Pilot End Date is required'),\r\n-    frcDate: z.date().nullable().refine(val => val !== null, 'FRC Date is required'),\r\n+    pilotStartDate: z.date().nullable().refine((val) => val !== null, 'Pilot Start Date is required'),\r\n+    pilotEndDate: z.date().nullable().refine((val) => val !== null, 'Pilot End Date is required'),\r\n+    frcDate: z.date().nullable().refine((val) => val !== null, 'FRC Date is required'),\r\n   });\r\n   \r\n  \r\n   \r\n"
                },
                {
                    "date": 1727574479240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n \r\n   export const WorkflowFormSchema = z.object({\r\n     name: z.string().min(1, 'Required'),\r\n     description: z.string().min(1, 'Required'),\r\n-    pilotStartDate: z.date().nullable().refine((val) => val !== null, 'Pilot Start Date is required'),\r\n-    pilotEndDate: z.date().nullable().refine((val) => val !== null, 'Pilot End Date is required'),\r\n-    frcDate: z.date().nullable().refine((val) => val !== null, 'FRC Date is required'),\r\n+    pilotStartDate: z.date().refine((val) => val !== null, 'Pilot Start Date is required'),\r\n+    pilotEndDate: z.date().refine((val) => val !== null, 'Pilot End Date is required'),\r\n+    frcDate: z.date().refine((val) => val !== null, 'FRC Date is required'),\r\n   });\r\n   \r\n  \r\n   \r\n"
                },
                {
                    "date": 1728216815863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,5 +30,73 @@\n   accessTokenKey?: string\r\n   alwaysTrue?: boolean\r\n   slackSpecial?: boolean\r\n   // siteURL?: string\r\n+}\r\n+\r\n+export type EditorCanvasTypes =\r\n+  | 'Email'\r\n+  | 'Condition'\r\n+  | 'AI'\r\n+  | 'Slack'\r\n+  | 'Google Drive'\r\n+  | 'Notion'\r\n+  | 'Custom Webhook'\r\n+  | 'Google Calendar'\r\n+  | 'Trigger'\r\n+  | 'Action'\r\n+  | 'Wait'\r\n+\r\n+export type EditorCanvasCardType = {\r\n+  title: string\r\n+  description: string\r\n+  completed: boolean\r\n+  current: boolean\r\n+  metadata: any\r\n+  type: EditorCanvasTypes\r\n+}\r\n+\r\n+export type EditorNodeType = {\r\n+  id: string\r\n+  type: EditorCanvasCardType['type']\r\n+  position: {\r\n+    x: number\r\n+    y: number\r\n+  }\r\n+  data: EditorCanvasCardType\r\n+}\r\n+\r\n+export type EditorNode = EditorNodeType\r\n+\r\n+export type EditorActions =\r\n+  | {\r\n+      type: 'LOAD_DATA'\r\n+      payload: {\r\n+        elements: EditorNode[]\r\n+        edges: {\r\n+          id: string\r\n+          source: string\r\n+          target: string\r\n+        }[]\r\n+      }\r\n+    }\r\n+  | {\r\n+      type: 'UPDATE_NODE'\r\n+      payload: {\r\n+        elements: EditorNode[]\r\n+      }\r\n+    }\r\n+  | { type: 'REDO' }\r\n+  | { type: 'UNDO' }\r\n+  | {\r\n+      type: 'SELECTED_ELEMENT'\r\n+      payload: {\r\n+        element: EditorNode\r\n+      }\r\n+    }\r\n+\r\n+export const nodeMapper: Record<string, string> = {\r\n+  Notion: 'notionNode',\r\n+  Slack: 'slackNode',\r\n+  Discord: 'discordNode',\r\n+  'Google Drive': 'googleNode',\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1716719422992,
            "name": "Commit-0",
            "content": "import { z } from 'zod'\r\n\r\nexport const EditUserProfileSchema = z.object({\r\n    email: z.string().email('Required'),\r\n    name: z.string().min(1, 'Required'),\r\n  })"
        }
    ]
}