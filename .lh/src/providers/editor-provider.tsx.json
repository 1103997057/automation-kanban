{
    "sourceFile": "src/providers/editor-provider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1728216815774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741956862028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client'\r\n \r\n-import { EditorActions, EditorNodeType, } from '@/lib/type'\r\n+import { EditorActions, EditorNodeType, } from '@/lib/types'\r\n import {\r\n   Dispatch,\r\n   createContext,\r\n   useContext,\r\n"
                }
            ],
            "date": 1728216815774,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport { EditorActions, EditorNodeType, } from '@/lib/type'\r\nimport {\r\n  Dispatch,\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useReducer,\r\n} from 'react'\r\n\r\nexport type EditorNode = EditorNodeType\r\n\r\nexport type Editor = {\r\n  elements: EditorNode[]\r\n  edges: {\r\n    id: string\r\n    source: string\r\n    target: string\r\n  }[]\r\n  selectedNode: EditorNodeType\r\n}\r\n\r\nexport type HistoryState = {\r\n  history: Editor[]\r\n  currentIndex: number\r\n}\r\n\r\nexport type EditorState = {\r\n  editor: Editor\r\n  history: HistoryState\r\n}\r\n\r\nconst initialEditorState: EditorState['editor'] = {\r\n  elements: [],\r\n  selectedNode: {\r\n    data: {\r\n      completed: false,\r\n      current: false,\r\n      description: '',\r\n      metadata: {},\r\n      title: '',\r\n      type: 'Trigger',\r\n    },\r\n    id: '',\r\n    position: { x: 0, y: 0 },\r\n    type: 'Trigger',\r\n  },\r\n  edges: [],\r\n}\r\n\r\nconst initialHistoryState: HistoryState = {\r\n  history: [initialEditorState],\r\n  currentIndex: 0,\r\n}\r\n\r\nconst initialState: EditorState = {\r\n  editor: initialEditorState,\r\n  history: initialHistoryState,\r\n}\r\n\r\nconst editorReducer = (\r\n  state: EditorState = initialState,\r\n  action: EditorActions\r\n): EditorState => {\r\n  switch (action.type) {\r\n    case 'REDO':\r\n      if (state.history.currentIndex < state.history.history.length - 1) {\r\n        const nextIndex = state.history.currentIndex + 1\r\n        const nextEditorState = { ...state.history.history[nextIndex] }\r\n        const redoState = {\r\n          ...state,\r\n          editor: nextEditorState,\r\n          history: {\r\n            ...state.history,\r\n            currentIndex: nextIndex,\r\n          },\r\n        }\r\n        return redoState\r\n      }\r\n      return state\r\n\r\n    case 'UNDO':\r\n      if (state.history.currentIndex > 0) {\r\n        const prevIndex = state.history.currentIndex - 1\r\n        const prevEditorState = { ...state.history.history[prevIndex] }\r\n        const undoState = {\r\n          ...state,\r\n          editor: prevEditorState,\r\n          history: {\r\n            ...state.history,\r\n            currentIndex: prevIndex,\r\n          },\r\n        }\r\n        return undoState\r\n      }\r\n      return state\r\n\r\n    case 'LOAD_DATA':\r\n      return {\r\n        ...state,\r\n        editor: {\r\n          ...state.editor,\r\n          elements: action.payload.elements || initialEditorState.elements,\r\n          edges: action.payload.edges,\r\n        },\r\n      }\r\n    case 'SELECTED_ELEMENT':\r\n      return {\r\n        ...state,\r\n        editor: {\r\n          ...state.editor,\r\n          selectedNode: action.payload.element,\r\n        },\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport type EditorContextData = {\r\n  previewMode: boolean\r\n  setPreviewMode: (previewMode: boolean) => void\r\n}\r\n\r\nexport const EditorContext = createContext<{\r\n  state: EditorState\r\n  dispatch: Dispatch<EditorActions>\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => undefined,\r\n})\r\n\r\ntype EditorProps = {\r\n  children: React.ReactNode\r\n}\r\n\r\nconst EditorProvider = (props: EditorProps) => {\r\n  const [state, dispatch] = useReducer(editorReducer, initialState)\r\n\r\n  return (\r\n    <EditorContext.Provider\r\n      value={{\r\n        state,\r\n        dispatch,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </EditorContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useEditor = () => {\r\n  const context = useContext(EditorContext)\r\n  if (!context) {\r\n    throw new Error('useEditor Hook must be used within the editor Provider')\r\n  }\r\n  return context\r\n}\r\n\r\nexport default EditorProvider"
        }
    ]
}