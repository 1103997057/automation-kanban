{
    "sourceFile": "src/providers/modal-provider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1726975806875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727591765461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,53 @@\n-'use client'\r\n-import { createContext, useContext, useEffect, useState } from 'react'\r\n+'use client';\r\n \r\n+import { createContext, useContext, useEffect, useState } from 'react';\r\n+\r\n interface ModalProviderProps {\r\n-  children: React.ReactNode\r\n+  children: React.ReactNode;\r\n }\r\n \r\n-export type ModalData = {}\r\n+export type ModalData = {};\r\n \r\n type ModalContextType = {\r\n-  data: ModalData\r\n-  isOpen: boolean\r\n-  setOpen: (modal: React.ReactNode, fetchData?: () => Promise<any>) => void\r\n-  setClose: () => void\r\n-}\r\n+  isOpen: boolean;\r\n+  setOpen: (modal: React.ReactNode) => void;\r\n+  setClose: () => void;\r\n+};\r\n \r\n export const ModalContext = createContext<ModalContextType>({\r\n-  data: {},\r\n   isOpen: false,\r\n-  setOpen: (modal: React.ReactNode, fetchData?: () => Promise<any>) => {},\r\n+  setOpen: () => {},\r\n   setClose: () => {},\r\n-})\r\n+});\r\n \r\n const ModalProvider: React.FC<ModalProviderProps> = ({ children }) => {\r\n-  const [isOpen, setIsOpen] = useState(false)\r\n-  const [data, setData] = useState<ModalData>({})\r\n-  const [showingModal, setShowingModal] = useState<React.ReactNode>(null)\r\n-  const [isMounted, setIsMounted] = useState(false)\r\n+  const [isOpen, setIsOpen] = useState(false);\r\n+  const [showingModal, setShowingModal] = useState<React.ReactNode>(null);\r\n \r\n-  useEffect(() => {\r\n-    setIsMounted(true)\r\n-  }, [])\r\n+  const setOpen = (modal: React.ReactNode) => {\r\n+    setShowingModal(modal);\r\n+    setIsOpen(true);\r\n+  };\r\n \r\n-  const setOpen = async (\r\n-    modal: React.ReactNode,\r\n-    fetchData?: () => Promise<any>\r\n-  ) => {\r\n-    if (modal) {\r\n-      if (fetchData) {\r\n-        setData({ ...data, ...(await fetchData()) } || {})\r\n-      }\r\n-      setShowingModal(modal)\r\n-      setIsOpen(true)\r\n-    }\r\n-  }\r\n-\r\n   const setClose = () => {\r\n-    setIsOpen(false)\r\n-    setData({})\r\n-  }\r\n+    setIsOpen(false);\r\n+    setShowingModal(null);\r\n+  };\r\n\\ No newline at end of file\n \r\n-  if (!isMounted) return null\r\n-\r\n   return (\r\n-    <ModalContext.Provider value={{ data, setOpen, setClose, isOpen }}>\r\n+    <ModalContext.Provider value={{ isOpen, setOpen, setClose }}>\r\n       {children}\r\n       {showingModal}\r\n     </ModalContext.Provider>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n export const useModal = () => {\r\n-  const context = useContext(ModalContext)\r\n+  const context = useContext(ModalContext);\r\n   if (!context) {\r\n-    throw new Error('useModal must be used within the modal provider')\r\n+    throw new Error('useModal must be used within a ModalProvider');\r\n   }\r\n-  return context\r\n-}\r\n+  return context;\r\n+};\r\n \r\n-export default ModalProvider\n+export default ModalProvider;\r\n"
                },
                {
                    "date": 1727591836919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,70 @@\n-'use client';\r\n+'use client'\r\n+import { createContext, useContext, useEffect, useState } from 'react'\r\n \r\n-import { createContext, useContext, useEffect, useState } from 'react';\r\n-\r\n interface ModalProviderProps {\r\n-  children: React.ReactNode;\r\n+  children: React.ReactNode\r\n }\r\n \r\n-export type ModalData = {};\r\n+export type ModalData = {}\r\n \r\n type ModalContextType = {\r\n-  isOpen: boolean;\r\n-  setOpen: (modal: React.ReactNode) => void;\r\n-  setClose: () => void;\r\n-};\r\n+  data: ModalData\r\n+  isOpen: boolean\r\n+  setOpen: (modal: React.ReactNode, fetchData?: () => Promise<any>) => void\r\n+  setClose: () => void\r\n+}\r\n \r\n export const ModalContext = createContext<ModalContextType>({\r\n+  data: {},\r\n   isOpen: false,\r\n-  setOpen: () => {},\r\n+  setOpen: (modal: React.ReactNode, fetchData?: () => Promise<any>) => {},\r\n   setClose: () => {},\r\n-});\r\n+})\r\n \r\n const ModalProvider: React.FC<ModalProviderProps> = ({ children }) => {\r\n-  const [isOpen, setIsOpen] = useState(false);\r\n-  const [showingModal, setShowingModal] = useState<React.ReactNode>(null);\r\n+  const [isOpen, setIsOpen] = useState(false)\r\n+  const [data, setData] = useState<ModalData>({})\r\n+  const [showingModal, setShowingModal] = useState<React.ReactNode>(null)\r\n+  const [isMounted, setIsMounted] = useState(false)\r\n \r\n-  const setOpen = (modal: React.ReactNode) => {\r\n-    setShowingModal(modal);\r\n-    setIsOpen(true);\r\n-  };\r\n+  useEffect(() => {\r\n+    setIsMounted(true)\r\n+  }, [])\r\n \r\n+  const setOpen = async (\r\n+    modal: React.ReactNode,\r\n+    fetchData?: () => Promise<any>\r\n\\ No newline at end of file\n+  ) => {\r\n+    if (modal) {\r\n+      if (fetchData) {\r\n+        setData({ ...data, ...(await fetchData()) } || {})\r\n+      }\r\n+      setShowingModal(modal)\r\n+      setIsOpen(true)\r\n+    }\r\n+  }\r\n+\r\n   const setClose = () => {\r\n-    setIsOpen(false);\r\n-    setShowingModal(null);\r\n-  };\r\n+    setIsOpen(false)\r\n+    setData({})\r\n+  }\r\n \r\n+  if (!isMounted) return null\r\n+\r\n   return (\r\n-    <ModalContext.Provider value={{ isOpen, setOpen, setClose }}>\r\n+    <ModalContext.Provider value={{ data, setOpen, setClose, isOpen }}>\r\n       {children}\r\n       {showingModal}\r\n     </ModalContext.Provider>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n export const useModal = () => {\r\n-  const context = useContext(ModalContext);\r\n+  const context = useContext(ModalContext)\r\n   if (!context) {\r\n-    throw new Error('useModal must be used within a ModalProvider');\r\n+    throw new Error('useModal must be used within the modal provider')\r\n   }\r\n-  return context;\r\n-};\r\n+  return context\r\n+}\r\n \r\n-export default ModalProvider;\n+export default ModalProvider\n\\ No newline at end of file\n"
                }
            ],
            "date": 1726975806875,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { createContext, useContext, useEffect, useState } from 'react'\r\n\r\ninterface ModalProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport type ModalData = {}\r\n\r\ntype ModalContextType = {\r\n  data: ModalData\r\n  isOpen: boolean\r\n  setOpen: (modal: React.ReactNode, fetchData?: () => Promise<any>) => void\r\n  setClose: () => void\r\n}\r\n\r\nexport const ModalContext = createContext<ModalContextType>({\r\n  data: {},\r\n  isOpen: false,\r\n  setOpen: (modal: React.ReactNode, fetchData?: () => Promise<any>) => {},\r\n  setClose: () => {},\r\n})\r\n\r\nconst ModalProvider: React.FC<ModalProviderProps> = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [data, setData] = useState<ModalData>({})\r\n  const [showingModal, setShowingModal] = useState<React.ReactNode>(null)\r\n  const [isMounted, setIsMounted] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setIsMounted(true)\r\n  }, [])\r\n\r\n  const setOpen = async (\r\n    modal: React.ReactNode,\r\n    fetchData?: () => Promise<any>\r\n  ) => {\r\n    if (modal) {\r\n      if (fetchData) {\r\n        setData({ ...data, ...(await fetchData()) } || {})\r\n      }\r\n      setShowingModal(modal)\r\n      setIsOpen(true)\r\n    }\r\n  }\r\n\r\n  const setClose = () => {\r\n    setIsOpen(false)\r\n    setData({})\r\n  }\r\n\r\n  if (!isMounted) return null\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ data, setOpen, setClose, isOpen }}>\r\n      {children}\r\n      {showingModal}\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useModal = () => {\r\n  const context = useContext(ModalContext)\r\n  if (!context) {\r\n    throw new Error('useModal must be used within the modal provider')\r\n  }\r\n  return context\r\n}\r\n\r\nexport default ModalProvider"
        }
    ]
}