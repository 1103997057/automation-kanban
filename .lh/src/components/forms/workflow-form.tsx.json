{
    "sourceFile": "src/components/forms/workflow-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1727003985932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727417087395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +1,58 @@\n-import { WorkflowFormSchema } from '@/lib/type'\r\n-import { zodResolver } from '@hookform/resolvers/zod'\r\n-import { useRouter } from 'next/navigation'\r\n-import React from 'react'\r\n-import { useForm } from 'react-hook-form'\r\n-import { z } from 'zod'\r\n+import { WorkflowFormSchema } from '@/lib/type';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n+import React from 'react';\r\n+import { useForm } from 'react-hook-form';\r\n+import { z } from 'zod';\r\n+import { format } from 'date-fns';\r\n+import { CalendarIcon } from 'lucide-react';\r\n+import { Button } from '../ui/button';\r\n+import { Loader2 } from 'lucide-react'\r\n+import { Calendar } from '../ui/calendar';\r\n import {\r\n   Card,\r\n   CardContent,\r\n   CardDescription,\r\n   CardHeader,\r\n   CardTitle,\r\n-} from '../ui/card'\r\n+} from '../ui/card';\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n-} from '../ui/form'\r\n-import { Input } from '../ui/input'\r\n-import { Button } from '../ui/button'\r\n-import { Loader2 } from 'lucide-react'\r\n-// import { toast } from 'sonner'\r\n-// import { onCreateWorkflow } from '@/app/(main)/(pages)/workflows/_actions/workflow-connections'\r\n-import { useModal } from '@/providers/modal-provider'\r\n+} from '../ui/form';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n+import { Input } from '../ui/input';\r\n+import { useModal } from '@/providers/modal-provider';\r\n \r\n type Props = {\r\n-  title?: string\r\n-  subTitle?: string\r\n-}\r\n+  title?: string;\r\n+  subTitle?: string;\r\n+};\r\n \r\n-const Workflowform = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal()\r\n+const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n+      pilotStartDate: undefined,\r\n+      pilotEndDate: undefined,\r\n+      frcDate: undefined,\r\n     },\r\n-  })\r\n+  });\r\n \r\n-  const isLoading = form.formState.isLoading\r\n-  const router = useRouter()\r\n+  const isLoading = form.formState.isLoading;\r\n+  const router = useRouter();\r\n \r\n-  // const handleSubmit = async (values: z.infer<typeof WorkflowFormSchema>) => {\r\n-  //   const workflow = await onCreateWorkflow(values.name, values.description)\r\n-  //   if (workflow) {\r\n-  //     toast.message(workflow.message)\r\n-  //     router.refresh()\r\n-  //   }\r\n-  //   setClose()\r\n-  // }\r\n-  const handleSubmit = () => {}\r\n+  const handleSubmit = () => {};\r\n \r\n-\r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n         <CardHeader>\r\n@@ -69,47 +65,129 @@\n           <form\r\n             onSubmit={form.handleSubmit(handleSubmit)}\r\n             className=\"flex flex-col gap-4 text-left\"\r\n           >\r\n+            {/* Name */}\r\n             <FormField\r\n-              disabled={isLoading}\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n                 <FormItem>\r\n-                  <FormLabel>Name</FormLabel>\r\n+                  <FormLabel>Project Name</FormLabel>\r\n                   <FormControl>\r\n-                    <Input\r\n-                      {...field}\r\n-                      placeholder=\"Name\"\r\n-                    />\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n                   </FormControl>\r\n                   <FormMessage />\r\n                 </FormItem>\r\n               )}\r\n             />\r\n+\r\n+            {/* Description */}\r\n             <FormField\r\n-              disabled={isLoading}\r\n               control={form.control}\r\n               name=\"description\"\r\n               render={({ field }) => (\r\n                 <FormItem>\r\n                   <FormLabel>Description</FormLabel>\r\n                   <FormControl>\r\n-                    <Input\r\n-                      placeholder=\"Description\"\r\n-                      {...field}\r\n-                    />\r\n+                    <Input {...field} placeholder=\"Description\" />\r\n                   </FormControl>\r\n                   <FormMessage />\r\n                 </FormItem>\r\n               )}\r\n             />\r\n-            <Button\r\n-              className=\"mt-4\"\r\n-              disabled={isLoading}\r\n-              type=\"submit\"\r\n-            >\r\n+\r\n+            {/* Pilot Start Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value}\r\n+                        onSelect={field.onChange}\r\n+                        disabled={(date) => date > new Date()}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value}\r\n+                        onSelect={field.onChange}\r\n+                        disabled={(date) => date > new Date()}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value}\r\n+                        onSelect={field.onChange}\r\n+                        disabled={(date) => date > new Date()}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n                 </>\r\n@@ -120,8 +198,8 @@\n           </form>\r\n         </Form>\r\n       </CardContent>\r\n     </Card>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n\\ No newline at end of file\n \r\n-export default Workflowform\n+export default WorkflowForm;\r\n"
                },
                {
                    "date": 1727419406094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,10 @@\n                     </PopoverTrigger>\r\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={field.onChange}\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n                         disabled={(date) => date > new Date()}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n@@ -144,10 +144,10 @@\n                     </PopoverTrigger>\r\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={field.onChange}\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n                         disabled={(date) => date > new Date()}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n@@ -174,10 +174,10 @@\n                     </PopoverTrigger>\r\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={field.onChange}\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n                         disabled={(date) => date > new Date()}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n@@ -201,5 +201,5 @@\n     </Card>\r\n   );\r\n };\r\n \r\n-export default WorkflowForm;\n\\ No newline at end of file\n+export default WorkflowForm;\r\n"
                },
                {
                    "date": 1727419817223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,97 +95,94 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Pilot Start Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n-                        disabled={(date) => date > new Date()}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+{/* Pilot Start Date */}\r\n+<FormField\r\n+  control={form.control}\r\n+  name=\"pilotStartDate\"\r\n+  render={({ field }) => (\r\n+    <FormItem>\r\n+      <FormLabel>Pilot Start Date</FormLabel>\r\n+      <Popover>\r\n+        <PopoverTrigger asChild>\r\n+          <FormControl>\r\n+            <Button variant=\"outline\" className=\"w-full\">\r\n+              {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+            </Button>\r\n+          </FormControl>\r\n+        </PopoverTrigger>\r\n+        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+          <Calendar\r\n+            mode=\"single\"\r\n+            selected={field.value ? new Date(field.value) : undefined}\r\n+            onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+          />\r\n+        </PopoverContent>\r\n+      </Popover>\r\n+      <FormMessage />\r\n+    </FormItem>\r\n+  )}\r\n+/>\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n-                        disabled={(date) => date > new Date()}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+{/* Pilot End Date */}\r\n+<FormField\r\n+  control={form.control}\r\n+  name=\"pilotEndDate\"\r\n+  render={({ field }) => (\r\n+    <FormItem>\r\n+      <FormLabel>Pilot End Date</FormLabel>\r\n+      <Popover>\r\n+        <PopoverTrigger asChild>\r\n+          <FormControl>\r\n+            <Button variant=\"outline\" className=\"w-full\">\r\n+              {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+            </Button>\r\n+          </FormControl>\r\n+        </PopoverTrigger>\r\n+        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+          <Calendar\r\n+            mode=\"single\"\r\n+            selected={field.value ? new Date(field.value) : undefined}\r\n+            onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+          />\r\n+        </PopoverContent>\r\n+      </Popover>\r\n+      <FormMessage />\r\n+    </FormItem>\r\n+  )}\r\n+/>\r\n \r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n-                        disabled={(date) => date > new Date()}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+{/* FRC Date */}\r\n+<FormField\r\n+  control={form.control}\r\n+  name=\"frcDate\"\r\n+  render={({ field }) => (\r\n+    <FormItem>\r\n+      <FormLabel>FRC Date</FormLabel>\r\n+      <Popover>\r\n+        <PopoverTrigger asChild>\r\n+          <FormControl>\r\n+            <Button variant=\"outline\" className=\"w-full\">\r\n+              {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+            </Button>\r\n+          </FormControl>\r\n+        </PopoverTrigger>\r\n+        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+          <Calendar\r\n+            mode=\"single\"\r\n+            selected={field.value ? new Date(field.value) : undefined}\r\n+            onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+          />\r\n+        </PopoverContent>\r\n+      </Popover>\r\n+      <FormMessage />\r\n+    </FormItem>\r\n+  )}\r\n+/>\r\n \r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n"
                },
                {
                    "date": 1727420771614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { z } from 'zod';\r\n import { format } from 'date-fns';\r\n import { CalendarIcon } from 'lucide-react';\r\n import { Button } from '../ui/button';\r\n-import { Loader2 } from 'lucide-react'\r\n+import { Loader2 } from 'lucide-react';\r\n import { Calendar } from '../ui/calendar';\r\n import {\r\n   Card,\r\n   CardContent,\r\n@@ -46,12 +46,14 @@\n       frcDate: undefined,\r\n     },\r\n   });\r\n \r\n-  const isLoading = form.formState.isLoading;\r\n+  const isLoading = form.formState.isSubmitting;\r\n   const router = useRouter();\r\n \r\n-  const handleSubmit = () => {};\r\n+  const handleSubmit = () => {\r\n+    // Handle submit logic here\r\n+  };\r\n \r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n@@ -95,94 +97,94 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-{/* Pilot Start Date */}\r\n-<FormField\r\n-  control={form.control}\r\n-  name=\"pilotStartDate\"\r\n-  render={({ field }) => (\r\n-    <FormItem>\r\n-      <FormLabel>Pilot Start Date</FormLabel>\r\n-      <Popover>\r\n-        <PopoverTrigger asChild>\r\n-          <FormControl>\r\n-            <Button variant=\"outline\" className=\"w-full\">\r\n-              {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-            </Button>\r\n-          </FormControl>\r\n-        </PopoverTrigger>\r\n-        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-          <Calendar\r\n-            mode=\"single\"\r\n-            selected={field.value ? new Date(field.value) : undefined}\r\n-            onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n-          />\r\n-        </PopoverContent>\r\n-      </Popover>\r\n-      <FormMessage />\r\n-    </FormItem>\r\n-  )}\r\n-/>\r\n+            {/* Pilot Start Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-{/* Pilot End Date */}\r\n-<FormField\r\n-  control={form.control}\r\n-  name=\"pilotEndDate\"\r\n-  render={({ field }) => (\r\n-    <FormItem>\r\n-      <FormLabel>Pilot End Date</FormLabel>\r\n-      <Popover>\r\n-        <PopoverTrigger asChild>\r\n-          <FormControl>\r\n-            <Button variant=\"outline\" className=\"w-full\">\r\n-              {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-            </Button>\r\n-          </FormControl>\r\n-        </PopoverTrigger>\r\n-        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-          <Calendar\r\n-            mode=\"single\"\r\n-            selected={field.value ? new Date(field.value) : undefined}\r\n-            onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n-          />\r\n-        </PopoverContent>\r\n-      </Popover>\r\n-      <FormMessage />\r\n-    </FormItem>\r\n-  )}\r\n-/>\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-{/* FRC Date */}\r\n-<FormField\r\n-  control={form.control}\r\n-  name=\"frcDate\"\r\n-  render={({ field }) => (\r\n-    <FormItem>\r\n-      <FormLabel>FRC Date</FormLabel>\r\n-      <Popover>\r\n-        <PopoverTrigger asChild>\r\n-          <FormControl>\r\n-            <Button variant=\"outline\" className=\"w-full\">\r\n-              {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-            </Button>\r\n-          </FormControl>\r\n-        </PopoverTrigger>\r\n-        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-          <Calendar\r\n-            mode=\"single\"\r\n-            selected={field.value ? new Date(field.value) : undefined}\r\n-            onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n-          />\r\n-        </PopoverContent>\r\n-      </Popover>\r\n-      <FormMessage />\r\n-    </FormItem>\r\n-  )}\r\n-/>\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n"
                },
                {
                    "date": 1727421114199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,11 @@\n \r\n   const isLoading = form.formState.isSubmitting;\r\n   const router = useRouter();\r\n \r\n-  const handleSubmit = () => {\r\n-    // Handle submit logic here\r\n+  const handleSubmit = (data: any) => {\r\n+    console.log('Form data:', data);\r\n+    // Submit logic here\r\n   };\r\n \r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n@@ -117,9 +118,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : undefined)}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n                   <FormMessage />\r\n@@ -146,9 +147,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : undefined)}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n                   <FormMessage />\r\n@@ -175,9 +176,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date.toISOString() : undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : undefined)}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n                   <FormMessage />\r\n"
                },
                {
                    "date": 1727516883568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,11 +40,11 @@\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n-      pilotStartDate: undefined,\r\n-      pilotEndDate: undefined,\r\n-      frcDate: undefined,\r\n+      pilotStartDate: null as Date | null,\r\n+      pilotEndDate: null as Date | null,\r\n+      frcDate: null as Date | null,\r\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n@@ -118,9 +118,10 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : null)}\r\n+                        captionLayout=\"dropdown-buttons\"fromYear={2023} toYear={2026}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n                   <FormMessage />\r\n@@ -147,9 +148,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : null)}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n                   <FormMessage />\r\n@@ -176,9 +177,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : null)}\r\n                       />\r\n                     </PopoverContent>\r\n                   </Popover>\r\n                   <FormMessage />\r\n"
                },
                {
                    "date": 1727530796629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { WorkflowFormSchema } from '@/lib/type';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useRouter } from 'next/navigation';\r\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import { useForm } from 'react-hook-form';\r\n import { z } from 'zod';\r\n import { format } from 'date-fns';\r\n import { CalendarIcon } from 'lucide-react';\r\n@@ -27,180 +27,204 @@\n import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n import { Input } from '../ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n \r\n-type Props = {\r\n-  title?: string;\r\n-  subTitle?: string;\r\n-};\r\n+export function DatePickerDemo() {\r\n+  const [date, setDate] = useState<Date | undefined>(); // Use undefined instead of null\r\n \r\n-const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n-  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n-    resolver: zodResolver(WorkflowFormSchema),\r\n-    defaultValues: {\r\n-      name: '',\r\n-      description: '',\r\n-      pilotStartDate: null as Date | null,\r\n-      pilotEndDate: null as Date | null,\r\n-      frcDate: null as Date | null,\r\n-    },\r\n-  });\r\n+  type Props = {\r\n+    title?: string;\r\n+    subTitle?: string;\r\n+  };\r\n \r\n-  const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n+  const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+    const { setClose } = useModal();\r\n+    const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+      mode: 'onChange',\r\n+      resolver: zodResolver(WorkflowFormSchema),\r\n+      defaultValues: {\r\n+        name: '',\r\n+        description: '',\r\n+        pilotStartDate: undefined, // Set to undefined to match types\r\n+        pilotEndDate: undefined,\r\n+        frcDate: undefined,\r\n+      },\r\n+    });\r\n \r\n-  const handleSubmit = (data: any) => {\r\n-    console.log('Form data:', data);\r\n-    // Submit logic here\r\n-  };\r\n+    const isLoading = form.formState.isSubmitting;\r\n+    const router = useRouter();\r\n \r\n-  return (\r\n-    <Card className=\"w-full max-w-[650px] border-none\">\r\n-      {title && subTitle && (\r\n-        <CardHeader>\r\n-          <CardTitle>{title}</CardTitle>\r\n-          <CardDescription>{subTitle}</CardDescription>\r\n-        </CardHeader>\r\n-      )}\r\n-      <CardContent>\r\n-        <Form {...form}>\r\n-          <form\r\n-            onSubmit={form.handleSubmit(handleSubmit)}\r\n-            className=\"flex flex-col gap-4 text-left\"\r\n-          >\r\n-            {/* Name */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"name\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Project Name</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+    const handleSubmit = (data: any) => {\r\n+      console.log('Form data:', data);\r\n+      // Submit logic here\r\n+    };\r\n \r\n-            {/* Description */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"description\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Description</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Description\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+    return (\r\n+      <Card className=\"w-full max-w-[650px] border-none\">\r\n+        {title && subTitle && (\r\n+          <CardHeader>\r\n+            <CardTitle>{title}</CardTitle>\r\n+            <CardDescription>{subTitle}</CardDescription>\r\n+          </CardHeader>\r\n+        )}\r\n+        <CardContent>\r\n+          <Form {...form}>\r\n+            <form\r\n+              onSubmit={form.handleSubmit(handleSubmit)}\r\n+              className=\"flex flex-col gap-4 text-left\"\r\n+            >\r\n+              {/* Name */}\r\n+              <FormField\r\n+                control={form.control}\r\n+                name=\"name\"\r\n+                render={({ field }) => (\r\n+                  <FormItem>\r\n+                    <FormLabel>Project Name</FormLabel>\r\n+                    <FormControl>\r\n+                      <Input {...field} placeholder=\"Project Name\" />\r\n+                    </FormControl>\r\n+                    <FormMessage />\r\n+                  </FormItem>\r\n+                )}\r\n+              />\r\n \r\n-            {/* Pilot Start Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : null)}\r\n-                        captionLayout=\"dropdown-buttons\"fromYear={2023} toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+              {/* Description */}\r\n+              <FormField\r\n+                control={form.control}\r\n+                name=\"description\"\r\n+                render={({ field }) => (\r\n+                  <FormItem>\r\n+                    <FormLabel>Description</FormLabel>\r\n+                    <FormControl>\r\n+                      <Input {...field} placeholder=\"Description\" />\r\n+                    </FormControl>\r\n+                    <FormMessage />\r\n+                  </FormItem>\r\n+                )}\r\n+              />\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : null)}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+              {/* Pilot Start Date */}\r\n+              <FormField\r\n+                control={form.control}\r\n+                name=\"pilotStartDate\"\r\n+                render={({ field }) => (\r\n+                  <FormItem>\r\n+                    <FormLabel>Pilot Start Date</FormLabel>\r\n+                    <Popover>\r\n+                      <PopoverTrigger asChild>\r\n+                        <FormControl>\r\n+                          <Button variant=\"outline\" className=\"w-full\">\r\n+                            {field.value\r\n+                              ? format(new Date(field.value), 'PPP')\r\n+                              : 'Pick a date'}\r\n+                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                          </Button>\r\n+                        </FormControl>\r\n+                      </PopoverTrigger>\r\n+                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                        <Calendar\r\n+                          mode=\"single\"\r\n+                          selected={\r\n+                            field.value ? new Date(field.value) : undefined\r\n+                          }\r\n+                          onSelect={(date) => field.onChange(date || undefined)}\r\n+                          captionLayout=\"dropdown-buttons\"\r\n+                          fromYear={2023}\r\n+                          toYear={2026}\r\n+                        />\r\n+                      </PopoverContent>\r\n+                    </Popover>\r\n+                    <FormMessage />\r\n+                  </FormItem>\r\n+                )}\r\n+              />\r\n \r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : null)}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+              {/* Pilot End Date */}\r\n+              <FormField\r\n+                control={form.control}\r\n+                name=\"pilotEndDate\"\r\n+                render={({ field }) => (\r\n+                  <FormItem>\r\n+                    <FormLabel>Pilot End Date</FormLabel>\r\n+                    <Popover>\r\n+                      <PopoverTrigger asChild>\r\n+                        <FormControl>\r\n+                          <Button variant=\"outline\" className=\"w-full\">\r\n+                            {field.value\r\n+                              ? format(new Date(field.value), 'PPP')\r\n+                              : 'Pick a date'}\r\n+                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                          </Button>\r\n+                        </FormControl>\r\n+                      </PopoverTrigger>\r\n+                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                        <Calendar\r\n+                          mode=\"single\"\r\n+                          selected={\r\n+                            field.value ? new Date(field.value) : undefined\r\n+                          }\r\n+                          onSelect={(date) => field.onChange(date || undefined)}\r\n+                          captionLayout=\"dropdown-buttons\"\r\n+                          fromYear={2023}\r\n+                          toYear={2026}\r\n+                        />\r\n+                      </PopoverContent>\r\n+                    </Popover>\r\n+                    <FormMessage />\r\n+                  </FormItem>\r\n+                )}\r\n+              />\r\n \r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-              {isLoading ? (\r\n-                <>\r\n-                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                </>\r\n-              ) : (\r\n-                'Save Settings'\r\n-              )}\r\n-            </Button>\r\n-          </form>\r\n-        </Form>\r\n-      </CardContent>\r\n-    </Card>\r\n-  );\r\n-};\r\n+              {/* FRC Date */}\r\n+              <FormField\r\n+                control={form.control}\r\n+                name=\"frcDate\"\r\n+                render={({ field }) => (\r\n+                  <FormItem>\r\n+                    <FormLabel>FRC Date</FormLabel>\r\n+                    <Popover>\r\n+                      <PopoverTrigger asChild>\r\n+                        <FormControl>\r\n+                          <Button variant=\"outline\" className=\"w-full\">\r\n+                            {field.value\r\n+                              ? format(new Date(field.value), 'PPP')\r\n+                              : 'Pick a date'}\r\n+                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                          </Button>\r\n+                        </FormControl>\r\n+                      </PopoverTrigger>\r\n+                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                        <Calendar\r\n+                          mode=\"single\"\r\n+                          selected={\r\n+                            field.value ? new Date(field.value) : undefined\r\n+                          }\r\n+                          onSelect={(date) => field.onChange(date || undefined)}\r\n+                          captionLayout=\"dropdown-buttons\"\r\n+                          fromYear={2023}\r\n+                          toYear={2026}\r\n+                        />\r\n+                      </PopoverContent>\r\n+                    </Popover>\r\n+                    <FormMessage />\r\n+                  </FormItem>\r\n+                )}\r\n+              />\r\n \r\n-export default WorkflowForm;\r\n+              <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+                {isLoading ? (\r\n+                  <>\r\n+                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n+                  </>\r\n+                ) : (\r\n+                  'Save Settings'\r\n+                )}\r\n+              </Button>\r\n+            </form>\r\n+          </Form>\r\n+        </CardContent>\r\n+      </Card>\r\n+    );\r\n+  };\r\n+\r\n+  return <WorkflowForm />;\r\n+}\r\n"
                },
                {
                    "date": 1727530900768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+'use client'\r\n import { WorkflowFormSchema } from '@/lib/type';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useRouter } from 'next/navigation';\r\n import React, { useState } from 'react';\r\n"
                },
                {
                    "date": 1727532025526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,231 +1,202 @@\n-'use client'\r\n import { WorkflowFormSchema } from '@/lib/type';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useRouter } from 'next/navigation';\r\n import React, { useState } from 'react';\r\n import { useForm } from 'react-hook-form';\r\n import { z } from 'zod';\r\n import { format } from 'date-fns';\r\n-import { CalendarIcon } from 'lucide-react';\r\n+import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '../ui/button';\r\n-import { Loader2 } from 'lucide-react';\r\n import { Calendar } from '../ui/calendar';\r\n-import {\r\n-  Card,\r\n-  CardContent,\r\n-  CardDescription,\r\n-  CardHeader,\r\n-  CardTitle,\r\n-} from '../ui/card';\r\n-import {\r\n-  Form,\r\n-  FormControl,\r\n-  FormField,\r\n-  FormItem,\r\n-  FormLabel,\r\n-  FormMessage,\r\n-} from '../ui/form';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n import { Input } from '../ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n \r\n-export function DatePickerDemo() {\r\n-  const [date, setDate] = useState<Date | undefined>(); // Use undefined instead of null\r\n+function cn(...classes: string[]) {\r\n+  return classes.filter(Boolean).join(' ');\r\n+}\r\n \r\n-  type Props = {\r\n-    title?: string;\r\n-    subTitle?: string;\r\n-  };\r\n+type Props = {\r\n+  title?: string;\r\n+  subTitle?: string;\r\n+};\r\n \r\n-  const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-    const { setClose } = useModal();\r\n-    const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-      mode: 'onChange',\r\n-      resolver: zodResolver(WorkflowFormSchema),\r\n-      defaultValues: {\r\n-        name: '',\r\n-        description: '',\r\n-        pilotStartDate: undefined, // Set to undefined to match types\r\n-        pilotEndDate: undefined,\r\n-        frcDate: undefined,\r\n-      },\r\n-    });\r\n+const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n+  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n+    resolver: zodResolver(WorkflowFormSchema),\r\n+    // Default values are initialized with today's date using new Date()\r\n+    defaultValues: {\r\n+      name: '',\r\n+      description: '',\r\n+      pilotStartDate: new Date(),  // Default to today's date\r\n+      pilotEndDate: new Date(),    // Default to today's date\r\n+      frcDate: new Date(),         // Default to today's date\r\n+    },\r\n+  });\r\n \r\n-    const isLoading = form.formState.isSubmitting;\r\n-    const router = useRouter();\r\n+  const isLoading = form.formState.isSubmitting;\r\n+  const router = useRouter();\r\n \r\n-    const handleSubmit = (data: any) => {\r\n-      console.log('Form data:', data);\r\n-      // Submit logic here\r\n-    };\r\n+  const handleSubmit = (data: any) => {\r\n+    console.log('Form data:', data);\r\n+    // Submit logic here\r\n+  };\r\n \r\n-    return (\r\n-      <Card className=\"w-full max-w-[650px] border-none\">\r\n-        {title && subTitle && (\r\n-          <CardHeader>\r\n-            <CardTitle>{title}</CardTitle>\r\n-            <CardDescription>{subTitle}</CardDescription>\r\n-          </CardHeader>\r\n-        )}\r\n-        <CardContent>\r\n-          <Form {...form}>\r\n-            <form\r\n-              onSubmit={form.handleSubmit(handleSubmit)}\r\n-              className=\"flex flex-col gap-4 text-left\"\r\n-            >\r\n-              {/* Name */}\r\n-              <FormField\r\n-                control={form.control}\r\n-                name=\"name\"\r\n-                render={({ field }) => (\r\n-                  <FormItem>\r\n-                    <FormLabel>Project Name</FormLabel>\r\n-                    <FormControl>\r\n-                      <Input {...field} placeholder=\"Project Name\" />\r\n-                    </FormControl>\r\n-                    <FormMessage />\r\n-                  </FormItem>\r\n-                )}\r\n-              />\r\n+  return (\r\n+    <Card className=\"w-full max-w-[650px] border-none\">\r\n+      {title && subTitle && (\r\n+        <CardHeader>\r\n+          <CardTitle>{title}</CardTitle>\r\n+          <CardDescription>{subTitle}</CardDescription>\r\n+        </CardHeader>\r\n+      )}\r\n+      <CardContent>\r\n+        <Form {...form}>\r\n+          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+            {/* Name */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"name\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Project Name</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-              {/* Description */}\r\n-              <FormField\r\n-                control={form.control}\r\n-                name=\"description\"\r\n-                render={({ field }) => (\r\n-                  <FormItem>\r\n-                    <FormLabel>Description</FormLabel>\r\n-                    <FormControl>\r\n-                      <Input {...field} placeholder=\"Description\" />\r\n-                    </FormControl>\r\n-                    <FormMessage />\r\n-                  </FormItem>\r\n-                )}\r\n-              />\r\n+            {/* Description */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"description\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Description</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Description\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-              {/* Pilot Start Date */}\r\n-              <FormField\r\n-                control={form.control}\r\n-                name=\"pilotStartDate\"\r\n-                render={({ field }) => (\r\n-                  <FormItem>\r\n-                    <FormLabel>Pilot Start Date</FormLabel>\r\n-                    <Popover>\r\n-                      <PopoverTrigger asChild>\r\n-                        <FormControl>\r\n-                          <Button variant=\"outline\" className=\"w-full\">\r\n-                            {field.value\r\n-                              ? format(new Date(field.value), 'PPP')\r\n-                              : 'Pick a date'}\r\n-                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                          </Button>\r\n-                        </FormControl>\r\n-                      </PopoverTrigger>\r\n-                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                        <Calendar\r\n-                          mode=\"single\"\r\n-                          selected={\r\n-                            field.value ? new Date(field.value) : undefined\r\n-                          }\r\n-                          onSelect={(date) => field.onChange(date || undefined)}\r\n-                          captionLayout=\"dropdown-buttons\"\r\n-                          fromYear={2023}\r\n-                          toYear={2026}\r\n-                        />\r\n-                      </PopoverContent>\r\n-                    </Popover>\r\n-                    <FormMessage />\r\n-                  </FormItem>\r\n-                )}\r\n-              />\r\n+            {/* Pilot Start Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date || undefined)}\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-              {/* Pilot End Date */}\r\n-              <FormField\r\n-                control={form.control}\r\n-                name=\"pilotEndDate\"\r\n-                render={({ field }) => (\r\n-                  <FormItem>\r\n-                    <FormLabel>Pilot End Date</FormLabel>\r\n-                    <Popover>\r\n-                      <PopoverTrigger asChild>\r\n-                        <FormControl>\r\n-                          <Button variant=\"outline\" className=\"w-full\">\r\n-                            {field.value\r\n-                              ? format(new Date(field.value), 'PPP')\r\n-                              : 'Pick a date'}\r\n-                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                          </Button>\r\n-                        </FormControl>\r\n-                      </PopoverTrigger>\r\n-                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                        <Calendar\r\n-                          mode=\"single\"\r\n-                          selected={\r\n-                            field.value ? new Date(field.value) : undefined\r\n-                          }\r\n-                          onSelect={(date) => field.onChange(date || undefined)}\r\n-                          captionLayout=\"dropdown-buttons\"\r\n-                          fromYear={2023}\r\n-                          toYear={2026}\r\n-                        />\r\n-                      </PopoverContent>\r\n-                    </Popover>\r\n-                    <FormMessage />\r\n-                  </FormItem>\r\n-                )}\r\n-              />\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date || undefined)}\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-              {/* FRC Date */}\r\n-              <FormField\r\n-                control={form.control}\r\n-                name=\"frcDate\"\r\n-                render={({ field }) => (\r\n-                  <FormItem>\r\n-                    <FormLabel>FRC Date</FormLabel>\r\n-                    <Popover>\r\n-                      <PopoverTrigger asChild>\r\n-                        <FormControl>\r\n-                          <Button variant=\"outline\" className=\"w-full\">\r\n-                            {field.value\r\n-                              ? format(new Date(field.value), 'PPP')\r\n-                              : 'Pick a date'}\r\n-                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                          </Button>\r\n-                        </FormControl>\r\n-                      </PopoverTrigger>\r\n-                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                        <Calendar\r\n-                          mode=\"single\"\r\n-                          selected={\r\n-                            field.value ? new Date(field.value) : undefined\r\n-                          }\r\n-                          onSelect={(date) => field.onChange(date || undefined)}\r\n-                          captionLayout=\"dropdown-buttons\"\r\n-                          fromYear={2023}\r\n-                          toYear={2026}\r\n-                        />\r\n-                      </PopoverContent>\r\n-                    </Popover>\r\n-                    <FormMessage />\r\n-                  </FormItem>\r\n-                )}\r\n-              />\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => field.onChange(date || undefined)}\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-              <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-                {isLoading ? (\r\n-                  <>\r\n-                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                  </>\r\n-                ) : (\r\n-                  'Save Settings'\r\n-                )}\r\n-              </Button>\r\n-            </form>\r\n-          </Form>\r\n-        </CardContent>\r\n-      </Card>\r\n-    );\r\n-  };\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+              {isLoading ? (\r\n+                <>\r\n+                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n+                </>\r\n+              ) : (\r\n+                'Save Settings'\r\n+              )}\r\n+            </Button>\r\n+          </form>\r\n+        </Form>\r\n+      </CardContent>\r\n+    </Card>\r\n+  );\r\n+};\r\n \r\n-  return <WorkflowForm />;\r\n-}\r\n+export default WorkflowForm;\r\n"
                },
                {
                    "date": 1727532558674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,14 @@\n   const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n-    // Default values are initialized with today's date using new Date()\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n-      pilotStartDate: new Date(),  // Default to today's date\r\n-      pilotEndDate: new Date(),    // Default to today's date\r\n-      frcDate: new Date(),         // Default to today's date\r\n+      pilotStartDate: new Date(), // Default to today\r\n+      pilotEndDate: new Date(), // Default to today\r\n+      frcDate: new Date(), // Default to today\r\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n@@ -106,9 +105,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date || undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : new Date())} // Change the field on selection\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n                       />\r\n@@ -138,9 +137,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date || undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : new Date())} // Change the field on selection\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n                       />\r\n@@ -170,9 +169,9 @@\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date || undefined)}\r\n+                        onSelect={(date) => field.onChange(date ? date : new Date())} // Change the field on selection\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n                       />\r\n"
                },
                {
                    "date": 1727532837421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import { WorkflowFormSchema } from '@/lib/type';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n+import React, { useState } from 'react';\r\n+import { useForm } from 'react-hook-form';\r\n+import { z } from 'zod';\r\n+import { format } from 'date-fns';\r\n+import { CalendarIcon, Loader2 } from 'lucide-react';\r\n+import { Button } from '../ui/button';\r\n+import { Calendar } from '../ui/calendar';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n+import { Input } from '../ui/input';\r\n+import { useModal } from '@/providers/modal-provider';\r\n+\r\n+function cn(...classes: string[]) {\r\n+  return classes.filter(Boolean).join(' ');\r\n+}\r\n+\r\n+type Props = {\r\n+  title?: string;\r\n+  subTitle?: string;\r\n+};\r\n+\r\n+const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n+  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n+    resolver: zodResolver(WorkflowFormSchema),\r\n+    defaultValues: {\r\n+      name: '',\r\n+      description: '',\r\n+      pilotStartDate: new Date(), // Default to today\r\n+      pilotEndDate: new Date(), // Default to today\r\n+      frcDate: new Date(), // Default to today\r\n+    },\r\n+  });\r\n+\r\n+  const isLoading = form.formState.isSubmitting;\r\n+  const router = useRouter();\r\n+\r\n+  const handleSubmit = (data: any) => {\r\n+    console.log('Form data:', data);\r\n+    // Submit logic here\r\n+  };\r\n+\r\n+  return (\r\n+    <Card className=\"w-full max-w-[650px] border-none\">\r\n+      {title && subTitle && (\r\n+        <CardHeader>\r\n+          <CardTitle>{title}</CardTitle>\r\n+          <CardDescription>{subTitle}</CardDescription>\r\n+        </CardHeader>\r\n+      )}\r\n+      <CardContent>\r\n+        <Form {...form}>\r\n+          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+            {/* Name */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"name\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Project Name</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Description */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"description\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Description</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Description\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Pilot Start Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+              {isLoading ? (\r\n+                <>\r\n+                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n+                </>\r\n+              ) : (\r\n+                'Save Settings'\r\n+              )}\r\n+            </Button>\r\n+          </form>\r\n+        </Form>\r\n+      </CardContent>\r\n+    </Card>\r\n+  );\r\n+};\r\n+\r\n+export default WorkflowForm;\r\n"
                },
                {
                    "date": 1727533001934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,409 +1,97 @@\n-import { WorkflowFormSchema } from '@/lib/type';\r\n+import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n-import React, { useState } from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n import { z } from 'zod';\r\n import { format } from 'date-fns';\r\n-import { CalendarIcon, Loader2 } from 'lucide-react';\r\n+import { useState } from 'react';\r\n import { Button } from '../ui/button';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n+import { CalendarIcon } from 'lucide-react';\r\n import { Calendar } from '../ui/calendar';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n-import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n import { Input } from '../ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n+import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\n \r\n-function cn(...classes: string[]) {\r\n-  return classes.filter(Boolean).join(' ');\r\n-}\r\n+// Define the schema for form validation\r\n+const schema = z.object({\r\n+  name: z.string().nonempty('Project name is required'),\r\n+  description: z.string().nonempty('Description is required'),\r\n+  pilotStartDate: z.date().optional(),\r\n+  pilotEndDate: z.date().optional(),\r\n+  frcDate: z.date().optional(),\r\n+});\r\n \r\n-type Props = {\r\n-  title?: string;\r\n-  subTitle?: string;\r\n-};\r\n-\r\n-const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n-  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+const WorkflowForm = () => {\r\n+  const form = useForm({\r\n     mode: 'onChange',\r\n-    resolver: zodResolver(WorkflowFormSchema),\r\n+    resolver: zodResolver(schema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n-      pilotStartDate: new Date(), // Default to today\r\n-      pilotEndDate: new Date(), // Default to today\r\n-      frcDate: new Date(), // Default to today\r\n+      pilotStartDate: new Date(),  // Default to today's date\r\n+      pilotEndDate: new Date(),    // Default to today's date\r\n+      frcDate: new Date(),         // Default to today's date\r\n     },\r\n   });\r\n \r\n-  const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n+  // State to control selected dates\r\n+  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\r\n \r\n-  const handleSubmit = (data: any) => {\r\n-    console.log('Form data:', data);\r\n-    // Submit logic here\r\n+  // Handle date change\r\n+  const handleDateChange = (date: Date | undefined) => {\r\n+    setSelectedDate(date);  // Update the selected date\r\n   };\r\n \r\n-  return (\r\n-    <Card className=\"w-full max-w-[650px] border-none\">\r\n-      {title && subTitle && (\r\n-        <CardHeader>\r\n-          <CardTitle>{title}</CardTitle>\r\n-          <CardDescription>{subTitle}</CardDescription>\r\n-        </CardHeader>\r\n-      )}\r\n-      <CardContent>\r\n-        <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-            {/* Name */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"name\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Project Name</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* Description */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"description\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Description</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Description\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* Pilot Start Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-              {isLoading ? (\r\n-                <>\r\n-                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                </>\r\n-              ) : (\r\n-                'Save Settings'\r\n-              )}\r\n-            </Button>\r\n-          </form>\r\n-        </Form>\r\n-      </CardContent>\r\n-    </Card>\r\n-  );\r\n-};\r\n-\r\n-export default WorkflowForm;\r\n-import { WorkflowFormSchema } from '@/lib/type';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n-import React, { useState } from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n-import { z } from 'zod';\r\n-import { format } from 'date-fns';\r\n-import { CalendarIcon, Loader2 } from 'lucide-react';\r\n-import { Button } from '../ui/button';\r\n-import { Calendar } from '../ui/calendar';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n-import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n-import { Input } from '../ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n-\r\n-function cn(...classes: string[]) {\r\n-  return classes.filter(Boolean).join(' ');\r\n-}\r\n-\r\n-type Props = {\r\n-  title?: string;\r\n-  subTitle?: string;\r\n-};\r\n-\r\n-const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n-  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n-    resolver: zodResolver(WorkflowFormSchema),\r\n-    defaultValues: {\r\n-      name: '',\r\n-      description: '',\r\n-      pilotStartDate: new Date(), // Default to today\r\n-      pilotEndDate: new Date(), // Default to today\r\n-      frcDate: new Date(), // Default to today\r\n-    },\r\n-  });\r\n-\r\n-  const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n-\r\n   const handleSubmit = (data: any) => {\r\n     console.log('Form data:', data);\r\n-    // Submit logic here\r\n   };\r\n \r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n-      {title && subTitle && (\r\n-        <CardHeader>\r\n-          <CardTitle>{title}</CardTitle>\r\n-          <CardDescription>{subTitle}</CardDescription>\r\n-        </CardHeader>\r\n-      )}\r\n+      <CardHeader>\r\n+        <CardTitle>Workflow Form</CardTitle>\r\n+      </CardHeader>\r\n       <CardContent>\r\n-        <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-            {/* Name */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"name\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Project Name</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\r\n+          {/* Project Name */}\r\n+          <div>\r\n+            <label>Project Name</label>\r\n+            <Input {...form.register('name')} placeholder=\"Project Name\" />\r\n+          </div>\r\n \r\n-            {/* Description */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"description\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Description</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Description\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+          {/* Description */}\r\n+          <div>\r\n+            <label>Description</label>\r\n+            <Input {...form.register('description')} placeholder=\"Description\" />\r\n+          </div>\r\n \r\n-            {/* Pilot Start Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : new Date())} // Change the field on selection\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+          {/* Date Picker for Pilot Start Date */}\r\n+          <div>\r\n+            <label>Pilot Start Date</label>\r\n+            <Popover>\r\n+              <PopoverTrigger asChild>\r\n+                <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                  {selectedDate ? format(selectedDate, 'PPP') : 'Pick a date'}\r\n+                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                </Button>\r\n+              </PopoverTrigger>\r\n+              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                <Calendar\r\n+                  mode=\"single\"\r\n+                  selected={selectedDate}\r\n+                  onSelect={(date) => {\r\n+                    handleDateChange(date);   // Update state when date is selected\r\n+                    form.setValue('pilotStartDate', date);  // Sync with form\r\n+                  }}\r\n+                  initialFocus\r\n+                  captionLayout=\"dropdown-buttons\"\r\n+                />\r\n+              </PopoverContent>\r\n+            </Popover>\r\n+          </div>\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : new Date())} // Change the field on selection\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => field.onChange(date ? date : new Date())} // Change the field on selection\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-              {isLoading ? (\r\n-                <>\r\n-                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                </>\r\n-              ) : (\r\n-                'Save Settings'\r\n-              )}\r\n-            </Button>\r\n-          </form>\r\n-        </Form>\r\n+          {/* Submit Button */}\r\n+          <Button type=\"submit\">Save</Button>\r\n+        </form>\r\n       </CardContent>\r\n     </Card>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1727533028775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,208 @@\n+import { WorkflowFormSchema } from '@/lib/type';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n+import React, { useState } from 'react';\r\n import { useForm } from 'react-hook-form';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n import { z } from 'zod';\r\n import { format } from 'date-fns';\r\n-import { useState } from 'react';\r\n+import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '../ui/button';\r\n+import { Calendar } from '../ui/calendar';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n-import { CalendarIcon } from 'lucide-react';\r\n-import { Calendar } from '../ui/calendar';\r\n import { Input } from '../ui/input';\r\n-import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\n+import { useModal } from '@/providers/modal-provider';\r\n \r\n-// Define the schema for form validation\r\n-const schema = z.object({\r\n-  name: z.string().nonempty('Project name is required'),\r\n-  description: z.string().nonempty('Description is required'),\r\n-  pilotStartDate: z.date().optional(),\r\n-  pilotEndDate: z.date().optional(),\r\n-  frcDate: z.date().optional(),\r\n-});\r\n+function cn(...classes: string[]) {\r\n+  return classes.filter(Boolean).join(' ');\r\n+}\r\n \r\n-const WorkflowForm = () => {\r\n-  const form = useForm({\r\n+type Props = {\r\n+  title?: string;\r\n+  subTitle?: string;\r\n+};\r\n+\r\n+const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n+  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n     mode: 'onChange',\r\n-    resolver: zodResolver(schema),\r\n+    resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n-      pilotStartDate: new Date(),  // Default to today's date\r\n-      pilotEndDate: new Date(),    // Default to today's date\r\n-      frcDate: new Date(),         // Default to today's date\r\n+      pilotStartDate: new Date(), // Default to today\r\n+      pilotEndDate: new Date(), // Default to today\r\n+      frcDate: new Date(), // Default to today\r\n     },\r\n   });\r\n \r\n-  // State to control selected dates\r\n-  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\r\n+  const isLoading = form.formState.isSubmitting;\r\n+  const router = useRouter();\r\n \r\n-  // Handle date change\r\n-  const handleDateChange = (date: Date | undefined) => {\r\n-    setSelectedDate(date);  // Update the selected date\r\n-  };\r\n-\r\n   const handleSubmit = (data: any) => {\r\n     console.log('Form data:', data);\r\n+    // Submit logic here\r\n   };\r\n \r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n-      <CardHeader>\r\n-        <CardTitle>Workflow Form</CardTitle>\r\n-      </CardHeader>\r\n+      {title && subTitle && (\r\n+        <CardHeader>\r\n+          <CardTitle>{title}</CardTitle>\r\n+          <CardDescription>{subTitle}</CardDescription>\r\n+        </CardHeader>\r\n+      )}\r\n       <CardContent>\r\n-        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\r\n-          {/* Project Name */}\r\n-          <div>\r\n-            <label>Project Name</label>\r\n-            <Input {...form.register('name')} placeholder=\"Project Name\" />\r\n-          </div>\r\n+        <Form {...form}>\r\n+          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+            {/* Name */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"name\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Project Name</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-          {/* Description */}\r\n-          <div>\r\n-            <label>Description</label>\r\n-            <Input {...form.register('description')} placeholder=\"Description\" />\r\n-          </div>\r\n+            {/* Description */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"description\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Description</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Description\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-          {/* Date Picker for Pilot Start Date */}\r\n-          <div>\r\n-            <label>Pilot Start Date</label>\r\n-            <Popover>\r\n-              <PopoverTrigger asChild>\r\n-                <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                  {selectedDate ? format(selectedDate, 'PPP') : 'Pick a date'}\r\n-                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                </Button>\r\n-              </PopoverTrigger>\r\n-              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                <Calendar\r\n-                  mode=\"single\"\r\n-                  selected={selectedDate}\r\n-                  onSelect={(date) => {\r\n-                    handleDateChange(date);   // Update state when date is selected\r\n-                    form.setValue('pilotStartDate', date);  // Sync with form\r\n-                  }}\r\n-                  initialFocus\r\n-                  captionLayout=\"dropdown-buttons\"\r\n-                />\r\n-              </PopoverContent>\r\n-            </Popover>\r\n-          </div>\r\n+            {/* Pilot Start Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-          {/* Submit Button */}\r\n-          <Button type=\"submit\">Save</Button>\r\n-        </form>\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+              {isLoading ? (\r\n+                <>\r\n+                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n+                </>\r\n+              ) : (\r\n+                'Save Settings'\r\n+              )}\r\n+            </Button>\r\n+          </form>\r\n+        </Form>\r\n       </CardContent>\r\n     </Card>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1727533565112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,27 @@\n-import { WorkflowFormSchema } from '@/lib/type';\r\n+import React from 'react';\r\n+import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useRouter } from 'next/navigation';\r\n-import React, { useState } from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n+import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n-import { format } from 'date-fns';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n-import { Button } from '../ui/button';\r\n-import { Calendar } from '../ui/calendar';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\n-import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n-import { Input } from '../ui/input';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Calendar } from '@/components/ui/calendar';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n+import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n \r\n-function cn(...classes: string[]) {\r\n-  return classes.filter(Boolean).join(' ');\r\n-}\r\n+// Define the schema outside the component\r\n+const WorkflowFormSchema = z.object({\r\n+  name: z.string().min(1, 'Required'),\r\n+  description: z.string().min(1, 'Required'),\r\n+  pilotStartDate: z.date(),\r\n+  pilotEndDate: z.date(),\r\n+  frcDate: z.date(),\r\n+});\r\n \r\n type Props = {\r\n   title?: string;\r\n   subTitle?: string;\r\n@@ -30,18 +34,18 @@\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n-      pilotStartDate: new Date(), // Default to today\r\n-      pilotEndDate: new Date(), // Default to today\r\n-      frcDate: new Date(), // Default to today\r\n+      pilotStartDate: new Date(),\r\n+      pilotEndDate: new Date(),\r\n+      frcDate: new Date(),\r\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n   const router = useRouter();\r\n \r\n-  const handleSubmit = (data: any) => {\r\n+  const handleSubmit = (data: z.infer<typeof WorkflowFormSchema>) => {\r\n     console.log('Form data:', data);\r\n     // Submit logic here\r\n   };\r\n \r\n@@ -55,9 +59,8 @@\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n           <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-            {/* Name */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n@@ -70,9 +73,8 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Description */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"description\"\r\n               render={({ field }) => (\r\n@@ -85,113 +87,47 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Pilot Start Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+            {/* Date fields (Pilot Start Date, Pilot End Date, FRC Date) */}\r\n+            {['pilotStartDate', 'pilotEndDate', 'frcDate'].map((dateField) => (\r\n+              <FormField\r\n+                key={dateField}\r\n+                control={form.control}\r\n+                name={dateField as keyof z.infer<typeof WorkflowFormSchema>}\r\n+                render={({ field }) => (\r\n+                  <FormItem className=\"flex flex-col\">\r\n+                    <FormLabel>\r\n+                      {dateField === 'frcDate' ? 'FRC Date' : dateField.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase())}\r\n+                    </FormLabel>\r\n+                    <Popover>\r\n+                      <PopoverTrigger asChild>\r\n+                        <FormControl>\r\n+                          <Button\r\n+                            variant=\"outline\"\r\n+                            className={`w-full pl-3 text-left font-normal ${!field.value && 'text-muted-foreground'}`}\r\n+                          >\r\n+                            {field.value ? format(field.value instanceof Date ? field.value : new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                          </Button>\r\n+                        </FormControl>\r\n+                      </PopoverTrigger>\r\n+                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                        <Calendar\r\n+                          mode=\"single\"\r\n+                          selected={field.value instanceof Date ? field.value : new Date(field.value)}\r\n+                          onSelect={(date) => field.onChange(date)} // Ensure selected date is updated correctly\r\n+                          disabled={(date) => date > new Date('2100-01-01') || date < new Date('1900-01-01')}\r\n+                          initialFocus\r\n+                        />\r\n+                      </PopoverContent>\r\n+                    </Popover>\r\n+                    <FormMessage />\r\n+                  </FormItem>\r\n+                )}\r\n+              />\r\n+            ))}\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n"
                },
                {
                    "date": 1727533922807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import React from 'react';\r\n+import { useForm } from 'react-hook-form';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n+import { format } from 'date-fns';\r\n+import { z } from 'zod';\r\n+import { CalendarIcon, Loader2 } from 'lucide-react';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Calendar } from '@/components/ui/calendar';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n+import { Input } from '@/components/ui/input';\r\n+import { useModal } from '@/providers/modal-provider';\r\n+\r\n+// Define the schema outside the component\r\n+const WorkflowFormSchema = z.object({\r\n+  name: z.string().min(1, 'Required'),\r\n+  description: z.string().min(1, 'Required'),\r\n+  pilotStartDate: z.date(),\r\n+  pilotEndDate: z.date(),\r\n+  frcDate: z.date(),\r\n+});\r\n+\r\n+type Props = {\r\n+  title?: string;\r\n+  subTitle?: string;\r\n+};\r\n+\r\n+const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n+  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n+    resolver: zodResolver(WorkflowFormSchema),\r\n+    defaultValues: {\r\n+      name: '',\r\n+      description: '',\r\n+      pilotStartDate: new Date(),\r\n+      pilotEndDate: new Date(),\r\n+      frcDate: new Date(),\r\n+    },\r\n+  });\r\n+\r\n+  const isLoading = form.formState.isSubmitting;\r\n+  const router = useRouter();\r\n+\r\n+  const handleSubmit = (data: z.infer<typeof WorkflowFormSchema>) => {\r\n+    console.log('Form data:', data);\r\n+    // Submit logic here\r\n+  };\r\n+\r\n+  return (\r\n+    <Card className=\"w-full max-w-[650px] border-none\">\r\n+      {title && subTitle && (\r\n+        <CardHeader>\r\n+          <CardTitle>{title}</CardTitle>\r\n+          <CardDescription>{subTitle}</CardDescription>\r\n+        </CardHeader>\r\n+      )}\r\n+      <CardContent>\r\n+        <Form {...form}>\r\n+          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"name\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Project Name</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"description\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Description</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Description\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+                       {/* Pilot Start Date */}\r\n+                       <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+              {isLoading ? (\r\n+                <>\r\n+                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n+                </>\r\n+              ) : (\r\n+                'Save Settings'\r\n+              )}\r\n+            </Button>\r\n+          </form>\r\n+        </Form>\r\n+      </CardContent>\r\n+    </Card>\r\n+  );\r\n+};\r\n+\r\n+export default WorkflowForm;\r\n+\r\n"
                },
                {
                    "date": 1727534350949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,150 +210,4 @@\n };\r\n \r\n export default WorkflowForm;\r\n \r\n-import React from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n-import { format } from 'date-fns';\r\n-import { z } from 'zod';\r\n-import { CalendarIcon, Loader2 } from 'lucide-react';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Calendar } from '@/components/ui/calendar';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { Input } from '@/components/ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n-\r\n-// Define the schema outside the component\r\n-const WorkflowFormSchema = z.object({\r\n-  name: z.string().min(1, 'Required'),\r\n-  description: z.string().min(1, 'Required'),\r\n-  pilotStartDate: z.date(),\r\n-  pilotEndDate: z.date(),\r\n-  frcDate: z.date(),\r\n-});\r\n-\r\n-type Props = {\r\n-  title?: string;\r\n-  subTitle?: string;\r\n-};\r\n-\r\n-const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n-  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n-    resolver: zodResolver(WorkflowFormSchema),\r\n-    defaultValues: {\r\n-      name: '',\r\n-      description: '',\r\n-      pilotStartDate: new Date(),\r\n-      pilotEndDate: new Date(),\r\n-      frcDate: new Date(),\r\n-    },\r\n-  });\r\n-\r\n-  const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n-\r\n-  const handleSubmit = (data: z.infer<typeof WorkflowFormSchema>) => {\r\n-    console.log('Form data:', data);\r\n-    // Submit logic here\r\n-  };\r\n-\r\n-  return (\r\n-    <Card className=\"w-full max-w-[650px] border-none\">\r\n-      {title && subTitle && (\r\n-        <CardHeader>\r\n-          <CardTitle>{title}</CardTitle>\r\n-          <CardDescription>{subTitle}</CardDescription>\r\n-        </CardHeader>\r\n-      )}\r\n-      <CardContent>\r\n-        <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"name\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Project Name</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"description\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Description</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Description\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* Date fields (Pilot Start Date, Pilot End Date, FRC Date) */}\r\n-            {['pilotStartDate', 'pilotEndDate', 'frcDate'].map((dateField) => (\r\n-              <FormField\r\n-                key={dateField}\r\n-                control={form.control}\r\n-                name={dateField as keyof z.infer<typeof WorkflowFormSchema>}\r\n-                render={({ field }) => (\r\n-                  <FormItem className=\"flex flex-col\">\r\n-                    <FormLabel>\r\n-                      {dateField === 'frcDate' ? 'FRC Date' : dateField.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase())}\r\n-                    </FormLabel>\r\n-                    <Popover>\r\n-                      <PopoverTrigger asChild>\r\n-                        <FormControl>\r\n-                          <Button\r\n-                            variant=\"outline\"\r\n-                            className={`w-full pl-3 text-left font-normal ${!field.value && 'text-muted-foreground'}`}\r\n-                          >\r\n-                            {field.value ? format(field.value instanceof Date ? field.value : new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                          </Button>\r\n-                        </FormControl>\r\n-                      </PopoverTrigger>\r\n-                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                        <Calendar\r\n-                          mode=\"single\"\r\n-                          selected={field.value instanceof Date ? field.value : new Date(field.value)}\r\n-                          onSelect={(date) => field.onChange(date)} // Ensure selected date is updated correctly\r\n-                          disabled={(date) => date > new Date('2100-01-01') || date < new Date('1900-01-01')}\r\n-                          initialFocus\r\n-                        />\r\n-                      </PopoverContent>\r\n-                    </Popover>\r\n-                    <FormMessage />\r\n-                  </FormItem>\r\n-                )}\r\n-              />\r\n-            ))}\r\n-\r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-              {isLoading ? (\r\n-                <>\r\n-                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                </>\r\n-              ) : (\r\n-                'Save Settings'\r\n-              )}\r\n-            </Button>\r\n-          </form>\r\n-        </Form>\r\n-      </CardContent>\r\n-    </Card>\r\n-  );\r\n-};\r\n-\r\n-export default WorkflowForm;\r\n"
                },
                {
                    "date": 1727534742024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,19 @@\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n \r\n-// Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n   pilotEndDate: z.date(),\r\n   frcDate: z.date(),\r\n+}).refine((data) => {\r\n+  return data.pilotEndDate >= data.pilotStartDate && data.frcDate >= data.pilotStartDate;\r\n+}, {\r\n+  message: \"Pilot End Date and FRC Date must not be earlier than Pilot Start Date\",\r\n+  path: [\"pilotEndDate\", \"frcDate\"]\r\n });\r\n \r\n type Props = {\r\n   title?: string;\r\n@@ -48,8 +52,42 @@\n     console.log('Form data:', data);\r\n     // Submit logic here\r\n   };\r\n \r\n+  const renderDateField = (name: 'pilotStartDate' | 'pilotEndDate' | 'frcDate', label: string) => (\r\n+    <FormField\r\n+      control={form.control}\r\n+      name={name}\r\n+      render={({ field }) => (\r\n+        <FormItem className=\"flex flex-col\">\r\n+          <FormLabel>{label}</FormLabel>\r\n+          <Popover>\r\n+            <PopoverTrigger asChild>\r\n+              <FormControl>\r\n+                <Button\r\n+                  variant=\"outline\"\r\n+                  className={`w-full pl-3 text-left font-normal ${!field.value && 'text-muted-foreground'}`}\r\n+                >\r\n+                  {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                </Button>\r\n+              </FormControl>\r\n+            </PopoverTrigger>\r\n+            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+              <Calendar\r\n+                mode=\"single\"\r\n+                selected={field.value}\r\n+                onSelect={field.onChange}\r\n+                initialFocus\r\n+              />\r\n+            </PopoverContent>\r\n+          </Popover>\r\n+          <FormMessage />\r\n+        </FormItem>\r\n+      )}\r\n+    />\r\n+  );\r\n+\r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n         <CardHeader>\r\n@@ -87,113 +125,12 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-                       {/* Pilot Start Date */}\r\n-                       <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+            {renderDateField('pilotStartDate', 'Pilot Start Date')}\r\n+            {renderDateField('pilotEndDate', 'Pilot End Date')}\r\n+            {renderDateField('frcDate', 'FRC Date')}\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n@@ -208,6 +145,5 @@\n     </Card>\r\n   );\r\n };\r\n \r\n-export default WorkflowForm;\r\n-\r\n+export default WorkflowForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727573939523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,19 +12,15 @@\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n \r\n+// Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n   pilotEndDate: z.date(),\r\n   frcDate: z.date(),\r\n-}).refine((data) => {\r\n-  return data.pilotEndDate >= data.pilotStartDate && data.frcDate >= data.pilotStartDate;\r\n-}, {\r\n-  message: \"Pilot End Date and FRC Date must not be earlier than Pilot Start Date\",\r\n-  path: [\"pilotEndDate\", \"frcDate\"]\r\n });\r\n \r\n type Props = {\r\n   title?: string;\r\n@@ -52,42 +48,8 @@\n     console.log('Form data:', data);\r\n     // Submit logic here\r\n   };\r\n \r\n-  const renderDateField = (name: 'pilotStartDate' | 'pilotEndDate' | 'frcDate', label: string) => (\r\n-    <FormField\r\n-      control={form.control}\r\n-      name={name}\r\n-      render={({ field }) => (\r\n-        <FormItem className=\"flex flex-col\">\r\n-          <FormLabel>{label}</FormLabel>\r\n-          <Popover>\r\n-            <PopoverTrigger asChild>\r\n-              <FormControl>\r\n-                <Button\r\n-                  variant=\"outline\"\r\n-                  className={`w-full pl-3 text-left font-normal ${!field.value && 'text-muted-foreground'}`}\r\n-                >\r\n-                  {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                </Button>\r\n-              </FormControl>\r\n-            </PopoverTrigger>\r\n-            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-              <Calendar\r\n-                mode=\"single\"\r\n-                selected={field.value}\r\n-                onSelect={field.onChange}\r\n-                initialFocus\r\n-              />\r\n-            </PopoverContent>\r\n-          </Popover>\r\n-          <FormMessage />\r\n-        </FormItem>\r\n-      )}\r\n-    />\r\n-  );\r\n-\r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n         <CardHeader>\r\n@@ -125,12 +87,113 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {renderDateField('pilotStartDate', 'Pilot Start Date')}\r\n-            {renderDateField('pilotEndDate', 'Pilot End Date')}\r\n-            {renderDateField('frcDate', 'FRC Date')}\r\n+                       {/* Pilot Start Date */}\r\n+                       <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n"
                },
                {
                    "date": 1727574408149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,12 +106,13 @@\n                     </PopoverTrigger>\r\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        selected={field.value}\r\n+                        onSelect={field.onChange}\r\n+                        disabled={(date) =>\r\n+                          date > new Date() || date < new Date('1900-01-01')\r\n+                        }\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n"
                },
                {
                    "date": 1727575076004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,13 +106,12 @@\n                     </PopoverTrigger>\r\n                     <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={field.onChange}\r\n-                        disabled={(date) =>\r\n-                          date > new Date() || date < new Date('1900-01-01')\r\n-                        }\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n"
                },
                {
                    "date": 1727575673136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n+import { toast } from '@/hooks/use-toast';\r\n \r\n-// Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n@@ -43,13 +43,53 @@\n \r\n   const isLoading = form.formState.isSubmitting;\r\n   const router = useRouter();\r\n \r\n-  const handleSubmit = (data: z.infer<typeof WorkflowFormSchema>) => {\r\n-    console.log('Form data:', data);\r\n-    // Submit logic here\r\n-  };\r\n+  function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n+    toast({\r\n+      title: \"You submitted the following values:\",\r\n+      description: (\r\n+        <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\r\n+          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\r\n+        </pre>\r\n+      ),\r\n+    });\r\n+  }\r\n \r\n+  const renderDateField = (name: 'pilotStartDate' | 'pilotEndDate' | 'frcDate', label: string) => (\r\n+    <FormField\r\n+      control={form.control}\r\n+      name={name}\r\n+      render={({ field }) => (\r\n+        <FormItem className=\"flex flex-col\">\r\n+          <FormLabel>{label}</FormLabel>\r\n+          <Popover>\r\n+            <PopoverTrigger asChild>\r\n+              <FormControl>\r\n+                <Button\r\n+                  variant=\"outline\"\r\n+                  className={`w-full pl-3 text-left font-normal ${!field.value && 'text-muted-foreground'}`}\r\n+                >\r\n+                  {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                </Button>\r\n+              </FormControl>\r\n+            </PopoverTrigger>\r\n+            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+              <Calendar\r\n+                mode=\"single\"\r\n+                selected={field.value}\r\n+                onSelect={field.onChange}\r\n+                initialFocus\r\n+              />\r\n+            </PopoverContent>\r\n+          </Popover>\r\n+          <FormMessage />\r\n+        </FormItem>\r\n+      )}\r\n+    />\r\n+  );\r\n+\r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n         <CardHeader>\r\n@@ -58,9 +98,9 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+          <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n@@ -87,113 +127,12 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-                       {/* Pilot Start Date */}\r\n-                       <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+            {renderDateField('pilotStartDate', 'Pilot Start Date')}\r\n+            {renderDateField('pilotEndDate', 'Pilot End Date')}\r\n+            {renderDateField('frcDate', 'FRC Date')}\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n"
                },
                {
                    "date": 1727576772226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n+'use client'\r\n+\r\n import React from 'react';\r\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '@/components/ui/button';\r\n@@ -10,9 +11,9 @@\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { Input } from '@/components/ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n+import { cn } from '@/lib/utils';\r\n import { toast } from '@/hooks/use-toast';\r\n \r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n@@ -27,11 +28,9 @@\n   subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n@@ -41,11 +40,11 @@\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n \r\n   function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n+    console.log('Form data:', data);\r\n     toast({\r\n       title: \"You submitted the following values:\",\r\n       description: (\r\n         <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\r\n@@ -66,20 +65,26 @@\n             <PopoverTrigger asChild>\r\n               <FormControl>\r\n                 <Button\r\n                   variant=\"outline\"\r\n-                  className={`w-full pl-3 text-left font-normal ${!field.value && 'text-muted-foreground'}`}\r\n+                  className={cn(\r\n+                    \"w-[280px] justify-start text-left font-normal\",\r\n+                    !field.value && \"text-muted-foreground\"\r\n+                  )}\r\n                 >\r\n-                  {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                  <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                  {field.value ? format(field.value, 'PPP') : <span>Pick a date</span>}\r\n                 </Button>\r\n               </FormControl>\r\n             </PopoverTrigger>\r\n             <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n               <Calendar\r\n                 mode=\"single\"\r\n                 selected={field.value}\r\n                 onSelect={field.onChange}\r\n+                disabled={(date) =>\r\n+                  date > new Date(\"2100-01-01\") || date < new Date(\"1900-01-01\")\r\n+                }\r\n                 initialFocus\r\n               />\r\n             </PopoverContent>\r\n           </Popover>\r\n@@ -98,9 +103,9 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n@@ -131,9 +136,9 @@\n             {renderDateField('pilotStartDate', 'Pilot Start Date')}\r\n             {renderDateField('pilotEndDate', 'Pilot End Date')}\r\n             {renderDateField('frcDate', 'FRC Date')}\r\n \r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+            <Button type=\"submit\" disabled={isLoading}>\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n                 </>\r\n"
                },
                {
                    "date": 1727577793693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-'use client'\r\n-\r\n import React from 'react';\r\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { format } from 'date-fns';\r\n"
                },
                {
                    "date": 1727577908069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import React from 'react';\r\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '@/components/ui/button';\r\n@@ -9,11 +9,11 @@\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { Input } from '@/components/ui/input';\r\n-import { cn } from '@/lib/utils';\r\n-import { toast } from '@/hooks/use-toast';\r\n+import { useModal } from '@/providers/modal-provider';\r\n \r\n+// Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n@@ -26,9 +26,11 @@\n   subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n@@ -38,61 +40,15 @@\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n+  const router = useRouter();\r\n \r\n-  function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n+  const handleSubmit = (data: z.infer<typeof WorkflowFormSchema>) => {\r\n     console.log('Form data:', data);\r\n-    toast({\r\n-      title: \"You submitted the following values:\",\r\n-      description: (\r\n-        <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\r\n-          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\r\n-        </pre>\r\n-      ),\r\n-    });\r\n-  }\r\n+    // Submit logic here\r\n+  };\r\n \r\n-  const renderDateField = (name: 'pilotStartDate' | 'pilotEndDate' | 'frcDate', label: string) => (\r\n-    <FormField\r\n-      control={form.control}\r\n-      name={name}\r\n-      render={({ field }) => (\r\n-        <FormItem className=\"flex flex-col\">\r\n-          <FormLabel>{label}</FormLabel>\r\n-          <Popover>\r\n-            <PopoverTrigger asChild>\r\n-              <FormControl>\r\n-                <Button\r\n-                  variant=\"outline\"\r\n-                  className={cn(\r\n-                    \"w-[280px] justify-start text-left font-normal\",\r\n-                    !field.value && \"text-muted-foreground\"\r\n-                  )}\r\n-                >\r\n-                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                  {field.value ? format(field.value, 'PPP') : <span>Pick a date</span>}\r\n-                </Button>\r\n-              </FormControl>\r\n-            </PopoverTrigger>\r\n-            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-              <Calendar\r\n-                mode=\"single\"\r\n-                selected={field.value}\r\n-                onSelect={field.onChange}\r\n-                disabled={(date) =>\r\n-                  date > new Date(\"2100-01-01\") || date < new Date(\"1900-01-01\")\r\n-                }\r\n-                initialFocus\r\n-              />\r\n-            </PopoverContent>\r\n-          </Popover>\r\n-          <FormMessage />\r\n-        </FormItem>\r\n-      )}\r\n-    />\r\n-  );\r\n-\r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n         <CardHeader>\r\n@@ -101,9 +57,9 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n+          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n@@ -130,13 +86,114 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {renderDateField('pilotStartDate', 'Pilot Start Date')}\r\n-            {renderDateField('pilotEndDate', 'Pilot End Date')}\r\n-            {renderDateField('frcDate', 'FRC Date')}\r\n+                       {/* Pilot Start Date */}\r\n+                       <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n \r\n-            <Button type=\"submit\" disabled={isLoading}>\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value ? new Date(field.value) : undefined}\r\n+                        onSelect={(date) => {\r\n+                          if (date) field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n                 </>\r\n"
                },
                {
                    "date": 1727578541799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+import { useForm } from 'react-hook-form';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n+import { format } from 'date-fns';\r\n+import { z } from 'zod';\r\n+import { CalendarIcon, Loader2 } from 'lucide-react';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Calendar } from '@/components/ui/calendar';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n+import { Input } from '@/components/ui/input';\r\n+import { useModal } from '@/providers/modal-provider';\r\n+import { toast } from '@/hooks/use-toast';\r\n+\r\n+// Define the schema outside the component\r\n+const WorkflowFormSchema = z.object({\r\n+  name: z.string().min(1, 'Required'),\r\n+  description: z.string().min(1, 'Required'),\r\n+  pilotStartDate: z.date(),\r\n+  pilotEndDate: z.date(),\r\n+  frcDate: z.date(),\r\n+});\r\n+\r\n+type Props = {\r\n+  title?: string;\r\n+  subTitle?: string;\r\n+};\r\n+\r\n+const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n+  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n+    resolver: zodResolver(WorkflowFormSchema),\r\n+    defaultValues: {\r\n+      name: '',\r\n+      description: '',\r\n+      pilotStartDate: new Date(),\r\n+      pilotEndDate: new Date(),\r\n+      frcDate: new Date(),\r\n+    },\r\n+  });\r\n+\r\n+  const isLoading = form.formState.isSubmitting;\r\n+  const router = useRouter();\r\n+\r\n+  async function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n+    try {\r\n+      // Simulate API call\r\n+      await new Promise(resolve => setTimeout(resolve, 1000));\r\n+      console.log('Form data:', data);\r\n+      toast({\r\n+        title: \"Form submitted successfully\",\r\n+        description: \"Your workflow has been created.\",\r\n+      });\r\n+      form.reset(); // Reset form after successful submission\r\n+    } catch (error) {\r\n+      console.error('Error submitting form:', error);\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"There was a problem submitting your form.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <Card className=\"w-full max-w-[650px] border-none\">\r\n+      {title && subTitle && (\r\n+        <CardHeader>\r\n+          <CardTitle>{title}</CardTitle>\r\n+          <CardDescription>{subTitle}</CardDescription>\r\n+        </CardHeader>\r\n+      )}\r\n+      <CardContent>\r\n+        <Form {...form}>\r\n+          {/* Ensure form.handleSubmit is used instead of undefined handleSubmit */}\r\n+          <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"name\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Project Name</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"description\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Description</FormLabel>\r\n+                  <FormControl>\r\n+                    <Input {...field} placeholder=\"Description\" />\r\n+                  </FormControl>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Pilot Start Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotStartDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot Start Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value}\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* Pilot End Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"pilotEndDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>Pilot End Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value}\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            {/* FRC Date */}\r\n+            <FormField\r\n+              control={form.control}\r\n+              name=\"frcDate\"\r\n+              render={({ field }) => (\r\n+                <FormItem>\r\n+                  <FormLabel>FRC Date</FormLabel>\r\n+                  <Popover>\r\n+                    <PopoverTrigger asChild>\r\n+                      <FormControl>\r\n+                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n+                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n+                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+                        </Button>\r\n+                      </FormControl>\r\n+                    </PopoverTrigger>\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                      <Calendar\r\n+                        mode=\"single\"\r\n+                        selected={field.value}\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n+                        initialFocus\r\n+                        captionLayout=\"dropdown-buttons\"\r\n+                        fromYear={2023}\r\n+                        toYear={2026}\r\n+                      />\r\n+                    </PopoverContent>\r\n+                  </Popover>\r\n+                  <FormMessage />\r\n+                </FormItem>\r\n+              )}\r\n+            />\r\n+\r\n+            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n+              {isLoading ? (\r\n+                <>\r\n+                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n+                </>\r\n+              ) : (\r\n+                'Save Settings'\r\n+              )}\r\n+            </Button>\r\n+          </form>\r\n+        </Form>\r\n+      </CardContent>\r\n+    </Card>\r\n+  );\r\n+};\r\n+\r\n+export default WorkflowForm;\r\n"
                },
                {
                    "date": 1727606219438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,17 @@\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '@/components/ui/button';\r\n import { Calendar } from '@/components/ui/calendar';\r\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { Input } from '@/components/ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n-import { toast } from '@/hooks/use-toast';\r\n+import { useState } from 'react';\r\n \r\n-// Define the schema outside the component\r\n+// Define the schema for form validation\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n@@ -27,11 +24,9 @@\n   subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n@@ -41,27 +36,16 @@\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n-\r\n+  \r\n   async function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n     try {\r\n-      // Simulate API call\r\n       await new Promise(resolve => setTimeout(resolve, 1000));\r\n       console.log('Form data:', data);\r\n-      toast({\r\n-        title: \"Form submitted successfully\",\r\n-        description: \"Your workflow has been created.\",\r\n-      });\r\n-      form.reset(); // Reset form after successful submission\r\n+      form.reset(); // Reset form on successful submission\r\n     } catch (error) {\r\n       console.error('Error submitting form:', error);\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: \"There was a problem submitting your form.\",\r\n-        variant: \"destructive\",\r\n-      });\r\n     }\r\n   }\r\n \r\n   return (\r\n@@ -73,10 +57,11 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n-          {/* Ensure form.handleSubmit is used instead of undefined handleSubmit */}\r\n           <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+\r\n+            {/* Project Name Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n@@ -89,8 +74,9 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n+            {/* Description Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"description\"\r\n               render={({ field }) => (\r\n@@ -119,15 +105,16 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                    <PopoverContent\r\n+                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n+                      align=\"start\"\r\n+                    >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        onSelect={(date) => field.onChange(date)}  // Update field when a date is selected\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -154,15 +141,16 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                    <PopoverContent\r\n+                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n+                      align=\"start\"\r\n+                    >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        onSelect={(date) => field.onChange(date)}  // Update field on date select\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -189,15 +177,16 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                    <PopoverContent\r\n+                      className=\"w-auto p-0 z-[1000]\"  // Ensure visibility with z-index\r\n+                      align=\"start\"\r\n+                    >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        onSelect={(date) => field.onChange(date)}  // Update on date selection\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -208,8 +197,9 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n+            {/* Submit Button */}\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n@@ -225,215 +215,4 @@\n   );\r\n };\r\n \r\n export default WorkflowForm;\r\n-import { useForm } from 'react-hook-form';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n-import { format } from 'date-fns';\r\n-import { z } from 'zod';\r\n-import { CalendarIcon, Loader2 } from 'lucide-react';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Calendar } from '@/components/ui/calendar';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { Input } from '@/components/ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n-\r\n-// Define the schema outside the component\r\n-const WorkflowFormSchema = z.object({\r\n-  name: z.string().min(1, 'Required'),\r\n-  description: z.string().min(1, 'Required'),\r\n-  pilotStartDate: z.date(),\r\n-  pilotEndDate: z.date(),\r\n-  frcDate: z.date(),\r\n-});\r\n-\r\n-type Props = {\r\n-  title?: string;\r\n-  subTitle?: string;\r\n-};\r\n-\r\n-const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n-  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n-    resolver: zodResolver(WorkflowFormSchema),\r\n-    defaultValues: {\r\n-      name: '',\r\n-      description: '',\r\n-      pilotStartDate: new Date(),\r\n-      pilotEndDate: new Date(),\r\n-      frcDate: new Date(),\r\n-    },\r\n-  });\r\n-\r\n-  const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n-\r\n-  const handleSubmit = (data: z.infer<typeof WorkflowFormSchema>) => {\r\n-    console.log('Form data:', data);\r\n-    // Submit logic here\r\n-  };\r\n-\r\n-  return (\r\n-    <Card className=\"w-full max-w-[650px] border-none\">\r\n-      {title && subTitle && (\r\n-        <CardHeader>\r\n-          <CardTitle>{title}</CardTitle>\r\n-          <CardDescription>{subTitle}</CardDescription>\r\n-        </CardHeader>\r\n-      )}\r\n-      <CardContent>\r\n-        <Form {...form}>\r\n-          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"name\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Project Name</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"description\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Description</FormLabel>\r\n-                  <FormControl>\r\n-                    <Input {...field} placeholder=\"Description\" />\r\n-                  </FormControl>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-                       {/* Pilot Start Date */}\r\n-                       <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(new Date(field.value), 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value ? new Date(field.value) : undefined}\r\n-                        onSelect={(date) => {\r\n-                          if (date) field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-              {isLoading ? (\r\n-                <>\r\n-                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                </>\r\n-              ) : (\r\n-                'Save Settings'\r\n-              )}\r\n-            </Button>\r\n-          </form>\r\n-        </Form>\r\n-      </CardContent>\r\n-    </Card>\r\n-  );\r\n-};\r\n-\r\n-export default WorkflowForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727606421096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '@/components/ui/button';\r\n@@ -8,8 +9,11 @@\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { useState } from 'react';\r\n+import { Input } from '@/components/ui/input';\r\n+import { useModal } from '@/providers/modal-provider';\r\n+import { toast } from '@/hooks/use-toast';\r\n \r\n // Define the schema for form validation\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n@@ -67,9 +71,9 @@\n               render={({ field }) => (\r\n                 <FormItem>\r\n                   <FormLabel>Project Name</FormLabel>\r\n                   <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  <Input {...field} placeholder=\"Project Name\" />\r\n                   </FormControl>\r\n                   <FormMessage />\r\n                 </FormItem>\r\n               )}\r\n"
                },
                {
                    "date": 1727606510419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,13 @@\n import { Calendar } from '@/components/ui/calendar';\r\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { useState } from 'react';\r\n import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n import { toast } from '@/hooks/use-toast';\r\n \r\n-// Define the schema for form validation\r\n+// Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n@@ -28,9 +27,11 @@\n   subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n@@ -40,16 +41,27 @@\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n-  \r\n+  const router = useRouter();\r\n+\r\n   async function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n     try {\r\n+      // Simulate API call\r\n       await new Promise(resolve => setTimeout(resolve, 1000));\r\n       console.log('Form data:', data);\r\n-      form.reset(); // Reset form on successful submission\r\n+      toast({\r\n+        title: \"Form submitted successfully\",\r\n+        description: \"Your workflow has been created.\",\r\n+      });\r\n+      form.reset(); // Reset form after successful submission\r\n     } catch (error) {\r\n       console.error('Error submitting form:', error);\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"There was a problem submitting your form.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n     }\r\n   }\r\n \r\n   return (\r\n@@ -61,26 +73,24 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n+          {/* Ensure form.handleSubmit is used instead of undefined handleSubmit */}\r\n           <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-\r\n-            {/* Project Name Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n                 <FormItem>\r\n                   <FormLabel>Project Name</FormLabel>\r\n                   <FormControl>\r\n-                  <Input {...field} placeholder=\"Project Name\" />\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n                   </FormControl>\r\n                   <FormMessage />\r\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Description Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"description\"\r\n               render={({ field }) => (\r\n@@ -109,16 +119,15 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n-                      align=\"start\"\r\n-                    >\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => field.onChange(date)}  // Update field when a date is selected\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -145,16 +154,15 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n-                      align=\"start\"\r\n-                    >\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => field.onChange(date)}  // Update field on date select\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -181,16 +189,15 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1000]\"  // Ensure visibility with z-index\r\n-                      align=\"start\"\r\n-                    >\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => field.onChange(date)}  // Update on date selection\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -201,9 +208,8 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Submit Button */}\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n"
                },
                {
                    "date": 1727606608769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,19 @@\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useRouter } from 'next/navigation';\r\n import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '@/components/ui/button';\r\n import { Calendar } from '@/components/ui/calendar';\r\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { Input } from '@/components/ui/input';\r\n-import { useModal } from '@/providers/modal-provider';\r\n-import { toast } from '@/hooks/use-toast';\r\n-\r\n-// Define the schema outside the component\r\n+import { useState } from 'react';\r\n+import { Input\r\n+  \r\n+ } from '../ui/input';\r\n+// Define the schema for form validation\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n@@ -27,11 +26,9 @@\n   subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n-  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n-    mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n@@ -41,27 +38,16 @@\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n-  const router = useRouter();\r\n-\r\n+  \r\n   async function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n     try {\r\n-      // Simulate API call\r\n       await new Promise(resolve => setTimeout(resolve, 1000));\r\n       console.log('Form data:', data);\r\n-      toast({\r\n-        title: \"Form submitted successfully\",\r\n-        description: \"Your workflow has been created.\",\r\n-      });\r\n-      form.reset(); // Reset form after successful submission\r\n+      form.reset(); // Reset form on successful submission\r\n     } catch (error) {\r\n       console.error('Error submitting form:', error);\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: \"There was a problem submitting your form.\",\r\n-        variant: \"destructive\",\r\n-      });\r\n     }\r\n   }\r\n \r\n   return (\r\n@@ -73,10 +59,11 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n-          {/* Ensure form.handleSubmit is used instead of undefined handleSubmit */}\r\n           <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n+\r\n+            {/* Project Name Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n@@ -89,8 +76,9 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n+            {/* Description Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"description\"\r\n               render={({ field }) => (\r\n@@ -119,15 +107,16 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                    <PopoverContent\r\n+                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n+                      align=\"start\"\r\n+                    >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        onSelect={(date) => field.onChange(date)}  // Update field when a date is selected\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -154,15 +143,16 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                    <PopoverContent\r\n+                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n+                      align=\"start\"\r\n+                    >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        onSelect={(date) => field.onChange(date)}  // Update field on date select\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -189,15 +179,16 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n+                    <PopoverContent\r\n+                      className=\"w-auto p-0 z-[1000]\"  // Ensure visibility with z-index\r\n+                      align=\"start\"\r\n+                    >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n+                        onSelect={(date) => field.onChange(date)}  // Update on date selection\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -208,8 +199,9 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n+            {/* Submit Button */}\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n"
                },
                {
                    "date": 1727606986546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { useForm } from 'react-hook-form';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useRouter } from 'next/navigation';\r\n import { format } from 'date-fns';\r\n import { z } from 'zod';\r\n import { CalendarIcon, Loader2 } from 'lucide-react';\r\n import { Button } from '@/components/ui/button';\r\n@@ -8,11 +9,12 @@\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { useState } from 'react';\r\n-import { Input\r\n-  \r\n- } from '../ui/input';\r\n+import { Input } from '@/components/ui/input';\r\n+import { useModal } from '@/providers/modal-provider';\r\n+import { toast } from '@/hooks/use-toast';\r\n+\r\n // Define the schema for form validation\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n@@ -69,9 +71,9 @@\n               render={({ field }) => (\r\n                 <FormItem>\r\n                   <FormLabel>Project Name</FormLabel>\r\n                   <FormControl>\r\n-                    <Input {...field} placeholder=\"Project Name\" />\r\n+                  <Input {...field} placeholder=\"Project Name\" />\r\n                   </FormControl>\r\n                   <FormMessage />\r\n                 </FormItem>\r\n               )}\r\n@@ -108,9 +110,9 @@\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n                     <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n+                      className=\"w-auto p-0 z-[1500]\"  // Add z-index to fix popover visibility\r\n                       align=\"start\"\r\n                     >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n@@ -144,9 +146,9 @@\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n                     <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1000]\"  // Add z-index to fix popover visibility\r\n+                      className=\"w-auto p-0 z-[1500]\"  // Add z-index to fix popover visibility\r\n                       align=\"start\"\r\n                     >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n@@ -180,9 +182,9 @@\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n                     <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1000]\"  // Ensure visibility with z-index\r\n+                      className=\"w-auto p-0 z-[1500]\"  // Ensure visibility with z-index\r\n                       align=\"start\"\r\n                     >\r\n                       <Calendar\r\n                         mode=\"single\"\r\n"
                },
                {
                    "date": 1727607437671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,13 @@\n import { Calendar } from '@/components/ui/calendar';\r\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n-import { useState } from 'react';\r\n import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n import { toast } from '@/hooks/use-toast';\r\n \r\n-// Define the schema for form validation\r\n+// Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n   description: z.string().min(1, 'Required'),\r\n   pilotStartDate: z.date(),\r\n@@ -28,9 +27,11 @@\n   subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n+  const { setClose } = useModal();\r\n   const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n+    mode: 'onChange',\r\n     resolver: zodResolver(WorkflowFormSchema),\r\n     defaultValues: {\r\n       name: '',\r\n       description: '',\r\n@@ -40,16 +41,27 @@\n     },\r\n   });\r\n \r\n   const isLoading = form.formState.isSubmitting;\r\n-  \r\n+  const router = useRouter();\r\n+\r\n   async function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n     try {\r\n+      // Simulate API call\r\n       await new Promise(resolve => setTimeout(resolve, 1000));\r\n       console.log('Form data:', data);\r\n-      form.reset(); // Reset form on successful submission\r\n+      toast({\r\n+        title: \"Form submitted successfully\",\r\n+        description: \"Your workflow has been created.\",\r\n+      });\r\n+      form.reset(); // Reset form after successful submission\r\n     } catch (error) {\r\n       console.error('Error submitting form:', error);\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"There was a problem submitting your form.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n     }\r\n   }\r\n \r\n   return (\r\n@@ -61,26 +73,24 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n+          {/* Ensure form.handleSubmit is used instead of undefined handleSubmit */}\r\n           <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n-\r\n-            {/* Project Name Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n               render={({ field }) => (\r\n                 <FormItem>\r\n                   <FormLabel>Project Name</FormLabel>\r\n                   <FormControl>\r\n-                  <Input {...field} placeholder=\"Project Name\" />\r\n+                    <Input {...field} placeholder=\"Project Name\" />\r\n                   </FormControl>\r\n                   <FormMessage />\r\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Description Field */}\r\n             <FormField\r\n               control={form.control}\r\n               name=\"description\"\r\n               render={({ field }) => (\r\n@@ -109,16 +119,15 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1500]\"  // Add z-index to fix popover visibility\r\n-                      align=\"start\"\r\n-                    >\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => field.onChange(date)}  // Update field when a date is selected\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -145,16 +154,15 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1500]\"  // Add z-index to fix popover visibility\r\n-                      align=\"start\"\r\n-                    >\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => field.onChange(date)}  // Update field on date select\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -181,16 +189,15 @@\n                           <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n                         </Button>\r\n                       </FormControl>\r\n                     </PopoverTrigger>\r\n-                    <PopoverContent\r\n-                      className=\"w-auto p-0 z-[1500]\"  // Ensure visibility with z-index\r\n-                      align=\"start\"\r\n-                    >\r\n+                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                       <Calendar\r\n                         mode=\"single\"\r\n                         selected={field.value}\r\n-                        onSelect={(date) => field.onChange(date)}  // Update on date selection\r\n+                        onSelect={(date) => {\r\n+                          field.onChange(date); // Update field on date selection\r\n+                        }}\r\n                         initialFocus\r\n                         captionLayout=\"dropdown-buttons\"\r\n                         fromYear={2023}\r\n                         toYear={2026}\r\n@@ -201,9 +208,8 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Submit Button */}\r\n             <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n               {isLoading ? (\r\n                 <>\r\n                   <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n@@ -219,4 +225,5 @@\n   );\r\n };\r\n \r\n export default WorkflowForm;\r\n+\r\n"
                },
                {
                    "date": 1727625211742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n   frcDate: z.date(),\r\n });\r\n \r\n type Props = {\r\n+  subTitle?: string;\r\n   title?: string;\r\n-  subTitle?: string;\r\n };\r\n \r\n const WorkflowForm = ({ subTitle, title }: Props) => {\r\n   const { setClose } = useModal();\r\n@@ -45,16 +45,15 @@\n   const router = useRouter();\r\n \r\n   async function onSubmit(data: z.infer<typeof WorkflowFormSchema>) {\r\n     try {\r\n-      // Simulate API call\r\n       await new Promise(resolve => setTimeout(resolve, 1000));\r\n       console.log('Form data:', data);\r\n       toast({\r\n         title: \"Form submitted successfully\",\r\n         description: \"Your workflow has been created.\",\r\n       });\r\n-      form.reset(); // Reset form after successful submission\r\n+      form.reset();\r\n     } catch (error) {\r\n       console.error('Error submitting form:', error);\r\n       toast({\r\n         title: \"Error\",\r\n@@ -63,8 +62,75 @@\n       });\r\n     }\r\n   }\r\n \r\n+  const DatePicker = ({ name, label }: { name: 'pilotStartDate' | 'pilotEndDate' | 'frcDate', label: string }) => {\r\n+    const [isOpen, setIsOpen] = useState(false);\r\n+    const calendarRef = useRef<HTMLDivElement>(null);\r\n+    const buttonRef = useRef<HTMLButtonElement>(null);\r\n+\r\n+    useEffect(() => {\r\n+      function handleClickOutside(event: MouseEvent) {\r\n+        if (\r\n+          calendarRef.current &&\r\n+          !calendarRef.current.contains(event.target as Node) &&\r\n+          buttonRef.current &&\r\n+          !buttonRef.current.contains(event.target as Node)\r\n+        ) {\r\n+          setIsOpen(false);\r\n+        }\r\n+      }\r\n+      document.addEventListener('mousedown', handleClickOutside);\r\n+      return () => {\r\n+        document.removeEventListener('mousedown', handleClickOutside);\r\n+      };\r\n+    }, []);\r\n+\r\n+    return (\r\n+      <FormField\r\n+        control={form.control}\r\n+        name={name}\r\n+        render={({ field }) => (\r\n+          <FormItem className=\"flex flex-col\">\r\n+            <FormLabel>{label}</FormLabel>\r\n+            <div className=\"relative\">\r\n+              <Button\r\n+                ref={buttonRef}\r\n+                type=\"button\"\r\n+                variant=\"outline\"\r\n+                className=\"w-full justify-start text-left font-normal\"\r\n+                onClick={() => setIsOpen(!isOpen)}\r\n+              >\r\n+                {field.value ? format(field.value, 'PPP') : <span>Pick a date</span>}\r\n+                <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n+              </Button>\r\n+              {isOpen && (\r\n+                <div\r\n+                  ref={calendarRef}\r\n+                  className=\"absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-md shadow-lg z-50\"\r\n+                >\r\n+                  <Calendar\r\n+                    mode=\"single\"\r\n+                    selected={field.value}\r\n+                    onSelect={(date) => {\r\n+                      field.onChange(date);\r\n+                      setIsOpen(false);\r\n+                    }}\r\n+                    initialFocus\r\n+                    captionLayout=\"dropdown-buttons\"\r\n+                    fromYear={2023}\r\n+                    toYear={2026}\r\n+                  />\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+            <FormMessage />\r\n+          </FormItem>\r\n+        )}\r\n+      />\r\n+    );\r\n+  };\r\n+\r\n   return (\r\n     <Card className=\"w-full max-w-[650px] border-none\">\r\n       {title && subTitle && (\r\n         <CardHeader>\r\n@@ -73,9 +139,8 @@\n         </CardHeader>\r\n       )}\r\n       <CardContent>\r\n         <Form {...form}>\r\n-          {/* Ensure form.handleSubmit is used instead of undefined handleSubmit */}\r\n           <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col gap-4 text-left\">\r\n             <FormField\r\n               control={form.control}\r\n               name=\"name\"\r\n@@ -103,127 +168,19 @@\n                 </FormItem>\r\n               )}\r\n             />\r\n \r\n-            {/* Pilot Start Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotStartDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot Start Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n+            <DatePicker name=\"pilotStartDate\" label=\"Pilot Start Date\" />\r\n+            <DatePicker name=\"pilotEndDate\" label=\"Pilot End Date\" />\r\n+            <DatePicker name=\"frcDate\" label=\"FRC Date\" />\r\n \r\n-            {/* Pilot End Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"pilotEndDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>Pilot End Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            {/* FRC Date */}\r\n-            <FormField\r\n-              control={form.control}\r\n-              name=\"frcDate\"\r\n-              render={({ field }) => (\r\n-                <FormItem>\r\n-                  <FormLabel>FRC Date</FormLabel>\r\n-                  <Popover>\r\n-                    <PopoverTrigger asChild>\r\n-                      <FormControl>\r\n-                        <Button variant=\"outline\" className=\"w-full text-left\">\r\n-                          {field.value ? format(field.value, 'PPP') : 'Pick a date'}\r\n-                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\r\n-                        </Button>\r\n-                      </FormControl>\r\n-                    </PopoverTrigger>\r\n-                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n-                      <Calendar\r\n-                        mode=\"single\"\r\n-                        selected={field.value}\r\n-                        onSelect={(date) => {\r\n-                          field.onChange(date); // Update field on date selection\r\n-                        }}\r\n-                        initialFocus\r\n-                        captionLayout=\"dropdown-buttons\"\r\n-                        fromYear={2023}\r\n-                        toYear={2026}\r\n-                      />\r\n-                    </PopoverContent>\r\n-                  </Popover>\r\n-                  <FormMessage />\r\n-                </FormItem>\r\n-              )}\r\n-            />\r\n-\r\n-            <Button className=\"mt-4\" disabled={isLoading} type=\"submit\">\r\n-              {isLoading ? (\r\n-                <>\r\n-                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n-                </>\r\n-              ) : (\r\n-                'Save Settings'\r\n-              )}\r\n+            <Button type=\"submit\" disabled={isLoading}>\r\n+              {isLoading ? 'Submitting...' : 'Submit'}\r\n             </Button>\r\n           </form>\r\n         </Form>\r\n       </CardContent>\r\n     </Card>\r\n   );\r\n };\r\n \r\n-export default WorkflowForm;\r\n-\r\n+export default WorkflowForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727625254414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\n import { Input } from '@/components/ui/input';\r\n import { useModal } from '@/providers/modal-provider';\r\n import { toast } from '@/hooks/use-toast';\r\n+import { useEffect, useRef, useState } from 'react';\r\n \r\n // Define the schema outside the component\r\n const WorkflowFormSchema = z.object({\r\n   name: z.string().min(1, 'Required'),\r\n"
                },
                {
                    "date": 1727872381350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n   const DatePicker = ({ name, label }: { name: 'pilotStartDate' | 'pilotEndDate' | 'frcDate', label: string }) => {\r\n     const [isOpen, setIsOpen] = useState(false);\r\n     const calendarRef = useRef<HTMLDivElement>(null);\r\n     const buttonRef = useRef<HTMLButtonElement>(null);\r\n-\r\n+  \r\n     useEffect(() => {\r\n       function handleClickOutside(event: MouseEvent) {\r\n         if (\r\n           calendarRef.current &&\r\n@@ -84,9 +84,9 @@\n       return () => {\r\n         document.removeEventListener('mousedown', handleClickOutside);\r\n       };\r\n     }, []);\r\n-\r\n+  \r\n     return (\r\n       <FormField\r\n         control={form.control}\r\n         name={name}\r\n"
                }
            ],
            "date": 1727003985932,
            "name": "Commit-0",
            "content": "import { WorkflowFormSchema } from '@/lib/type'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport { useRouter } from 'next/navigation'\r\nimport React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { z } from 'zod'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '../ui/card'\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '../ui/form'\r\nimport { Input } from '../ui/input'\r\nimport { Button } from '../ui/button'\r\nimport { Loader2 } from 'lucide-react'\r\n// import { toast } from 'sonner'\r\n// import { onCreateWorkflow } from '@/app/(main)/(pages)/workflows/_actions/workflow-connections'\r\nimport { useModal } from '@/providers/modal-provider'\r\n\r\ntype Props = {\r\n  title?: string\r\n  subTitle?: string\r\n}\r\n\r\nconst Workflowform = ({ subTitle, title }: Props) => {\r\n  const { setClose } = useModal()\r\n  const form = useForm<z.infer<typeof WorkflowFormSchema>>({\r\n    mode: 'onChange',\r\n    resolver: zodResolver(WorkflowFormSchema),\r\n    defaultValues: {\r\n      name: '',\r\n      description: '',\r\n    },\r\n  })\r\n\r\n  const isLoading = form.formState.isLoading\r\n  const router = useRouter()\r\n\r\n  // const handleSubmit = async (values: z.infer<typeof WorkflowFormSchema>) => {\r\n  //   const workflow = await onCreateWorkflow(values.name, values.description)\r\n  //   if (workflow) {\r\n  //     toast.message(workflow.message)\r\n  //     router.refresh()\r\n  //   }\r\n  //   setClose()\r\n  // }\r\n  const handleSubmit = () => {}\r\n\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-[650px] border-none\">\r\n      {title && subTitle && (\r\n        <CardHeader>\r\n          <CardTitle>{title}</CardTitle>\r\n          <CardDescription>{subTitle}</CardDescription>\r\n        </CardHeader>\r\n      )}\r\n      <CardContent>\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(handleSubmit)}\r\n            className=\"flex flex-col gap-4 text-left\"\r\n          >\r\n            <FormField\r\n              disabled={isLoading}\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"Name\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              disabled={isLoading}\r\n              control={form.control}\r\n              name=\"description\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Description</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Description\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <Button\r\n              className=\"mt-4\"\r\n              disabled={isLoading}\r\n              type=\"submit\"\r\n            >\r\n              {isLoading ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Saving\r\n                </>\r\n              ) : (\r\n                'Save Settings'\r\n              )}\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Workflowform"
        }
    ]
}