{
    "sourceFile": "src/components/forms/profile-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1716727642005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722050387199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,56 @@\n 'use client'\r\n \r\n-import React, { useState } from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { z } from 'zod';\r\n+import React, { use, useEffect, useState } from 'react'\r\n+import { useForm } from 'react-hook-form'\r\n+import { zodResolver } from '@hookform/resolvers/zod'\r\n+import { z } from 'zod'\r\n+import { EditUserProfileSchema } from '@/lib/type'\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n-} from '../ui/form';\r\n-import { Input } from '../ui/input';\r\n+} from '../ui/form'\r\n+import { Input } from '../ui/input'\r\n import { Button } from '../ui/button'\r\n import { Loader2 } from 'lucide-react'\r\n-import { EditUserProfileSchema } from '@/lib/type';\r\n \r\n+type Props = {\r\n+  user: any\r\n+  onUpdate?: any\r\n+}\r\n \r\n-type Props = {}\r\n-\r\n-const ProfileForm = (props: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n+const ProfileForm = ({ user, onUpdate }: Props) => {\r\n+  const [isLoading, setIsLoading] = useState(false)\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: \"\",\r\n-      email: \"\",\r\n+      name: user.name,\r\n+      email: user.email,\r\n     },\r\n-  });\r\n+  })\r\n \r\n-  // const handleSubmit = (data: any) => {\r\n-  //   // Handle form submission here\r\n-  // };\r\n+  const handleSubmit = async (\r\n+    values: z.infer<typeof EditUserProfileSchema>\r\n+  ) => {\r\n+    setIsLoading(true)\r\n+    await onUpdate(values.name)\r\n+    setIsLoading(false)\r\n+  }\r\n \r\n+  useEffect(() => {\r\n+    form.reset({ name: user.name, email: user.email })\r\n+  }, [user])\r\n+\r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n         className=\"flex flex-col gap-6\"\r\n-        // onSubmit={form.handleSubmit(handleSubmit)}\r\n-        onSubmit={()=>{}}\r\n+        onSubmit={form.handleSubmit(handleSubmit)}\r\n       >\r\n         <FormField\r\n           disabled={isLoading}\r\n           control={form.control}\r\n@@ -54,23 +63,22 @@\n                   {...field}\r\n                   placeholder=\"Name\"\r\n                 />\r\n               </FormControl>\r\n-              <FormMessage/>\r\n+              <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n         <FormField\r\n-          disabled={isLoading}\r\n           control={form.control}\r\n           name=\"email\"\r\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">Email</FormLabel>\r\n               <FormControl>\r\n                 <Input\r\n                   {...field}\r\n-                  disabled={false}\r\n+                  disabled={true}\r\n                   placeholder=\"Email\"\r\n                   type=\"email\"\r\n                 />\r\n               </FormControl>\r\n@@ -95,5 +103,5 @@\n     </Form>\r\n   )\r\n }\r\n \r\n-export default ProfileForm\r\n+export default ProfileForm\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722050972327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client'\r\n \r\n-import React, { use, useEffect, useState } from 'react'\r\n+import React, { useEffect, useState } from 'react'\r\n import { useForm } from 'react-hook-form'\r\n import { zodResolver } from '@hookform/resolvers/zod'\r\n import { z } from 'zod'\r\n import { EditUserProfileSchema } from '@/lib/type'\r\n@@ -27,10 +27,10 @@\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: user.name,\r\n-      email: user.email,\r\n+      name: user?.name || '',\r\n+      email: user?.email || '',\r\n     },\r\n   })\r\n \r\n   const handleSubmit = async (\r\n@@ -41,9 +41,9 @@\n     setIsLoading(false)\r\n   }\r\n \r\n   useEffect(() => {\r\n-    form.reset({ name: user.name, email: user.email })\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n   }, [user])\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -103,5 +103,5 @@\n     </Form>\r\n   )\r\n }\r\n \r\n-export default ProfileForm\n\\ No newline at end of file\n+export default ProfileForm\r\n"
                },
                {
                    "date": 1722341435388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,55 @@\n-'use client'\r\n+'use client';\r\n \r\n-import React, { useEffect, useState } from 'react'\r\n-import { useForm } from 'react-hook-form'\r\n-import { zodResolver } from '@hookform/resolvers/zod'\r\n-import { z } from 'zod'\r\n-import { EditUserProfileSchema } from '@/lib/type'\r\n+import React, { useEffect, useState } from 'react';\r\n+import { useForm } from 'react-hook-form';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { z } from 'zod';\r\n+import { EditUserProfileSchema } from '@/lib/type';\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n-} from '../ui/form'\r\n-import { Input } from '../ui/input'\r\n-import { Button } from '../ui/button'\r\n-import { Loader2 } from 'lucide-react'\r\n+} from '../ui/form';\r\n+import { Input } from '../ui/input';\r\n+import { Button } from '../ui/button';\r\n+import { Loader2 } from 'lucide-react';\r\n \r\n type Props = {\r\n-  user: any\r\n-  onUpdate?: any\r\n-}\r\n+  user: any;\r\n+  onUpdate?: (name: string) => Promise<void>;\r\n+};\r\n \r\n const ProfileForm = ({ user, onUpdate }: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false)\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+\r\n+  // Initialize form with user data\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n       name: user?.name || '',\r\n       email: user?.email || '',\r\n     },\r\n-  })\r\n+  });\r\n \r\n-  const handleSubmit = async (\r\n-    values: z.infer<typeof EditUserProfileSchema>\r\n-  ) => {\r\n-    setIsLoading(true)\r\n-    await onUpdate(values.name)\r\n-    setIsLoading(false)\r\n-  }\r\n+  // Handle form submission\r\n+  const handleSubmit = async (values: z.infer<typeof EditUserProfileSchema>) => {\r\n+    setIsLoading(true);\r\n+    try {\r\n+      await onUpdate(values.name);\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  };\r\n \r\n+  // Update form fields when user prop changes\r\n   useEffect(() => {\r\n-    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n-  }, [user])\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' });\r\n+  }, [user]);\r\n \r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n@@ -58,12 +63,9 @@\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n               <FormControl>\r\n-                <Input\r\n-                  {...field}\r\n-                  placeholder=\"Name\"\r\n-                />\r\n+                <Input {...field} placeholder=\"Name\" />\r\n               </FormControl>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n@@ -74,22 +76,18 @@\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">Email</FormLabel>\r\n               <FormControl>\r\n-                <Input\r\n-                  {...field}\r\n-                  disabled={true}\r\n-                  placeholder=\"Email\"\r\n-                  type=\"email\"\r\n-                />\r\n+                <Input {...field} disabled={true} placeholder=\"Email\" type=\"email\" />\r\n               </FormControl>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n         <Button\r\n           type=\"submit\"\r\n-          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n+          className=\"self-start hover:bg-[#2F006B] hover:text-white\"\r\n+          disabled={isLoading}\r\n         >\r\n           {isLoading ? (\r\n             <>\r\n               <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n@@ -100,8 +98,8 @@\n           )}\r\n         </Button>\r\n       </form>\r\n     </Form>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n-export default ProfileForm\r\n+export default ProfileForm;\r\n"
                },
                {
                    "date": 1722341842369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,50 @@\n-'use client';\r\n+'use client'\r\n \r\n-import React, { useEffect, useState } from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { z } from 'zod';\r\n-import { EditUserProfileSchema } from '@/lib/type';\r\n+import React, { useEffect, useState } from 'react'\r\n+import { useForm } from 'react-hook-form'\r\n+import { zodResolver } from '@hookform/resolvers/zod'\r\n+import { z } from 'zod'\r\n+import { EditUserProfileSchema } from '@/lib/type'\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n-} from '../ui/form';\r\n-import { Input } from '../ui/input';\r\n-import { Button } from '../ui/button';\r\n-import { Loader2 } from 'lucide-react';\r\n+} from '../ui/form'\r\n+import { Input } from '../ui/input'\r\n+import { Button } from '../ui/button'\r\n+import { Loader2 } from 'lucide-react'\r\n \r\n type Props = {\r\n-  user: any;\r\n-  onUpdate?: (name: string) => Promise<void>;\r\n-};\r\n+  user: any\r\n+  onUpdate?: any\r\n+}\r\n \r\n const ProfileForm = ({ user, onUpdate }: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-\r\n-  // Initialize form with user data\r\n+  const [isLoading, setIsLoading] = useState(false)\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n       name: user?.name || '',\r\n       email: user?.email || '',\r\n     },\r\n-  });\r\n+  })\r\n \r\n-  // Handle form submission\r\n-  const handleSubmit = async (values: z.infer<typeof EditUserProfileSchema>) => {\r\n-    setIsLoading(true);\r\n-    try {\r\n-      await onUpdate(values.name);\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n-  };\r\n+  const handleSubmit = async (\r\n+    values: z.infer<typeof EditUserProfileSchema>\r\n+  ) => {\r\n+    setIsLoading(true)\r\n+    await onUpdate(values.name)\r\n+    setIsLoading(false)\r\n+  }\r\n \r\n-  // Update form fields when user prop changes\r\n   useEffect(() => {\r\n-    form.reset({ name: user?.name || '', email: user?.email || '' });\r\n-  }, [user]);\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+  }, [user])\r\n \r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n@@ -63,9 +58,12 @@\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n               <FormControl>\r\n-                <Input {...field} placeholder=\"Name\" />\r\n+                <Input\r\n+                  {...field}\r\n+                  placeholder=\"Name\"\r\n+                />\r\n               </FormControl>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n@@ -76,18 +74,22 @@\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">Email</FormLabel>\r\n               <FormControl>\r\n-                <Input {...field} disabled={true} placeholder=\"Email\" type=\"email\" />\r\n+                <Input\r\n+                  {...field}\r\n+                  disabled={true}\r\n+                  placeholder=\"Email\"\r\n+                  type=\"email\"\r\n+                />\r\n               </FormControl>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n         <Button\r\n           type=\"submit\"\r\n-          className=\"self-start hover:bg-[#2F006B] hover:text-white\"\r\n-          disabled={isLoading}\r\n+          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n         >\r\n           {isLoading ? (\r\n             <>\r\n               <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n@@ -98,8 +100,8 @@\n           )}\r\n         </Button>\r\n       </form>\r\n     </Form>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n-export default ProfileForm;\r\n+export default ProfileForm\r\n"
                },
                {
                    "date": 1722343050028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client'\r\n \r\n-import React, { useEffect, useState } from 'react'\r\n+import React, { use, useEffect, useState } from 'react'\r\n import { useForm } from 'react-hook-form'\r\n import { zodResolver } from '@hookform/resolvers/zod'\r\n import { z } from 'zod'\r\n import { EditUserProfileSchema } from '@/lib/type'\r\n@@ -27,10 +27,10 @@\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: user?.name || '',\r\n-      email: user?.email || '',\r\n+      name: user.name,\r\n+      email: user.email,\r\n     },\r\n   })\r\n \r\n   const handleSubmit = async (\r\n@@ -41,9 +41,9 @@\n     setIsLoading(false)\r\n   }\r\n \r\n   useEffect(() => {\r\n-    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+    form.reset({ name: user.name, email: user.email })\r\n   }, [user])\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -103,5 +103,5 @@\n     </Form>\r\n   )\r\n }\r\n \r\n-export default ProfileForm\r\n+export default ProfileForm\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722343201940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,10 @@\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: user.name,\r\n-      email: user.email,\r\n+      name: user?.name || '',\r\n+      email: user?.email || '',\r\n     },\r\n   })\r\n \r\n   const handleSubmit = async (\r\n"
                },
                {
                    "date": 1722344195769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client'\r\n \r\n-import React, { use, useEffect, useState } from 'react'\r\n+import React, { useEffect, useState } from 'react'\r\n import { useForm } from 'react-hook-form'\r\n import { zodResolver } from '@hookform/resolvers/zod'\r\n import { z } from 'zod'\r\n import { EditUserProfileSchema } from '@/lib/type'\r\n@@ -41,9 +41,9 @@\n     setIsLoading(false)\r\n   }\r\n \r\n   useEffect(() => {\r\n-    form.reset({ name: user.name, email: user.email })\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n   }, [user])\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -103,5 +103,5 @@\n     </Form>\r\n   )\r\n }\r\n \r\n-export default ProfileForm\n\\ No newline at end of file\n+export default ProfileForm\r\n"
                },
                {
                    "date": 1722344276671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,47 @@\n 'use client'\r\n \r\n-import React, { useEffect, useState } from 'react'\r\n-import { useForm } from 'react-hook-form'\r\n-import { zodResolver } from '@hookform/resolvers/zod'\r\n-import { z } from 'zod'\r\n-import { EditUserProfileSchema } from '@/lib/type'\r\n+import React, { useState } from 'react';\r\n+import { useForm } from 'react-hook-form';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { z } from 'zod';\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n-} from '../ui/form'\r\n-import { Input } from '../ui/input'\r\n+} from '../ui/form';\r\n+import { Input } from '../ui/input';\r\n import { Button } from '../ui/button'\r\n import { Loader2 } from 'lucide-react'\r\n+import { EditUserProfileSchema } from '@/lib/type';\r\n \r\n-type Props = {\r\n-  user: any\r\n-  onUpdate?: any\r\n-}\r\n \r\n-const ProfileForm = ({ user, onUpdate }: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false)\r\n+type Props = {}\r\n+\r\n+const ProfileForm = (props: Props) => {\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: user?.name || '',\r\n-      email: user?.email || '',\r\n+      name: \"\",\r\n+      email: \"\",\r\n     },\r\n-  })\r\n+  });\r\n \r\n-  const handleSubmit = async (\r\n-    values: z.infer<typeof EditUserProfileSchema>\r\n-  ) => {\r\n-    setIsLoading(true)\r\n-    await onUpdate(values.name)\r\n-    setIsLoading(false)\r\n-  }\r\n+  // const handleSubmit = (data: any) => {\r\n+  //   // Handle form submission here\r\n+  // };\r\n \r\n-  useEffect(() => {\r\n-    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n-  }, [user])\r\n-\r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n         className=\"flex flex-col gap-6\"\r\n-        onSubmit={form.handleSubmit(handleSubmit)}\r\n+        // onSubmit={form.handleSubmit(handleSubmit)}\r\n+        onSubmit={()=>{}}\r\n       >\r\n         <FormField\r\n           disabled={isLoading}\r\n           control={form.control}\r\n@@ -63,22 +54,23 @@\n                   {...field}\r\n                   placeholder=\"Name\"\r\n                 />\r\n               </FormControl>\r\n-              <FormMessage />\r\n+              <FormMessage/>\r\n             </FormItem>\r\n           )}\r\n         />\r\n         <FormField\r\n+          disabled={isLoading}\r\n           control={form.control}\r\n           name=\"email\"\r\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">Email</FormLabel>\r\n               <FormControl>\r\n                 <Input\r\n                   {...field}\r\n-                  disabled={true}\r\n+                  disabled={false}\r\n                   placeholder=\"Email\"\r\n                   type=\"email\"\r\n                 />\r\n               </FormControl>\r\n@@ -103,5 +95,5 @@\n     </Form>\r\n   )\r\n }\r\n \r\n-export default ProfileForm\r\n+export default ProfileForm\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722344366524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,56 @@\n 'use client'\r\n \r\n-import React, { useState } from 'react';\r\n-import { useForm } from 'react-hook-form';\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { z } from 'zod';\r\n+import React, { useEffect, useState } from 'react'\r\n+import { useForm } from 'react-hook-form'\r\n+import { zodResolver } from '@hookform/resolvers/zod'\r\n+import { z } from 'zod'\r\n+import { EditUserProfileSchema } from '@/lib/type'\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n-} from '../ui/form';\r\n-import { Input } from '../ui/input';\r\n+} from '../ui/form'\r\n+import { Input } from '../ui/input'\r\n import { Button } from '../ui/button'\r\n import { Loader2 } from 'lucide-react'\r\n-import { EditUserProfileSchema } from '@/lib/type';\r\n \r\n+type Props = {\r\n+  user: any\r\n+  onUpdate?: any\r\n+}\r\n \r\n-type Props = {}\r\n-\r\n-const ProfileForm = (props: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n+const ProfileForm = ({ user, onUpdate }: Props) => {\r\n+  const [isLoading, setIsLoading] = useState(false)\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: \"\",\r\n-      email: \"\",\r\n+      name: user?.name || '',\r\n+      email: user?.email || '',\r\n     },\r\n-  });\r\n+  })\r\n \r\n-  // const handleSubmit = (data: any) => {\r\n-  //   // Handle form submission here\r\n-  // };\r\n+  const handleSubmit = async (\r\n+    values: z.infer<typeof EditUserProfileSchema>\r\n+  ) => {\r\n+    setIsLoading(true)\r\n+    await onUpdate(values.name)\r\n+    setIsLoading(false)\r\n+  }\r\n \r\n+  useEffect(() => {\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+  }, [user])\r\n+\r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n         className=\"flex flex-col gap-6\"\r\n-        // onSubmit={form.handleSubmit(handleSubmit)}\r\n-        onSubmit={()=>{}}\r\n+        onSubmit={form.handleSubmit(handleSubmit)}\r\n       >\r\n         <FormField\r\n           disabled={isLoading}\r\n           control={form.control}\r\n@@ -54,23 +63,22 @@\n                   {...field}\r\n                   placeholder=\"Name\"\r\n                 />\r\n               </FormControl>\r\n-              <FormMessage/>\r\n+              <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n         <FormField\r\n-          disabled={isLoading}\r\n           control={form.control}\r\n           name=\"email\"\r\n           render={({ field }) => (\r\n             <FormItem>\r\n               <FormLabel className=\"text-lg\">Email</FormLabel>\r\n               <FormControl>\r\n                 <Input\r\n                   {...field}\r\n-                  disabled={false}\r\n+                  disabled={true}\r\n                   placeholder=\"Email\"\r\n                   type=\"email\"\r\n                 />\r\n               </FormControl>\r\n@@ -95,5 +103,5 @@\n     </Form>\r\n   )\r\n }\r\n \r\n-export default ProfileForm\n\\ No newline at end of file\n+export default ProfileForm\r\n"
                },
                {
                    "date": 1722345526378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,40 +17,43 @@\n import { Button } from '../ui/button'\r\n import { Loader2 } from 'lucide-react'\r\n \r\n type Props = {\r\n-  user: any\r\n-  onUpdate?: any\r\n+  // user: any\r\n+  // onUpdate?: any\r\n }\r\n-\r\n-const ProfileForm = ({ user, onUpdate }: Props) => {\r\n+const ProfileForm = (props: Props) => {\r\n+// const ProfileForm = ({ user, onUpdate }: Props) => {\r\n   const [isLoading, setIsLoading] = useState(false)\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      name: user?.name || '',\r\n-      email: user?.email || '',\r\n+      // name: user?.name || '',\r\n+      // email: user?.email || '',\r\n+      name:'',\r\n+      email:'',\r\n     },\r\n   })\r\n \r\n-  const handleSubmit = async (\r\n-    values: z.infer<typeof EditUserProfileSchema>\r\n-  ) => {\r\n-    setIsLoading(true)\r\n-    await onUpdate(values.name)\r\n-    setIsLoading(false)\r\n-  }\r\n+  // const handleSubmit = async (\r\n+  //   values: z.infer<typeof EditUserProfileSchema>\r\n+  // ) => {\r\n+  //   setIsLoading(true)\r\n+  //   await onUpdate(values.name)\r\n+  //   setIsLoading(false)\r\n+  // }\r\n \r\n-  useEffect(() => {\r\n-    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n-  }, [user])\r\n+  // useEffect(() => {\r\n+  //   form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+  // }, [user])\r\n \r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n         className=\"flex flex-col gap-6\"\r\n-        onSubmit={form.handleSubmit(handleSubmit)}\r\n+        // onSubmit={form.handleSubmit(handleSubmit)}\r\n+        onSubmit={()=>{}}\r\n       >\r\n         <FormField\r\n           disabled={isLoading}\r\n           control={form.control}\r\n"
                },
                {
                    "date": 1722353412907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n       // name: user?.name || '',\r\n       // email: user?.email || '',\r\n-      name:'',\r\n-      email:'',\r\n+       name: '',\r\n+       email: '',\r\n     },\r\n   })\r\n \r\n   // const handleSubmit = async (\r\n"
                },
                {
                    "date": 1725197550709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,13 @@\n import { Button } from '../ui/button'\r\n import { Loader2 } from 'lucide-react'\r\n \r\n type Props = {\r\n-  // user: any\r\n-  // onUpdate?: any\r\n+  user: any\r\n+  onUpdate?: any\r\n }\r\n-const ProfileForm = (props: Props) => {\r\n-// const ProfileForm = ({ user, onUpdate }: Props) => {\r\n+// const ProfileForm = (props: Props) => {\r\n+const ProfileForm = ({ user, onUpdate }: Props) => {\r\n   const [isLoading, setIsLoading] = useState(false)\r\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n"
                },
                {
                    "date": 1725239897093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,12 @@\n   const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n     mode: 'onChange',\r\n     resolver: zodResolver(EditUserProfileSchema),\r\n     defaultValues: {\r\n-      // name: user?.name || '',\r\n-      // email: user?.email || '',\r\n-       name: '',\r\n-       email: '',\r\n+      name: user?.name || '',\r\n+      email: user?.email || '',\r\n+      //  name: '',\r\n+      //  email: '',\r\n     },\r\n   })\r\n \r\n   // const handleSubmit = async (\r\n@@ -46,14 +46,29 @@\n   // useEffect(() => {\r\n   //   form.reset({ name: user?.name || '', email: user?.email || '' })\r\n   // }, [user])\r\n \r\n+    const handleSubmit = async (\r\n+    values: z.infer<typeof EditUserProfileSchema>\r\n+  ) => {\r\n+    setIsLoading(true)\r\n+    await onUpdate(values.name)\r\n+    setIsLoading(false)\r\n+  }\r\n+\r\n+  // useEffect(() => {\r\n+  //   form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+  // }, [user])\r\n+  useEffect(() => {\r\n+    form.reset({ name: user.name, email: user.email })\r\n+  }, [user])\r\n+  \r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n         className=\"flex flex-col gap-6\"\r\n-        // onSubmit={form.handleSubmit(handleSubmit)}\r\n-        onSubmit={()=>{}}\r\n+        onSubmit={form.handleSubmit(handleSubmit)}\r\n+        // onSubmit={()=>{}}\r\n       >\r\n         <FormField\r\n           disabled={isLoading}\r\n           control={form.control}\r\n"
                },
                {
                    "date": 1725240244468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,8 @@\n   //   await onUpdate(values.name)\r\n   //   setIsLoading(false)\r\n   // }\r\n \r\n-  // useEffect(() => {\r\n-  //   form.reset({ name: user?.name || '', email: user?.email || '' })\r\n-  // }, [user])\r\n \r\n     const handleSubmit = async (\r\n     values: z.infer<typeof EditUserProfileSchema>\r\n   ) => {\r\n@@ -60,9 +57,9 @@\n   // }, [user])\r\n   useEffect(() => {\r\n     form.reset({ name: user.name, email: user.email })\r\n   }, [user])\r\n-  \r\n+\r\n   return (\r\n     <Form {...form}>\r\n       <form\r\n         className=\"flex flex-col gap-6\"\r\n"
                },
                {
                    "date": 1725245274416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+'use client'\r\n+\r\n+import React, { useEffect, useState } from 'react'\r\n+import { useForm } from 'react-hook-form'\r\n+import { zodResolver } from '@hookform/resolvers/zod'\r\n+import { z } from 'zod'\r\n+import { EditUserProfileSchema } from '@/lib/type'\r\n+import {\r\n+  Form,\r\n+  FormControl,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormMessage,\r\n+} from '../ui/form'\r\n+import { Input } from '../ui/input'\r\n+import { Button } from '../ui/button'\r\n+import { Loader2 } from 'lucide-react'\r\n+\r\n+type Props = {\r\n+  user: any\r\n+  onUpdate?: any\r\n+}\r\n+// const ProfileForm = (props: Props) => {\r\n+const ProfileForm = ({ user, onUpdate }: Props) => {\r\n+  const [isLoading, setIsLoading] = useState(false)\r\n+  const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n+    mode: 'onChange',\r\n+    resolver: zodResolver(EditUserProfileSchema),\r\n+    defaultValues: {\r\n+      name: user?.name || '',\r\n+      email: user?.email || '',\r\n+      //  name: '',\r\n+      //  email: '',\r\n+    },\r\n+  })\r\n+\r\n+  // const handleSubmit = async (\r\n+  //   values: z.infer<typeof EditUserProfileSchema>\r\n+  // ) => {\r\n+  //   setIsLoading(true)\r\n+  //   await onUpdate(values.name)\r\n+  //   setIsLoading(false)\r\n+  // }\r\n+\r\n+\r\n+    const handleSubmit = async (\r\n+    values: z.infer<typeof EditUserProfileSchema>\r\n+  ) => {\r\n+    setIsLoading(true)\r\n+    await onUpdate(values.name)\r\n+    setIsLoading(false)\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+  }, [user])\r\n+  // useEffect(() => {\r\n+  //   form.reset({ name: user.name, email: user.email })\r\n+  // }, [user])\r\n+\r\n+  return (\r\n+    <Form {...form}>\r\n+      <form\r\n+        className=\"flex flex-col gap-6\"\r\n+        onSubmit={form.handleSubmit(handleSubmit)}\r\n+        // onSubmit={()=>{}}\r\n+      >\r\n+        <FormField\r\n+          disabled={isLoading}\r\n+          control={form.control}\r\n+          name=\"name\"\r\n+          render={({ field }) => (\r\n+            <FormItem>\r\n+              <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n+              <FormControl>\r\n+                <Input\r\n+                  {...field}\r\n+                  placeholder=\"Name\"\r\n+                />\r\n+              </FormControl>\r\n+              <FormMessage />\r\n+            </FormItem>\r\n+          )}\r\n+        />\r\n+        <FormField\r\n+          control={form.control}\r\n+          name=\"email\"\r\n+          render={({ field }) => (\r\n+            <FormItem>\r\n+              <FormLabel className=\"text-lg\">Email</FormLabel>\r\n+              <FormControl>\r\n+                <Input\r\n+                  {...field}\r\n+                  disabled={true}\r\n+                  placeholder=\"Email\"\r\n+                  type=\"email\"\r\n+                />\r\n+              </FormControl>\r\n+              <FormMessage />\r\n+            </FormItem>\r\n+          )}\r\n+        />\r\n+        <Button\r\n+          type=\"submit\"\r\n+          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n+        >\r\n+          {isLoading ? (\r\n+            <>\r\n+              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n+              Saving\r\n+            </>\r\n+          ) : (\r\n+            'Save User Settings'\r\n+          )}\r\n+        </Button>\r\n+      </form>\r\n+    </Form>\r\n+  )\r\n+}\r\n+\r\n+export default ProfileForm\r\n"
                },
                {
                    "date": 1725245352324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+'use client'\r\n+\r\n+import React, { useEffect, useState } from 'react'\r\n+import { useForm } from 'react-hook-form'\r\n+import { zodResolver } from '@hookform/resolvers/zod'\r\n+import { z } from 'zod'\r\n+import { EditUserProfileSchema } from '@/lib/type'\r\n+import {\r\n+  Form,\r\n+  FormControl,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormMessage,\r\n+} from '../ui/form'\r\n+import { Input } from '../ui/input'\r\n+import { Button } from '../ui/button'\r\n+import { Loader2 } from 'lucide-react'\r\n+\r\n+type Props = {\r\n+  user: any\r\n+  onUpdate?: any\r\n+}\r\n+// const ProfileForm = (props: Props) => {\r\n+const ProfileForm = ({ user, onUpdate }: Props) => {\r\n+  const [isLoading, setIsLoading] = useState(false)\r\n+  const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n+    mode: 'onChange',\r\n+    resolver: zodResolver(EditUserProfileSchema),\r\n+    defaultValues: {\r\n+      name: user?.name || '',\r\n+      email: user?.email || '',\r\n+      //  name: '',\r\n+      //  email: '',\r\n+    },\r\n+  })\r\n+\r\n+  // const handleSubmit = async (\r\n+  //   values: z.infer<typeof EditUserProfileSchema>\r\n+  // ) => {\r\n+  //   setIsLoading(true)\r\n+  //   await onUpdate(values.name)\r\n+  //   setIsLoading(false)\r\n+  // }\r\n+\r\n+\r\n+    const handleSubmit = async (\r\n+    values: z.infer<typeof EditUserProfileSchema>\r\n+  ) => {\r\n+    setIsLoading(true)\r\n+    await onUpdate(values.name)\r\n+    setIsLoading(false)\r\n+  }\r\n+\r\n+  useEffect(() => {\r\n+    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n+  }, [user])\r\n+  // useEffect(() => {\r\n+  //   form.reset({ name: user.name, email: user.email })\r\n+  // }, [user])\r\n+\r\n+  return (\r\n+    <Form {...form}>\r\n+      <form\r\n+        className=\"flex flex-col gap-6\"\r\n+        onSubmit={form.handleSubmit(handleSubmit)}\r\n+        // onSubmit={()=>{}}\r\n+      >\r\n+        <FormField\r\n+          disabled={isLoading}\r\n+          control={form.control}\r\n+          name=\"name\"\r\n+          render={({ field }) => (\r\n+            <FormItem>\r\n+              <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n+              <FormControl>\r\n+                <Input\r\n+                  {...field}\r\n+                  placeholder=\"Name\"\r\n+                />\r\n+              </FormControl>\r\n+              <FormMessage />\r\n+            </FormItem>\r\n+          )}\r\n+        />\r\n+        <FormField\r\n+          control={form.control}\r\n+          name=\"email\"\r\n+          render={({ field }) => (\r\n+            <FormItem>\r\n+              <FormLabel className=\"text-lg\">Email</FormLabel>\r\n+              <FormControl>\r\n+                <Input\r\n+                  {...field}\r\n+                  disabled={false}\r\n+                  placeholder=\"Email\"\r\n+                  type=\"email\"\r\n+                />\r\n+              </FormControl>\r\n+              <FormMessage />\r\n+            </FormItem>\r\n+          )}\r\n+        />\r\n+        <Button\r\n+          type=\"submit\"\r\n+          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n+        >\r\n+          {isLoading ? (\r\n+            <>\r\n+              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n+              Saving\r\n+            </>\r\n+          ) : (\r\n+            'Save User Settings'\r\n+          )}\r\n+        </Button>\r\n+      </form>\r\n+    </Form>\r\n+  )\r\n+}\r\n+\r\n+export default ProfileForm\r\n"
                },
                {
                    "date": 1741956861955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React, { useEffect, useState } from 'react'\r\n import { useForm } from 'react-hook-form'\r\n import { zodResolver } from '@hookform/resolvers/zod'\r\n import { z } from 'zod'\r\n-import { EditUserProfileSchema } from '@/lib/type'\r\n+import { EditUserProfileSchema } from '@/lib/types'\r\n import {\r\n   Form,\r\n   FormControl,\r\n   FormField,\r\n@@ -119,248 +119,4 @@\n   )\r\n }\r\n \r\n export default ProfileForm\r\n-'use client'\r\n-\r\n-import React, { useEffect, useState } from 'react'\r\n-import { useForm } from 'react-hook-form'\r\n-import { zodResolver } from '@hookform/resolvers/zod'\r\n-import { z } from 'zod'\r\n-import { EditUserProfileSchema } from '@/lib/type'\r\n-import {\r\n-  Form,\r\n-  FormControl,\r\n-  FormField,\r\n-  FormItem,\r\n-  FormLabel,\r\n-  FormMessage,\r\n-} from '../ui/form'\r\n-import { Input } from '../ui/input'\r\n-import { Button } from '../ui/button'\r\n-import { Loader2 } from 'lucide-react'\r\n-\r\n-type Props = {\r\n-  user: any\r\n-  onUpdate?: any\r\n-}\r\n-// const ProfileForm = (props: Props) => {\r\n-const ProfileForm = ({ user, onUpdate }: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false)\r\n-  const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n-    mode: 'onChange',\r\n-    resolver: zodResolver(EditUserProfileSchema),\r\n-    defaultValues: {\r\n-      name: user?.name || '',\r\n-      email: user?.email || '',\r\n-      //  name: '',\r\n-      //  email: '',\r\n-    },\r\n-  })\r\n-\r\n-  // const handleSubmit = async (\r\n-  //   values: z.infer<typeof EditUserProfileSchema>\r\n-  // ) => {\r\n-  //   setIsLoading(true)\r\n-  //   await onUpdate(values.name)\r\n-  //   setIsLoading(false)\r\n-  // }\r\n-\r\n-\r\n-    const handleSubmit = async (\r\n-    values: z.infer<typeof EditUserProfileSchema>\r\n-  ) => {\r\n-    setIsLoading(true)\r\n-    await onUpdate(values.name)\r\n-    setIsLoading(false)\r\n-  }\r\n-\r\n-  useEffect(() => {\r\n-    form.reset({ name: user?.name || '', email: user?.email || '' })\r\n-  }, [user])\r\n-  // useEffect(() => {\r\n-  //   form.reset({ name: user.name, email: user.email })\r\n-  // }, [user])\r\n-\r\n-  return (\r\n-    <Form {...form}>\r\n-      <form\r\n-        className=\"flex flex-col gap-6\"\r\n-        onSubmit={form.handleSubmit(handleSubmit)}\r\n-        // onSubmit={()=>{}}\r\n-      >\r\n-        <FormField\r\n-          disabled={isLoading}\r\n-          control={form.control}\r\n-          name=\"name\"\r\n-          render={({ field }) => (\r\n-            <FormItem>\r\n-              <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n-              <FormControl>\r\n-                <Input\r\n-                  {...field}\r\n-                  placeholder=\"Name\"\r\n-                />\r\n-              </FormControl>\r\n-              <FormMessage />\r\n-            </FormItem>\r\n-          )}\r\n-        />\r\n-        <FormField\r\n-          control={form.control}\r\n-          name=\"email\"\r\n-          render={({ field }) => (\r\n-            <FormItem>\r\n-              <FormLabel className=\"text-lg\">Email</FormLabel>\r\n-              <FormControl>\r\n-                <Input\r\n-                  {...field}\r\n-                  disabled={true}\r\n-                  placeholder=\"Email\"\r\n-                  type=\"email\"\r\n-                />\r\n-              </FormControl>\r\n-              <FormMessage />\r\n-            </FormItem>\r\n-          )}\r\n-        />\r\n-        <Button\r\n-          type=\"submit\"\r\n-          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n-        >\r\n-          {isLoading ? (\r\n-            <>\r\n-              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n-              Saving\r\n-            </>\r\n-          ) : (\r\n-            'Save User Settings'\r\n-          )}\r\n-        </Button>\r\n-      </form>\r\n-    </Form>\r\n-  )\r\n-}\r\n-\r\n-export default ProfileForm\r\n-'use client'\r\n-\r\n-import React, { useEffect, useState } from 'react'\r\n-import { useForm } from 'react-hook-form'\r\n-import { zodResolver } from '@hookform/resolvers/zod'\r\n-import { z } from 'zod'\r\n-import { EditUserProfileSchema } from '@/lib/type'\r\n-import {\r\n-  Form,\r\n-  FormControl,\r\n-  FormField,\r\n-  FormItem,\r\n-  FormLabel,\r\n-  FormMessage,\r\n-} from '../ui/form'\r\n-import { Input } from '../ui/input'\r\n-import { Button } from '../ui/button'\r\n-import { Loader2 } from 'lucide-react'\r\n-\r\n-type Props = {\r\n-  user: any\r\n-  onUpdate?: any\r\n-}\r\n-// const ProfileForm = (props: Props) => {\r\n-const ProfileForm = ({ user, onUpdate }: Props) => {\r\n-  const [isLoading, setIsLoading] = useState(false)\r\n-  const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n-    mode: 'onChange',\r\n-    resolver: zodResolver(EditUserProfileSchema),\r\n-    defaultValues: {\r\n-      name: user?.name || '',\r\n-      email: user?.email || '',\r\n-      //  name: '',\r\n-      //  email: '',\r\n-    },\r\n-  })\r\n-\r\n-  // const handleSubmit = async (\r\n-  //   values: z.infer<typeof EditUserProfileSchema>\r\n-  // ) => {\r\n-  //   setIsLoading(true)\r\n-  //   await onUpdate(values.name)\r\n-  //   setIsLoading(false)\r\n-  // }\r\n-\r\n-\r\n-    const handleSubmit = async (\r\n-    values: z.infer<typeof EditUserProfileSchema>\r\n-  ) => {\r\n-    setIsLoading(true)\r\n-    await onUpdate(values.name)\r\n-    setIsLoading(false)\r\n-  }\r\n-\r\n-  // useEffect(() => {\r\n-  //   form.reset({ name: user?.name || '', email: user?.email || '' })\r\n-  // }, [user])\r\n-  useEffect(() => {\r\n-    form.reset({ name: user.name, email: user.email })\r\n-  }, [user])\r\n-\r\n-  return (\r\n-    <Form {...form}>\r\n-      <form\r\n-        className=\"flex flex-col gap-6\"\r\n-        onSubmit={form.handleSubmit(handleSubmit)}\r\n-        // onSubmit={()=>{}}\r\n-      >\r\n-        <FormField\r\n-          disabled={isLoading}\r\n-          control={form.control}\r\n-          name=\"name\"\r\n-          render={({ field }) => (\r\n-            <FormItem>\r\n-              <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n-              <FormControl>\r\n-                <Input\r\n-                  {...field}\r\n-                  placeholder=\"Name\"\r\n-                />\r\n-              </FormControl>\r\n-              <FormMessage />\r\n-            </FormItem>\r\n-          )}\r\n-        />\r\n-        <FormField\r\n-          control={form.control}\r\n-          name=\"email\"\r\n-          render={({ field }) => (\r\n-            <FormItem>\r\n-              <FormLabel className=\"text-lg\">Email</FormLabel>\r\n-              <FormControl>\r\n-                <Input\r\n-                  {...field}\r\n-                  disabled={true}\r\n-                  placeholder=\"Email\"\r\n-                  type=\"email\"\r\n-                />\r\n-              </FormControl>\r\n-              <FormMessage />\r\n-            </FormItem>\r\n-          )}\r\n-        />\r\n-        <Button\r\n-          type=\"submit\"\r\n-          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n-        >\r\n-          {isLoading ? (\r\n-            <>\r\n-              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n-              Saving\r\n-            </>\r\n-          ) : (\r\n-            'Save User Settings'\r\n-          )}\r\n-        </Button>\r\n-      </form>\r\n-    </Form>\r\n-  )\r\n-}\r\n-\r\n-export default ProfileForm\r\n"
                }
            ],
            "date": 1716727642005,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '../ui/form';\r\nimport { Input } from '../ui/input';\r\nimport { Button } from '../ui/button'\r\nimport { Loader2 } from 'lucide-react'\r\nimport { EditUserProfileSchema } from '@/lib/type';\r\n\r\n\r\ntype Props = {}\r\n\r\nconst ProfileForm = (props: Props) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const form = useForm<z.infer<typeof EditUserProfileSchema>>({\r\n    mode: 'onChange',\r\n    resolver: zodResolver(EditUserProfileSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n    },\r\n  });\r\n\r\n  // const handleSubmit = (data: any) => {\r\n  //   // Handle form submission here\r\n  // };\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form\r\n        className=\"flex flex-col gap-6\"\r\n        // onSubmit={form.handleSubmit(handleSubmit)}\r\n        onSubmit={()=>{}}\r\n      >\r\n        <FormField\r\n          disabled={isLoading}\r\n          control={form.control}\r\n          name=\"name\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className=\"text-lg\">User full name</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  {...field}\r\n                  placeholder=\"Name\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage/>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <FormField\r\n          disabled={isLoading}\r\n          control={form.control}\r\n          name=\"email\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel className=\"text-lg\">Email</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  {...field}\r\n                  disabled={false}\r\n                  placeholder=\"Email\"\r\n                  type=\"email\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"self-start hover:bg-[#2F006B] hover:text-white \"\r\n        >\r\n          {isLoading ? (\r\n            <>\r\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n              Saving\r\n            </>\r\n          ) : (\r\n            'Save User Settings'\r\n          )}\r\n        </Button>\r\n      </form>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default ProfileForm\r\n"
        }
    ]
}