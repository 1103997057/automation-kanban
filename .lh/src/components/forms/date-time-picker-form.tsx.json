{
    "sourceFile": "src/components/forms/date-time-picker-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1727590726873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727591765455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n 'use client';\r\n \r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { date, z } from 'zod';\r\n+import { z } from 'zod';\r\n import {\r\n   Form,\r\n-  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -19,68 +18,88 @@\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n \r\n const formSchema = z.object({\r\n-  dateTime: z.date(),\r\n+  dateTime: z.date().nullable(), // Handle nullable dates\r\n });\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      dateTime: null, // Ensure default value is null\r\n+    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n-    console.log(values);\r\n+    console.log('Form submitted with: ', values);\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n         <FormField\r\n           control={form.control}\r\n-          name='dateTime'\r\n+          name=\"dateTime\"\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col items-start'>\r\n-              <FormLabel>DateTime</FormLabel>\r\n-              {/* popover */}\r\n+            <FormItem className=\"flex flex-col items-start\">\r\n+              <FormLabel>Select Date and Time</FormLabel>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n-                    variant={'outline'}\r\n+                    variant=\"outline\"\r\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n                   >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date</span>\r\n+                      <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0'>\r\n+                <PopoverContent className=\"w-auto p-0\">\r\n                   <Calendar\r\n-                    mode='single'\r\n-                    selected={field.value}\r\n-                    onSelect={field.onChange}\r\n+                    mode=\"single\"\r\n+                    selected={field.value ?? undefined} \r\n+                    onSelect={(date) => {\r\n+                      if (date) field.onChange(date); // Update form value on date selection\r\n+                    }}\r\n                     disabled={(date) =>\r\n\\ No newline at end of file\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n-                  <div className='p-3 border-t border-border'>\r\n-                    <TimePicker setDate={field.onChange} date={field.value} />\r\n+                  <div className=\"p-3 border-t border-border\">\r\n+                    <TimePicker\r\n+                      setDate={(time) => {\r\n+                        if (time) {\r\n+                          const updatedDate = field.value\r\n+                            ? new Date(\r\n+                                field.value.setHours(\r\n+                                  time.getHours(),\r\n+                                  time.getMinutes(),\r\n+                                  time.getSeconds()\r\n+                                )\r\n+                              )\r\n+                            : time;\r\n+                          field.onChange(updatedDate); // Update time component in form\r\n+                        }\r\n+                      }}\r\n+                      date={field.value || new Date()} // Default to current time if no date is selected\r\n+                    />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type='submit'>Submit</Button>\r\n+        <Button type=\"submit\">Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n-}\n+}\r\n"
                },
                {
                    "date": 1727591836957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n 'use client';\r\n \r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { z } from 'zod';\r\n+import { date, z } from 'zod';\r\n import {\r\n   Form,\r\n+  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -18,88 +19,68 @@\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n \r\n const formSchema = z.object({\r\n-  dateTime: z.date().nullable(), // Handle nullable dates\r\n+  dateTime: z.date(),\r\n });\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n-    defaultValues: {\r\n-      dateTime: null, // Ensure default value is null\r\n-    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n-    console.log('Form submitted with: ', values);\r\n+    console.log(values);\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n         <FormField\r\n           control={form.control}\r\n-          name=\"dateTime\"\r\n+          name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className=\"flex flex-col items-start\">\r\n-              <FormLabel>Select Date and Time</FormLabel>\r\n+            <FormItem className='flex flex-col items-start'>\r\n+              <FormLabel>DateTime</FormLabel>\r\n+              {/* popover */}\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n-                    variant=\"outline\"\r\n+                    variant={'outline'}\r\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n                   >\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date and time</span>\r\n+                      <span>Pick a date</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0\">\r\n+                <PopoverContent className='w-auto p-0'>\r\n                   <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={field.value ?? undefined} \r\n-                    onSelect={(date) => {\r\n-                      if (date) field.onChange(date); // Update form value on date selection\r\n-                    }}\r\n+                    mode='single'\r\n+                    selected={field.value}\r\n+                    onSelect={field.onChange}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n-                  <div className=\"p-3 border-t border-border\">\r\n-                    <TimePicker\r\n-                      setDate={(time) => {\r\n-                        if (time) {\r\n-                          const updatedDate = field.value\r\n-                            ? new Date(\r\n-                                field.value.setHours(\r\n-                                  time.getHours(),\r\n-                                  time.getMinutes(),\r\n-                                  time.getSeconds()\r\n-                                )\r\n-                              )\r\n-                            : time;\r\n-                          field.onChange(updatedDate); // Update time component in form\r\n-                        }\r\n-                      }}\r\n-                      date={field.value || new Date()} // Default to current time if no date is selected\r\n-                    />\r\n+                  <div className='p-3 border-t border-border'>\r\n+                    <TimePicker setDate={field.onChange} date={field.value} />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type=\"submit\">Submit</Button>\r\n+        <Button type='submit'>Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727592127734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n 'use client';\r\n \r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { date, z } from 'zod';\r\n+import { z } from 'zod';\r\n import {\r\n   Form,\r\n-  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -17,21 +16,33 @@\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n+import { useState } from 'react';\r\n+import { toast } from '@/hooks/use-toast';\r\n \r\n const formSchema = z.object({\r\n   dateTime: z.date(),\r\n });\r\n+\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n+  const [date, setDate] = useState<Date | undefined>(new Date());\r\n+\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      dateTime: new Date(),\r\n+    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n+    toast({\r\n+      title: \"Form submitted\",\r\n+      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n+    });\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -39,11 +50,10 @@\n         <FormField\r\n           control={form.control}\r\n           name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col items-start'>\r\n-              <FormLabel>DateTime</FormLabel>\r\n-              {/* popover */}\r\n+            <FormItem className='flex flex-col'>\r\n+              <FormLabel>Date and Time</FormLabel>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n@@ -55,24 +65,31 @@\n                     <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date</span>\r\n+                      <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0'>\r\n+                <PopoverContent className='w-auto p-0' align='start'>\r\n                   <Calendar\r\n                     mode='single'\r\n-                    selected={field.value}\r\n-                    onSelect={field.onChange}\r\n+                    selected={date}\r\n+                    onSelect={(newDate) => {\r\n+                      setDate(newDate);\r\n+                      if (newDate) {\r\n+                        const newDateTime = new Date(field.value);\r\n+                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n+                        field.onChange(newDateTime);\r\n+                      }\r\n+                    }}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n                   <div className='p-3 border-t border-border'>\r\n-                    <TimePicker setDate={field.onChange} date={field.value} />\r\n+                  <TimePicker setDate={field.onChange} date={field.value} />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n"
                },
                {
                    "date": 1727592761157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+'use client';\r\n+\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useForm } from 'react-hook-form';\r\n+import { z } from 'zod';\r\n+import {\r\n+  Form,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormMessage,\r\n+} from '../ui/form';\r\n+import { Button } from '../ui/button';\r\n+import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n+import { CalendarIcon } from 'lucide-react';\r\n+import { cn } from '@/lib/utils';\r\n+import { format } from 'date-fns';\r\n+import { Calendar } from '../ui/calendar';\r\n+import { TimePicker } from '../ui/time-picker';\r\n+import { useState } from 'react';\r\n+import { toast } from '@/hooks/use-toast';\r\n+\r\n+const formSchema = z.object({\r\n+  dateTime: z.date(),\r\n+});\r\n+\r\n+type FormSchemaType = z.infer<typeof formSchema>;\r\n+\r\n+export default function DateTimePickerForm() {\r\n+  const [date, setDate] = useState<Date | undefined>(new Date());\r\n+\r\n+  const form = useForm<FormSchemaType>({\r\n+    resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      dateTime: new Date(),\r\n+    },\r\n+  });\r\n+\r\n+  function onSubmit(values: FormSchemaType) {\r\n+    console.log(values);\r\n+    toast({\r\n+      title: \"Form submitted\",\r\n+      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n+    });\r\n+  }\r\n+\r\n+  return (\r\n+    <Form {...form}>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+        <FormField\r\n+          control={form.control}\r\n+          name='dateTime'\r\n+          render={({ field }) => (\r\n+            <FormItem className='flex flex-col'>\r\n+              <FormLabel>Date and Time</FormLabel>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button\r\n+                    variant={'outline'}\r\n+                    className={cn(\r\n+                      'w-[280px] justify-start text-left font-normal',\r\n+                      !field.value && 'text-muted-foreground'\r\n+                    )}\r\n+                  >\r\n+                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    {field.value ? (\r\n+                      format(field.value, 'PPP HH:mm:ss')\r\n+                    ) : (\r\n+                      <span>Pick a date and time</span>\r\n+                    )}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className='w-auto p-0' align='start'>\r\n+                  <Calendar\r\n+                    mode='single'\r\n+                    selected={date}\r\n+                    onSelect={(newDate) => {\r\n+                      setDate(newDate);\r\n+                      if (newDate) {\r\n+                        const newDateTime = new Date(field.value);\r\n+                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n+                        field.onChange(newDateTime);\r\n+                      }\r\n+                    }}\r\n+                    disabled={(date) =>\r\n+                      date > new Date() || date < new Date('1900-01-01')\r\n+                    }\r\n+                    initialFocus\r\n+                  />\r\n+                  <div className='p-3 border-t border-border'>\r\n+                    <TimePicker\r\n+                     setDate={field.onChange} date={field.value}\r\n+                    />\r\n+                  </div>\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+              <FormMessage />\r\n+            </FormItem>\r\n+          )}\r\n+        />\r\n+        <Button type='submit'>Submit</Button>\r\n+      </form>\r\n+    </Form>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727593037323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n 'use client';\r\n \r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { z } from 'zod';\r\n+import { date, z } from 'zod';\r\n import {\r\n   Form,\r\n+  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -16,33 +17,21 @@\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n-import { useState } from 'react';\r\n-import { toast } from '@/hooks/use-toast';\r\n \r\n const formSchema = z.object({\r\n   dateTime: z.date(),\r\n });\r\n-\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n-  const [date, setDate] = useState<Date | undefined>(new Date());\r\n-\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n-    defaultValues: {\r\n-      dateTime: new Date(),\r\n-    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n-    toast({\r\n-      title: \"Form submitted\",\r\n-      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n-    });\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -50,10 +39,11 @@\n         <FormField\r\n           control={form.control}\r\n           name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n-              <FormLabel>Date and Time</FormLabel>\r\n+            <FormItem className='flex flex-col items-start'>\r\n+              <FormLabel>DateTime</FormLabel>\r\n+              {/* popover */}\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n@@ -65,33 +55,24 @@\n                     <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date and time</span>\r\n+                      <span>Pick a date</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0' align='start'>\r\n+                <PopoverContent className='w-auto p-0'>\r\n                   <Calendar\r\n                     mode='single'\r\n-                    selected={date}\r\n-                    onSelect={(newDate) => {\r\n-                      setDate(newDate);\r\n-                      if (newDate) {\r\n-                        const newDateTime = new Date(field.value);\r\n-                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n-                        field.onChange(newDateTime);\r\n-                      }\r\n-                    }}\r\n+                    selected={field.value}\r\n+                    onSelect={field.onChange}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n                   <div className='p-3 border-t border-border'>\r\n-                    <TimePicker\r\n-                     setDate={field.onChange} date={field.value}\r\n-                    />\r\n+                    <TimePicker setDate={field.onChange} date={field.value} />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n@@ -101,108 +82,5 @@\n         <Button type='submit'>Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n-}\n-'use client';\r\n-\r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useForm } from 'react-hook-form';\r\n-import { z } from 'zod';\r\n-import {\r\n-  Form,\r\n-  FormField,\r\n-  FormItem,\r\n-  FormLabel,\r\n-  FormMessage,\r\n-} from '../ui/form';\r\n-import { Button } from '../ui/button';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n-import { CalendarIcon } from 'lucide-react';\r\n-import { cn } from '@/lib/utils';\r\n-import { format } from 'date-fns';\r\n-import { Calendar } from '../ui/calendar';\r\n-import { TimePicker } from '../ui/time-picker';\r\n-import { useState } from 'react';\r\n-import { toast } from '@/hooks/use-toast';\r\n-\r\n-const formSchema = z.object({\r\n-  dateTime: z.date(),\r\n-});\r\n-\r\n-type FormSchemaType = z.infer<typeof formSchema>;\r\n-\r\n-export default function DateTimePickerForm() {\r\n-  const [date, setDate] = useState<Date | undefined>(new Date());\r\n-\r\n-  const form = useForm<FormSchemaType>({\r\n-    resolver: zodResolver(formSchema),\r\n-    defaultValues: {\r\n-      dateTime: new Date(),\r\n-    },\r\n-  });\r\n-\r\n-  function onSubmit(values: FormSchemaType) {\r\n-    console.log(values);\r\n-    toast({\r\n-      title: \"Form submitted\",\r\n-      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n-    });\r\n-  }\r\n-\r\n-  return (\r\n-    <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n-        <FormField\r\n-          control={form.control}\r\n-          name='dateTime'\r\n-          render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n-              <FormLabel>Date and Time</FormLabel>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button\r\n-                    variant={'outline'}\r\n-                    className={cn(\r\n-                      'w-[280px] justify-start text-left font-normal',\r\n-                      !field.value && 'text-muted-foreground'\r\n-                    )}\r\n-                  >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n-                    {field.value ? (\r\n-                      format(field.value, 'PPP HH:mm:ss')\r\n-                    ) : (\r\n-                      <span>Pick a date and time</span>\r\n-                    )}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0' align='start'>\r\n-                  <Calendar\r\n-                    mode='single'\r\n-                    selected={date}\r\n-                    onSelect={(newDate) => {\r\n-                      setDate(newDate);\r\n-                      if (newDate) {\r\n-                        const newDateTime = new Date(field.value);\r\n-                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n-                        field.onChange(newDateTime);\r\n-                      }\r\n-                    }}\r\n-                    disabled={(date) =>\r\n-                      date > new Date() || date < new Date('1900-01-01')\r\n-                    }\r\n-                    initialFocus\r\n-                  />\r\n-                  <div className='p-3 border-t border-border'>\r\n-                  <TimePicker setDate={field.onChange} date={field.value} />\r\n-                  </div>\r\n-                </PopoverContent>\r\n-              </Popover>\r\n-              <FormMessage />\r\n-            </FormItem>\r\n-          )}\r\n-        />\r\n-        <Button type='submit'>Submit</Button>\r\n-      </form>\r\n-    </Form>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727593452251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n 'use client';\r\n \r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { date, z } from 'zod';\r\n+import { z } from 'zod';\r\n import {\r\n   Form,\r\n-  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -17,21 +16,33 @@\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n+import { useState } from 'react';\r\n+import { toast } from '@/hooks/use-toast';\r\n \r\n const formSchema = z.object({\r\n   dateTime: z.date(),\r\n });\r\n+\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n+  const [date, setDate] = useState<Date | undefined>(new Date());\r\n+\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      dateTime: new Date(),\r\n+    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n+    toast({\r\n+      title: \"Form submitted\",\r\n+      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n+    });\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -39,11 +50,10 @@\n         <FormField\r\n           control={form.control}\r\n           name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col items-start'>\r\n-              <FormLabel>DateTime</FormLabel>\r\n-              {/* popover */}\r\n+            <FormItem className='flex flex-col'>\r\n+              <FormLabel>Date and Time</FormLabel>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n@@ -55,24 +65,33 @@\n                     <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date</span>\r\n+                      <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0'>\r\n+                <PopoverContent className='w-auto p-0' align='start'>\r\n                   <Calendar\r\n                     mode='single'\r\n-                    selected={field.value}\r\n-                    onSelect={field.onChange}\r\n+                    selected={date}\r\n+                    onSelect={(newDate) => {\r\n+                      setDate(newDate);\r\n+                      if (newDate) {\r\n+                        const newDateTime = new Date(field.value);\r\n+                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n+                        field.onChange(newDateTime);\r\n+                      }\r\n+                    }}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n                   <div className='p-3 border-t border-border'>\r\n-                    <TimePicker setDate={field.onChange} date={field.value} />\r\n+                    <TimePicker\r\n+                     setDate={field.onChange} date={field.value}\r\n+                    />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n"
                },
                {
                    "date": 1727596148654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n-'use client';\r\n-\r\n+import { useState } from 'react';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { z } from 'zod';\r\n+import { date, z } from 'zod';\r\n import {\r\n   Form,\r\n+  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -16,90 +16,74 @@\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n-import { useState } from 'react';\r\n-import { toast } from '@/hooks/use-toast';\r\n \r\n const formSchema = z.object({\r\n   dateTime: z.date(),\r\n });\r\n-\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n-  const [date, setDate] = useState<Date | undefined>(new Date());\r\n-\r\n+  const [isPopoverOpen, setIsPopoverOpen] = useState(false); // Control popover state\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n-    defaultValues: {\r\n-      dateTime: new Date(),\r\n-    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n-    toast({\r\n-      title: \"Form submitted\",\r\n-      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n-    });\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n         <FormField\r\n           control={form.control}\r\n-          name='dateTime'\r\n+          name=\"dateTime\"\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n-              <FormLabel>Date and Time</FormLabel>\r\n-              <Popover>\r\n+            <FormItem className=\"flex flex-col items-start\">\r\n+              <FormLabel>DateTime</FormLabel>\r\n+              {/* Popover to select date */}\r\n+              <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n                   >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date and time</span>\r\n+                      <span>Pick a date</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0' align='start'>\r\n+                <PopoverContent className=\"w-auto p-0 z-[9999]\"> {/* Add z-index */}\r\n                   <Calendar\r\n-                    mode='single'\r\n-                    selected={date}\r\n-                    onSelect={(newDate) => {\r\n-                      setDate(newDate);\r\n-                      if (newDate) {\r\n-                        const newDateTime = new Date(field.value);\r\n-                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n-                        field.onChange(newDateTime);\r\n-                      }\r\n+                    mode=\"single\"\r\n+                    selected={field.value ?? undefined}\r\n+                    onSelect={(selectedDate) => {\r\n+                      field.onChange(selectedDate); // Update form field\r\n+                      setIsPopoverOpen(false); // Close popover after selection\r\n                     }}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n-                  <div className='p-3 border-t border-border'>\r\n\\ No newline at end of file\n-                    <TimePicker\r\n-                     setDate={field.onChange} date={field.value}\r\n-                    />\r\n+                  <div className=\"p-3 border-t border-border\">\r\n+                    <TimePicker setDate={field.onChange} date={field.value} />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type='submit'>Submit</Button>\r\n+        <Button type=\"submit\">Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n-}\n+}\r\n"
                },
                {
                    "date": 1727596171959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import { useState } from 'react';\r\n+'use client';\r\n+\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n import { date, z } from 'zod';\r\n import {\r\n@@ -23,9 +24,8 @@\n });\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n-  const [isPopoverOpen, setIsPopoverOpen] = useState(false); // Control popover state\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n   });\r\n \r\n@@ -34,56 +34,53 @@\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n         <FormField\r\n           control={form.control}\r\n-          name=\"dateTime\"\r\n+          name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className=\"flex flex-col items-start\">\r\n+            <FormItem className='flex flex-col items-start'>\r\n               <FormLabel>DateTime</FormLabel>\r\n-              {/* Popover to select date */}\r\n-              <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\r\n+              {/* popover */}\r\n+              <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n                   >\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n                       <span>Pick a date</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className=\"w-auto p-0 z-[9999]\"> {/* Add z-index */}\r\n+                <PopoverContent className='w-auto p-0'>\r\n                   <Calendar\r\n-                    mode=\"single\"\r\n-                    selected={field.value ?? undefined}\r\n-                    onSelect={(selectedDate) => {\r\n-                      field.onChange(selectedDate); // Update form field\r\n-                      setIsPopoverOpen(false); // Close popover after selection\r\n-                    }}\r\n+                    mode='single'\r\n+                    selected={field.value}\r\n+                    onSelect={field.onChange}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n-                  <div className=\"p-3 border-t border-border\">\r\n+                  <div className='p-3 border-t border-border'>\r\n                     <TimePicker setDate={field.onChange} date={field.value} />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type=\"submit\">Submit</Button>\r\n+        <Button type='submit'>Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727596314729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n 'use client';\r\n \r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n-import { date, z } from 'zod';\r\n+import { z } from 'zod';\r\n import {\r\n   Form,\r\n-  FormDescription,\r\n   FormField,\r\n   FormItem,\r\n   FormLabel,\r\n   FormMessage,\r\n@@ -17,21 +16,33 @@\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n+import { useState } from 'react';\r\n+import { toast } from '@/hooks/use-toast';\r\n \r\n const formSchema = z.object({\r\n   dateTime: z.date(),\r\n });\r\n+\r\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n+  const [date, setDate] = useState<Date | undefined>(new Date());\r\n+\r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      dateTime: new Date(),\r\n+    },\r\n   });\r\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n+    toast({\r\n+      title: \"Form submitted\",\r\n+      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n+    });\r\n   }\r\n \r\n   return (\r\n     <Form {...form}>\r\n@@ -39,11 +50,10 @@\n         <FormField\r\n           control={form.control}\r\n           name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col items-start'>\r\n-              <FormLabel>DateTime</FormLabel>\r\n-              {/* popover */}\r\n+            <FormItem className='flex flex-col'>\r\n+              <FormLabel>Date and Time</FormLabel>\r\n               <Popover>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n@@ -55,24 +65,33 @@\n                     <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n-                      <span>Pick a date</span>\r\n+                      <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0'>\r\n+                <PopoverContent className='w-auto p-0' align='start'>\r\n                   <Calendar\r\n                     mode='single'\r\n-                    selected={field.value}\r\n-                    onSelect={field.onChange}\r\n+                    selected={date}\r\n+                    onSelect={(newDate) => {\r\n+                      setDate(newDate);\r\n+                      if (newDate) {\r\n+                        const newDateTime = new Date(field.value);\r\n+                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n+                        field.onChange(newDateTime);\r\n+                      }\r\n+                    }}\r\n                     disabled={(date) =>\r\n                       date > new Date() || date < new Date('1900-01-01')\r\n                     }\r\n                     initialFocus\r\n                   />\r\n                   <div className='p-3 border-t border-border'>\r\n-                    <TimePicker setDate={field.onChange} date={field.value} />\r\n+                    <TimePicker\r\n+                     setDate={field.onChange} date={field.value}\r\n+                    />\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n"
                },
                {
                    "date": 1727597633582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,105 +1,58 @@\n 'use client';\r\n \r\n-import { zodResolver } from '@hookform/resolvers/zod';\r\n-import { useForm } from 'react-hook-form';\r\n-import { z } from 'zod';\r\n-import {\r\n-  Form,\r\n-  FormField,\r\n-  FormItem,\r\n-  FormLabel,\r\n-  FormMessage,\r\n-} from '../ui/form';\r\n+import { useState } from 'react';\r\n import { Button } from '../ui/button';\r\n+import { Calendar } from '../ui/calendar';\r\n+import { format } from 'date-fns';\r\n+import { toast } from '@/hooks/use-toast';\r\n import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n import { CalendarIcon } from 'lucide-react';\r\n import { cn } from '@/lib/utils';\r\n-import { format } from 'date-fns';\r\n-import { Calendar } from '../ui/calendar';\r\n-import { TimePicker } from '../ui/time-picker';\r\n-import { useState } from 'react';\r\n-import { toast } from '@/hooks/use-toast';\r\n \r\n-const formSchema = z.object({\r\n-  dateTime: z.date(),\r\n-});\r\n-\r\n-type FormSchemaType = z.infer<typeof formSchema>;\r\n-\r\n export default function DateTimePickerForm() {\r\n   const [date, setDate] = useState<Date | undefined>(new Date());\r\n \r\n-  const form = useForm<FormSchemaType>({\r\n-    resolver: zodResolver(formSchema),\r\n-    defaultValues: {\r\n-      dateTime: new Date(),\r\n-    },\r\n-  });\r\n-\r\n-  function onSubmit(values: FormSchemaType) {\r\n-    console.log(values);\r\n-    toast({\r\n-      title: \"Form submitted\",\r\n-      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n-    });\r\n+  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n+    e.preventDefault();\r\n+    if (date) {\r\n+      console.log(date);\r\n+      toast({\r\n+        title: \"Form submitted\",\r\n+        description: `Selected date: ${format(date, 'PPP')}`,\r\n+      });\r\n+    }\r\n   }\r\n \r\n   return (\r\n-    <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n-        <FormField\r\n-          control={form.control}\r\n-          name='dateTime'\r\n-          render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n-              <FormLabel>Date and Time</FormLabel>\r\n-              <Popover>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button\r\n-                    variant={'outline'}\r\n-                    className={cn(\r\n-                      'w-[280px] justify-start text-left font-normal',\r\n-                      !field.value && 'text-muted-foreground'\r\n-                    )}\r\n-                  >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n-                    {field.value ? (\r\n-                      format(field.value, 'PPP HH:mm:ss')\r\n-                    ) : (\r\n-                      <span>Pick a date and time</span>\r\n-                    )}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0' align='start'>\r\n-                  <Calendar\r\n-                    mode='single'\r\n-                    selected={date}\r\n-                    onSelect={(newDate) => {\r\n-                      setDate(newDate);\r\n-                      if (newDate) {\r\n-                        const newDateTime = new Date(field.value);\r\n-                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n-                        field.onChange(newDateTime);\r\n-                      }\r\n-                    }}\r\n-                    disabled={(date) =>\r\n-                      date > new Date() || date < new Date('1900-01-01')\r\n-                    }\r\n-                    initialFocus\r\n-                  />\r\n-                  <div className='p-3 border-t border-border'>\r\n-                    <TimePicker\r\n-                     setDate={field.onChange} date={field.value}\r\n-                    />\r\n-                  </div>\r\n-                </PopoverContent>\r\n-              </Popover>\r\n-              <FormMessage />\r\n-            </FormItem>\r\n-          )}\r\n-        />\r\n-        <Button type='submit'>Submit</Button>\r\n-      </form>\r\n-    </Form>\r\n+    <form onSubmit={onSubmit} className='space-y-8'>\r\n+      <div className='flex flex-col items-center'>\r\n+        <Popover>\r\n+          <PopoverTrigger asChild>\r\n+            <Button\r\n+              variant={'outline'}\r\n+              className={cn(\r\n+                'w-[280px] justify-start text-left font-normal',\r\n+                !date && 'text-muted-foreground'\r\n+              )}\r\n+            >\r\n+              <CalendarIcon className='mr-2 h-4 w-4' />\r\n+              {date ? format(date, 'PPP') : <span>Pick a date</span>}\r\n+            </Button>\r\n+          </PopoverTrigger>\r\n+          <PopoverContent className='w-auto p-0' align='start'>\r\n+            <Calendar\r\n+              mode='single'\r\n+              selected={date}\r\n+              onSelect={(newDate) => {\r\n+                setDate(newDate);\r\n+                // Keep the popover open after selection\r\n+              }}\r\n+              initialFocus\r\n+            />\r\n+          </PopoverContent>\r\n+        </Popover>\r\n+      </div>\r\n+      <Button type='submit' className=\"w-full\">Submit</Button>\r\n+    </form>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727597945147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,105 @@\n 'use client';\r\n \r\n-import { useState } from 'react';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import { useForm } from 'react-hook-form';\r\n+import { z } from 'zod';\r\n+import {\r\n+  Form,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormMessage,\r\n+} from '../ui/form';\r\n import { Button } from '../ui/button';\r\n-import { Calendar } from '../ui/calendar';\r\n-import { format } from 'date-fns';\r\n-import { toast } from '@/hooks/use-toast';\r\n import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n import { CalendarIcon } from 'lucide-react';\r\n import { cn } from '@/lib/utils';\r\n+import { format } from 'date-fns';\r\n+import { Calendar } from '../ui/calendar';\r\n+import { TimePicker } from '../ui/time-picker';\r\n+import { useState } from 'react';\r\n+import { toast } from '@/hooks/use-toast';\r\n \r\n+const formSchema = z.object({\r\n+  dateTime: z.date(),\r\n+});\r\n+\r\n+type FormSchemaType = z.infer<typeof formSchema>;\r\n+\r\n export default function DateTimePickerForm() {\r\n   const [date, setDate] = useState<Date | undefined>(new Date());\r\n \r\n-  function onSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n-    e.preventDefault();\r\n-    if (date) {\r\n-      console.log(date);\r\n-      toast({\r\n-        title: \"Form submitted\",\r\n-        description: `Selected date: ${format(date, 'PPP')}`,\r\n-      });\r\n-    }\r\n+  const form = useForm<FormSchemaType>({\r\n+    resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      dateTime: new Date(),\r\n+    },\r\n+  });\r\n+\r\n+  function onSubmit(values: FormSchemaType) {\r\n+    console.log(values);\r\n+    toast({\r\n+      title: \"Form submitted\",\r\n+      description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n+    });\r\n   }\r\n \r\n   return (\r\n-    <form onSubmit={onSubmit} className='space-y-8'>\r\n-      <div className='flex flex-col items-center'>\r\n-        <Popover>\r\n-          <PopoverTrigger asChild>\r\n-            <Button\r\n-              variant={'outline'}\r\n-              className={cn(\r\n-                'w-[280px] justify-start text-left font-normal',\r\n-                !date && 'text-muted-foreground'\r\n-              )}\r\n-            >\r\n-              <CalendarIcon className='mr-2 h-4 w-4' />\r\n-              {date ? format(date, 'PPP') : <span>Pick a date</span>}\r\n-            </Button>\r\n-          </PopoverTrigger>\r\n-          <PopoverContent className='w-auto p-0' align='start'>\r\n-            <Calendar\r\n-              mode='single'\r\n-              selected={date}\r\n-              onSelect={(newDate) => {\r\n-                setDate(newDate);\r\n-                // Keep the popover open after selection\r\n-              }}\r\n-              initialFocus\r\n-            />\r\n-          </PopoverContent>\r\n-        </Popover>\r\n-      </div>\r\n-      <Button type='submit' className=\"w-full\">Submit</Button>\r\n-    </form>\r\n+    <Form {...form}>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+        <FormField\r\n+          control={form.control}\r\n+          name='dateTime'\r\n+          render={({ field }) => (\r\n+            <FormItem className='flex flex-col'>\r\n+              <FormLabel>Date and Time</FormLabel>\r\n+              <Popover>\r\n+                <PopoverTrigger asChild>\r\n+                  <Button\r\n+                    variant={'outline'}\r\n+                    className={cn(\r\n+                      'w-[280px] justify-start text-left font-normal',\r\n+                      !field.value && 'text-muted-foreground'\r\n+                    )}\r\n+                  >\r\n+                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    {field.value ? (\r\n+                      format(field.value, 'PPP HH:mm:ss')\r\n+                    ) : (\r\n+                      <span>Pick a date and time</span>\r\n+                    )}\r\n+                  </Button>\r\n+                </PopoverTrigger>\r\n+                <PopoverContent className='w-auto p-0' align='start'>\r\n+                  <Calendar\r\n+                    mode='single'\r\n+                    selected={date}\r\n+                    onSelect={(newDate) => {\r\n+                      setDate(newDate);\r\n+                      if (newDate) {\r\n+                        const newDateTime = new Date(field.value);\r\n+                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n+                        field.onChange(newDateTime);\r\n+                      }\r\n+                    }}\r\n+                    disabled={(date) =>\r\n+                      date > new Date() || date < new Date('1900-01-01')\r\n+                    }\r\n+                    initialFocus\r\n+                  />\r\n+                  <div className='p-3 border-t border-border'>\r\n+                    <TimePicker\r\n+                     setDate={field.onChange} date={field.value}\r\n+                    />\r\n+                  </div>\r\n+                </PopoverContent>\r\n+              </Popover>\r\n+              <FormMessage />\r\n+            </FormItem>\r\n+          )}\r\n+        />\r\n+        <Button type='submit'>Submit</Button>\r\n+      </form>\r\n+    </Form>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727608013108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0' align='start'>\r\n+                <PopoverContent className='w-auto p-0 z-[1500] ' align='start'>\r\n                   <Calendar\r\n                     mode='single'\r\n                     selected={date}\r\n                     onSelect={(newDate) => {\r\n"
                },
                {
                    "date": 1727617391759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0 z-[1500] ' align='start'>\r\n+                <PopoverContent className='w-auto p-0 z-[1500] ' align='start' onClick={(e) => e.stopPropagation()}>\r\n                   <Calendar\r\n                     mode='single'\r\n                     selected={date}\r\n                     onSelect={(newDate) => {\r\n"
                },
                {
                    "date": 1727619899396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n 'use client';\r\n \r\n+import { useState, useRef, useEffect } from 'react';\r\n import { zodResolver } from '@hookform/resolvers/zod';\r\n import { useForm } from 'react-hook-form';\r\n import { z } from 'zod';\r\n import {\r\n@@ -16,9 +17,8 @@\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n import { TimePicker } from '../ui/time-picker';\r\n-import { useState } from 'react';\r\n import { toast } from '@/hooks/use-toast';\r\n \r\n const formSchema = z.object({\r\n   dateTime: z.date(),\r\n@@ -27,8 +27,10 @@\n type FormSchemaType = z.infer<typeof formSchema>;\r\n \r\n export default function DateTimePickerForm() {\r\n   const [date, setDate] = useState<Date | undefined>(new Date());\r\n+  const [isOpen, setIsOpen] = useState(false);\r\n+  const popoverRef = useRef<HTMLDivElement>(null);\r\n \r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n     defaultValues: {\r\n@@ -43,8 +45,21 @@\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n+  useEffect(() => {\r\n+    function handleClickOutside(event: MouseEvent) {\r\n+      if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n+        setIsOpen(false);\r\n+      }\r\n+    }\r\n+\r\n+    document.addEventListener(\"mousedown\", handleClickOutside);\r\n+    return () => {\r\n+      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n+    };\r\n+  }, []);\r\n+\r\n   return (\r\n     <Form {...form}>\r\n       <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n         <FormField\r\n@@ -52,16 +67,17 @@\n           name='dateTime'\r\n           render={({ field }) => (\r\n             <FormItem className='flex flex-col'>\r\n               <FormLabel>Date and Time</FormLabel>\r\n-              <Popover>\r\n+              <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n                     variant={'outline'}\r\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n+                    onClick={() => setIsOpen(true)}\r\n                   >\r\n                     <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n@@ -69,29 +85,43 @@\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent className='w-auto p-0 z-[1500] ' align='start' onClick={(e) => e.stopPropagation()}>\r\n-                  <Calendar\r\n-                    mode='single'\r\n-                    selected={date}\r\n-                    onSelect={(newDate) => {\r\n-                      setDate(newDate);\r\n-                      if (newDate) {\r\n-                        const newDateTime = new Date(field.value);\r\n-                        newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n-                        field.onChange(newDateTime);\r\n+                <PopoverContent \r\n+                  className='w-auto p-0 z-[1500]'\r\n+                  align='start'\r\n+                  ref={popoverRef}\r\n+                  onInteractOutside={(e) => {\r\n+                    e.preventDefault();\r\n+                    e.stopPropagation();\r\n+                  }}\r\n+                >\r\n+                  <div onMouseDown={(e) => e.preventDefault()}>\r\n+                    <Calendar\r\n+                      mode='single'\r\n+                      selected={date}\r\n+                      onSelect={(newDate) => {\r\n+                        setDate(newDate);\r\n+                        if (newDate) {\r\n+                          const newDateTime = new Date(field.value);\r\n+                          newDateTime.setFullYear(newDate.getFullYear(), newDate.getMonth(), newDate.getDate());\r\n+                          field.onChange(newDateTime);\r\n+                        }\r\n+                      }}\r\n+                      disabled={(date) =>\r\n+                        date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n-                    }}\r\n-                    disabled={(date) =>\r\n-                      date > new Date() || date < new Date('1900-01-01')\r\n-                    }\r\n-                    initialFocus\r\n-                  />\r\n-                  <div className='p-3 border-t border-border'>\r\n-                    <TimePicker\r\n-                     setDate={field.onChange} date={field.value}\r\n+                      initialFocus\r\n                     />\r\n+                    <div className='p-3 border-t border-border'>\r\n+                      <TimePicker\r\n+                        setDate={(newDate) => {\r\n+                          field.onChange(newDate);\r\n+                          setDate(newDate);\r\n+                        }}\r\n+                        date={field.value}\r\n+                      />\r\n+                    </div>\r\n                   </div>\r\n                 </PopoverContent>\r\n               </Popover>\r\n               <FormMessage />\r\n"
                },
                {
                    "date": 1727619952409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n                 <PopoverContent \r\n-                  className='w-auto p-0 z-[1500]'\r\n+                  className='w-auto p-0 z-[3000]'\r\n                   align='start'\r\n                   ref={popoverRef}\r\n                   onInteractOutside={(e) => {\r\n                     e.preventDefault();\r\n"
                },
                {
                    "date": 1727620462258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,13 @@\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n+  // UseEffect to handle clicks outside the popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n-        setIsOpen(false);\r\n+        setIsOpen(false); // Close the popover when clicking outside\r\n       }\r\n     }\r\n \r\n     document.addEventListener(\"mousedown\", handleClickOutside);\r\n@@ -75,9 +76,9 @@\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n-                    onClick={() => setIsOpen(true)}\r\n+                    onClick={() => setIsOpen(true)} // Toggle popover\r\n                   >\r\n                     <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n@@ -89,12 +90,10 @@\n                 <PopoverContent \r\n                   className='w-auto p-0 z-[3000]'\r\n                   align='start'\r\n                   ref={popoverRef}\r\n-                  onInteractOutside={(e) => {\r\n-                    e.preventDefault();\r\n-                    e.stopPropagation();\r\n-                  }}\r\n+                  // Prevent clicks inside popover from closing it\r\n+                  onClick={(e) => e.stopPropagation()}\r\n                 >\r\n                   <div onMouseDown={(e) => e.preventDefault()}>\r\n                     <Calendar\r\n                       mode='single'\r\n@@ -131,5 +130,5 @@\n         <Button type='submit'>Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1727623226370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,35 +40,34 @@\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n     toast({\r\n-      title: \"Form submitted\",\r\n+      title: 'Form submitted',\r\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n-  // UseEffect to handle clicks outside the popover\r\n+  // Handle outside clicks to close popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n-        setIsOpen(false); // Close the popover when clicking outside\r\n+        setIsOpen(false);\r\n       }\r\n     }\r\n-\r\n-    document.addEventListener(\"mousedown\", handleClickOutside);\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n     return () => {\r\n-      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n     };\r\n   }, []);\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n         <FormField\r\n           control={form.control}\r\n-          name='dateTime'\r\n+          name=\"dateTime\"\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n+            <FormItem className=\"flex flex-col\">\r\n               <FormLabel>Date and Time</FormLabel>\r\n               <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n@@ -76,28 +75,28 @@\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n-                    onClick={() => setIsOpen(true)} // Toggle popover\r\n+                    onClick={() => setIsOpen(!isOpen)}\r\n                   >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent \r\n-                  className='w-auto p-0 z-[3000]'\r\n-                  align='start'\r\n+                <PopoverContent\r\n+                  className=\"w-auto p-0 z-[3000]\"\r\n+                  align=\"start\"\r\n                   ref={popoverRef}\r\n-                  // Prevent clicks inside popover from closing it\r\n+                  // Prevent closing the popover when clicking inside the content\r\n                   onClick={(e) => e.stopPropagation()}\r\n                 >\r\n-                  <div onMouseDown={(e) => e.preventDefault()}>\r\n+                  <div>\r\n                     <Calendar\r\n-                      mode='single'\r\n+                      mode=\"single\"\r\n                       selected={date}\r\n                       onSelect={(newDate) => {\r\n                         setDate(newDate);\r\n                         if (newDate) {\r\n@@ -110,9 +109,9 @@\n                         date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n                       initialFocus\r\n                     />\r\n-                    <div className='p-3 border-t border-border'>\r\n+                    <div className=\"p-3 border-t border-border\">\r\n                       <TimePicker\r\n                         setDate={(newDate) => {\r\n                           field.onChange(newDate);\r\n                           setDate(newDate);\r\n@@ -126,9 +125,9 @@\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type='submit'>Submit</Button>\r\n+        <Button type=\"submit\">Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1727624048254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,34 +40,34 @@\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n     toast({\r\n-      title: 'Form submitted',\r\n+      title: \"Form submitted\",\r\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n-  // Handle outside clicks to close popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n         setIsOpen(false);\r\n       }\r\n     }\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n+\r\n+    document.addEventListener(\"mousedown\", handleClickOutside);\r\n     return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n+      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n     };\r\n   }, []);\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n         <FormField\r\n           control={form.control}\r\n-          name=\"dateTime\"\r\n+          name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className=\"flex flex-col\">\r\n+            <FormItem className='flex flex-col'>\r\n               <FormLabel>Date and Time</FormLabel>\r\n               <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n@@ -75,28 +75,30 @@\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n-                    onClick={() => setIsOpen(!isOpen)}\r\n+                    onClick={() => setIsOpen(true)}\r\n                   >\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent\r\n-                  className=\"w-auto p-0 z-[3000]\"\r\n-                  align=\"start\"\r\n+                <PopoverContent \r\n+                  className='w-auto p-0 z-[1500]'\r\n+                  align='start'\r\n                   ref={popoverRef}\r\n-                  // Prevent closing the popover when clicking inside the content\r\n-                  onClick={(e) => e.stopPropagation()}\r\n+                  onInteractOutside={(e) => {\r\n+                    e.preventDefault();\r\n+                    e.stopPropagation();\r\n+                  }}\r\n                 >\r\n-                  <div>\r\n+                  <div onMouseDown={(e) => e.preventDefault()}>\r\n                     <Calendar\r\n-                      mode=\"single\"\r\n+                      mode='single'\r\n                       selected={date}\r\n                       onSelect={(newDate) => {\r\n                         setDate(newDate);\r\n                         if (newDate) {\r\n@@ -109,9 +111,9 @@\n                         date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n                       initialFocus\r\n                     />\r\n-                    <div className=\"p-3 border-t border-border\">\r\n+                    <div className='p-3 border-t border-border'>\r\n                       <TimePicker\r\n                         setDate={(newDate) => {\r\n                           field.onChange(newDate);\r\n                           setDate(newDate);\r\n@@ -125,9 +127,9 @@\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type=\"submit\">Submit</Button>\r\n+        <Button type='submit'>Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727624162051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,34 +40,34 @@\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n     toast({\r\n-      title: \"Form submitted\",\r\n+      title: 'Form submitted',\r\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n+  // Handle outside clicks to close popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n         setIsOpen(false);\r\n       }\r\n     }\r\n-\r\n-    document.addEventListener(\"mousedown\", handleClickOutside);\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n     return () => {\r\n-      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n     };\r\n   }, []);\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n         <FormField\r\n           control={form.control}\r\n-          name='dateTime'\r\n+          name=\"dateTime\"\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n+            <FormItem className=\"flex flex-col\">\r\n               <FormLabel>Date and Time</FormLabel>\r\n               <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n@@ -75,30 +75,28 @@\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n-                    onClick={() => setIsOpen(true)}\r\n+                    onClick={() => setIsOpen(!isOpen)}\r\n                   >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent \r\n-                  className='w-auto p-0 z-[1500]'\r\n-                  align='start'\r\n+                <PopoverContent\r\n+                  className=\"w-auto p-0 z-[3000]\"\r\n+                  align=\"start\"\r\n                   ref={popoverRef}\r\n-                  onInteractOutside={(e) => {\r\n-                    e.preventDefault();\r\n-                    e.stopPropagation();\r\n-                  }}\r\n+                  // Prevent closing the popover when clicking inside the content\r\n+                  onClick={(e) => e.stopPropagation()}\r\n                 >\r\n-                  <div onMouseDown={(e) => e.preventDefault()}>\r\n+                  <div>\r\n                     <Calendar\r\n-                      mode='single'\r\n+                      mode=\"single\"\r\n                       selected={date}\r\n                       onSelect={(newDate) => {\r\n                         setDate(newDate);\r\n                         if (newDate) {\r\n@@ -111,9 +109,9 @@\n                         date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n                       initialFocus\r\n                     />\r\n-                    <div className='p-3 border-t border-border'>\r\n+                    <div className=\"p-3 border-t border-border\">\r\n                       <TimePicker\r\n                         setDate={(newDate) => {\r\n                           field.onChange(newDate);\r\n                           setDate(newDate);\r\n@@ -127,9 +125,9 @@\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type='submit'>Submit</Button>\r\n+        <Button type=\"submit\">Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n\\ No newline at end of file\n-}\n+}\r\n"
                },
                {
                    "date": 1727624197123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,34 +40,34 @@\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n     toast({\r\n-      title: 'Form submitted',\r\n+      title: \"Form submitted\",\r\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n-  // Handle outside clicks to close popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n         setIsOpen(false);\r\n       }\r\n     }\r\n-    document.addEventListener('mousedown', handleClickOutside);\r\n+\r\n+    document.addEventListener(\"mousedown\", handleClickOutside);\r\n     return () => {\r\n-      document.removeEventListener('mousedown', handleClickOutside);\r\n+      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n     };\r\n   }, []);\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n         <FormField\r\n           control={form.control}\r\n-          name=\"dateTime\"\r\n+          name='dateTime'\r\n           render={({ field }) => (\r\n-            <FormItem className=\"flex flex-col\">\r\n+            <FormItem className='flex flex-col'>\r\n               <FormLabel>Date and Time</FormLabel>\r\n               <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n@@ -75,28 +75,30 @@\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n-                    onClick={() => setIsOpen(!isOpen)}\r\n+                    onClick={() => setIsOpen(true)}\r\n                   >\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent\r\n-                  className=\"w-auto p-0 z-[3000]\"\r\n-                  align=\"start\"\r\n+                <PopoverContent \r\n+                  className='w-auto p-0 z-[1500]'\r\n+                  align='start'\r\n                   ref={popoverRef}\r\n-                  // Prevent closing the popover when clicking inside the content\r\n-                  onClick={(e) => e.stopPropagation()}\r\n+                  onInteractOutside={(e) => {\r\n+                    e.preventDefault();\r\n+                    e.stopPropagation();\r\n+                  }}\r\n                 >\r\n-                  <div>\r\n+                  <div onMouseDown={(e) => e.preventDefault()}>\r\n                     <Calendar\r\n-                      mode=\"single\"\r\n+                      mode='single'\r\n                       selected={date}\r\n                       onSelect={(newDate) => {\r\n                         setDate(newDate);\r\n                         if (newDate) {\r\n@@ -109,9 +111,9 @@\n                         date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n                       initialFocus\r\n                     />\r\n-                    <div className=\"p-3 border-t border-border\">\r\n+                    <div className='p-3 border-t border-border'>\r\n                       <TimePicker\r\n                         setDate={(newDate) => {\r\n                           field.onChange(newDate);\r\n                           setDate(newDate);\r\n@@ -125,9 +127,9 @@\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type=\"submit\">Submit</Button>\r\n+        <Button type='submit'>Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727624210552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,34 +40,34 @@\n \r\n   function onSubmit(values: FormSchemaType) {\r\n     console.log(values);\r\n     toast({\r\n-      title: \"Form submitted\",\r\n+      title: 'Form submitted',\r\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n+  // Handle outside clicks to close popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n         setIsOpen(false);\r\n       }\r\n     }\r\n-\r\n-    document.addEventListener(\"mousedown\", handleClickOutside);\r\n+    document.addEventListener('mousedown', handleClickOutside);\r\n     return () => {\r\n-      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n+      document.removeEventListener('mousedown', handleClickOutside);\r\n     };\r\n   }, []);\r\n \r\n   return (\r\n     <Form {...form}>\r\n-      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n+      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n         <FormField\r\n           control={form.control}\r\n-          name='dateTime'\r\n+          name=\"dateTime\"\r\n           render={({ field }) => (\r\n-            <FormItem className='flex flex-col'>\r\n+            <FormItem className=\"flex flex-col\">\r\n               <FormLabel>Date and Time</FormLabel>\r\n               <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n                 <PopoverTrigger asChild>\r\n                   <Button\r\n@@ -75,30 +75,28 @@\n                     className={cn(\r\n                       'w-[280px] justify-start text-left font-normal',\r\n                       !field.value && 'text-muted-foreground'\r\n                     )}\r\n-                    onClick={() => setIsOpen(true)}\r\n+                    onClick={() => setIsOpen(!isOpen)}\r\n                   >\r\n-                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n+                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                     {field.value ? (\r\n                       format(field.value, 'PPP HH:mm:ss')\r\n                     ) : (\r\n                       <span>Pick a date and time</span>\r\n                     )}\r\n                   </Button>\r\n                 </PopoverTrigger>\r\n-                <PopoverContent \r\n-                  className='w-auto p-0 z-[1500]'\r\n-                  align='start'\r\n+                <PopoverContent\r\n+                  className=\"w-auto p-0 z-[3000]\"\r\n+                  align=\"start\"\r\n                   ref={popoverRef}\r\n-                  onInteractOutside={(e) => {\r\n-                    e.preventDefault();\r\n-                    e.stopPropagation();\r\n-                  }}\r\n+                  // Prevent closing the popover when clicking inside the content\r\n+                  onClick={(e) => e.stopPropagation()}\r\n                 >\r\n-                  <div onMouseDown={(e) => e.preventDefault()}>\r\n+                  <div>\r\n                     <Calendar\r\n-                      mode='single'\r\n+                      mode=\"single\"\r\n                       selected={date}\r\n                       onSelect={(newDate) => {\r\n                         setDate(newDate);\r\n                         if (newDate) {\r\n@@ -111,9 +109,9 @@\n                         date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n                       initialFocus\r\n                     />\r\n-                    <div className='p-3 border-t border-border'>\r\n+                    <div className=\"p-3 border-t border-border\">\r\n                       <TimePicker\r\n                         setDate={(newDate) => {\r\n                           field.onChange(newDate);\r\n                           setDate(newDate);\r\n@@ -127,9 +125,9 @@\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n-        <Button type='submit'>Submit</Button>\r\n+        <Button type=\"submit\">Submit</Button>\r\n       </form>\r\n     </Form>\r\n   );\r\n\\ No newline at end of file\n-}\n+}\r\n"
                },
                {
                    "date": 1727624584223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n   FormLabel,\r\n   FormMessage,\r\n } from '../ui/form';\r\n import { Button } from '../ui/button';\r\n-import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\n import { CalendarIcon } from 'lucide-react';\r\n import { cn } from '@/lib/utils';\r\n import { format } from 'date-fns';\r\n import { Calendar } from '../ui/calendar';\r\n@@ -28,9 +27,10 @@\n \r\n export default function DateTimePickerForm() {\r\n   const [date, setDate] = useState<Date | undefined>(new Date());\r\n   const [isOpen, setIsOpen] = useState(false);\r\n-  const popoverRef = useRef<HTMLDivElement>(null);\r\n+  const calendarRef = useRef<HTMLDivElement>(null);\r\n+  const buttonRef = useRef<HTMLButtonElement>(null);\r\n \r\n   const form = useForm<FormSchemaType>({\r\n     resolver: zodResolver(formSchema),\r\n     defaultValues: {\r\n@@ -45,12 +45,16 @@\n       description: `Selected date and time: ${format(values.dateTime, 'PPP HH:mm:ss')}`,\r\n     });\r\n   }\r\n \r\n-  // Handle outside clicks to close popover\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n-      if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n+      if (\r\n+        calendarRef.current &&\r\n+        !calendarRef.current.contains(event.target as Node) &&\r\n+        buttonRef.current &&\r\n+        !buttonRef.current.contains(event.target as Node)\r\n+      ) {\r\n         setIsOpen(false);\r\n       }\r\n     }\r\n     document.addEventListener('mousedown', handleClickOutside);\r\n@@ -67,34 +71,31 @@\n           name=\"dateTime\"\r\n           render={({ field }) => (\r\n             <FormItem className=\"flex flex-col\">\r\n               <FormLabel>Date and Time</FormLabel>\r\n-              <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n-                <PopoverTrigger asChild>\r\n-                  <Button\r\n-                    variant={'outline'}\r\n-                    className={cn(\r\n-                      'w-[280px] justify-start text-left font-normal',\r\n-                      !field.value && 'text-muted-foreground'\r\n-                    )}\r\n-                    onClick={() => setIsOpen(!isOpen)}\r\n+              <div className=\"relative\">\r\n+                <Button\r\n+                  ref={buttonRef}\r\n+                  type=\"button\"\r\n+                  variant={'outline'}\r\n+                  className={cn(\r\n+                    'w-[280px] justify-start text-left font-normal',\r\n+                    !field.value && 'text-muted-foreground'\r\n+                  )}\r\n+                  onClick={() => setIsOpen(!isOpen)}\r\n+                >\r\n+                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n+                  {field.value ? (\r\n+                    format(field.value, 'PPP HH:mm:ss')\r\n+                  ) : (\r\n+                    <span>Pick a date and time</span>\r\n+                  )}\r\n+                </Button>\r\n+                {isOpen && (\r\n+                  <div\r\n+                    ref={calendarRef}\r\n+                    className=\"absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-md shadow-lg z-50\"\r\n                   >\r\n-                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n-                    {field.value ? (\r\n-                      format(field.value, 'PPP HH:mm:ss')\r\n-                    ) : (\r\n-                      <span>Pick a date and time</span>\r\n-                    )}\r\n-                  </Button>\r\n-                </PopoverTrigger>\r\n-                <PopoverContent\r\n-                  className=\"w-auto p-0 z-[3000]\"\r\n-                  align=\"start\"\r\n-                  ref={popoverRef}\r\n-                  // Prevent closing the popover when clicking inside the content\r\n-                  onClick={(e) => e.stopPropagation()}\r\n-                >\r\n-                  <div>\r\n                     <Calendar\r\n                       mode=\"single\"\r\n                       selected={date}\r\n                       onSelect={(newDate) => {\r\n@@ -109,9 +110,9 @@\n                         date > new Date() || date < new Date('1900-01-01')\r\n                       }\r\n                       initialFocus\r\n                     />\r\n-                    <div className=\"p-3 border-t border-border\">\r\n+                    <div className=\"p-3 border-t border-gray-200\">\r\n                       <TimePicker\r\n                         setDate={(newDate) => {\r\n                           field.onChange(newDate);\r\n                           setDate(newDate);\r\n@@ -119,10 +120,10 @@\n                         date={field.value}\r\n                       />\r\n                     </div>\r\n                   </div>\r\n-                </PopoverContent>\r\n-              </Popover>\r\n+                )}\r\n+              </div>\r\n               <FormMessage />\r\n             </FormItem>\r\n           )}\r\n         />\r\n"
                }
            ],
            "date": 1727590726873,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { date, z } from 'zod';\r\nimport {\r\n  Form,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '../ui/form';\r\nimport { Button } from '../ui/button';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { CalendarIcon } from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\nimport { format } from 'date-fns';\r\nimport { Calendar } from '../ui/calendar';\r\nimport { TimePicker } from '../ui/time-picker';\r\n\r\nconst formSchema = z.object({\r\n  dateTime: z.date(),\r\n});\r\ntype FormSchemaType = z.infer<typeof formSchema>;\r\n\r\nexport default function DateTimePickerForm() {\r\n  const form = useForm<FormSchemaType>({\r\n    resolver: zodResolver(formSchema),\r\n  });\r\n\r\n  function onSubmit(values: FormSchemaType) {\r\n    console.log(values);\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\r\n        <FormField\r\n          control={form.control}\r\n          name='dateTime'\r\n          render={({ field }) => (\r\n            <FormItem className='flex flex-col items-start'>\r\n              <FormLabel>DateTime</FormLabel>\r\n              {/* popover */}\r\n              <Popover>\r\n                <PopoverTrigger asChild>\r\n                  <Button\r\n                    variant={'outline'}\r\n                    className={cn(\r\n                      'w-[280px] justify-start text-left font-normal',\r\n                      !field.value && 'text-muted-foreground'\r\n                    )}\r\n                  >\r\n                    <CalendarIcon className='mr-2 h-4 w-4' />\r\n                    {field.value ? (\r\n                      format(field.value, 'PPP HH:mm:ss')\r\n                    ) : (\r\n                      <span>Pick a date</span>\r\n                    )}\r\n                  </Button>\r\n                </PopoverTrigger>\r\n                <PopoverContent className='w-auto p-0'>\r\n                  <Calendar\r\n                    mode='single'\r\n                    selected={field.value}\r\n                    onSelect={field.onChange}\r\n                    disabled={(date) =>\r\n                      date > new Date() || date < new Date('1900-01-01')\r\n                    }\r\n                    initialFocus\r\n                  />\r\n                  <div className='p-3 border-t border-border'>\r\n                    <TimePicker setDate={field.onChange} date={field.value} />\r\n                  </div>\r\n                </PopoverContent>\r\n              </Popover>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <Button type='submit'>Submit</Button>\r\n      </form>\r\n    </Form>\r\n  );\r\n}"
        }
    ]
}