{
    "sourceFile": "src/components/ui/time-picker-input.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1727576109904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1727576109904,
            "name": "Commit-0",
            "content": "import { Input } from '@/components/ui/input';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport React from 'react';\r\nimport {\r\n    Period,\r\n    TimePickerType,\r\n    getArrowByType,\r\n    getDateByType,\r\n    setDateByType,\r\n  } from './time-picker-utlis'\r\n\r\nexport interface TimePickerInputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  picker: TimePickerType;\r\n  date: Date | undefined;\r\n  setDate: (date: Date | undefined) => void;\r\n  period?: Period;\r\n  onRightFocus?: () => void;\r\n  onLeftFocus?: () => void;\r\n}\r\n\r\nconst TimePickerInput = React.forwardRef<\r\n  HTMLInputElement,\r\n  TimePickerInputProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      type = 'tel',\r\n      value,\r\n      id,\r\n      name,\r\n      date = new Date(new Date().setHours(0, 0, 0, 0)),\r\n      setDate,\r\n      onChange,\r\n      onKeyDown,\r\n      picker,\r\n      period,\r\n      onLeftFocus,\r\n      onRightFocus,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [flag, setFlag] = React.useState<boolean>(false);\r\n    const [prevIntKey, setPrevIntKey] = React.useState<string>('0');\r\n\r\n    /**\r\n     * allow the user to enter the second digit within 2 seconds\r\n     * otherwise start again with entering first digit\r\n     */\r\n    React.useEffect(() => {\r\n      if (flag) {\r\n        const timer = setTimeout(() => {\r\n          setFlag(false);\r\n        }, 2000);\r\n\r\n        return () => clearTimeout(timer);\r\n      }\r\n    }, [flag]);\r\n\r\n    const calculatedValue = React.useMemo(() => {\r\n      return getDateByType(date, picker);\r\n    }, [date, picker]);\r\n\r\n    const calculateNewValue = (key: string) => {\r\n      /*\r\n       * If picker is '12hours' and the first digit is 0, then the second digit is automatically set to 1.\r\n       * The second entered digit will break the condition and the value will be set to 10-12.\r\n       */\r\n      if (picker === '12hours') {\r\n        if (flag && calculatedValue.slice(1, 2) === '1' && prevIntKey === '0')\r\n          return '0' + key;\r\n      }\r\n\r\n      return !flag ? '0' + key : calculatedValue.slice(1, 2) + key;\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Tab') return;\r\n      e.preventDefault();\r\n      if (e.key === 'ArrowRight') onRightFocus?.();\r\n      if (e.key === 'ArrowLeft') onLeftFocus?.();\r\n      if (['ArrowUp', 'ArrowDown'].includes(e.key)) {\r\n        const step = e.key === 'ArrowUp' ? 1 : -1;\r\n        const newValue = getArrowByType(calculatedValue, step, picker);\r\n        if (flag) setFlag(false);\r\n        const tempDate = new Date(date);\r\n        setDate(setDateByType(tempDate, newValue, picker, period));\r\n      }\r\n      if (e.key >= '0' && e.key <= '9') {\r\n        if (picker === '12hours') setPrevIntKey(e.key);\r\n\r\n        const newValue = calculateNewValue(e.key);\r\n        if (flag) onRightFocus?.();\r\n        setFlag((prev) => !prev);\r\n        const tempDate = new Date(date);\r\n        setDate(setDateByType(tempDate, newValue, picker, period));\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Input\r\n        ref={ref}\r\n        id={id || picker}\r\n        name={name || picker}\r\n        className={cn(\r\n          'w-[48px] text-center font-mono text-base tabular-nums caret-transparent focus:bg-accent focus:text-accent-foreground [&::-webkit-inner-spin-button]:appearance-none',\r\n          className\r\n        )}\r\n        value={value || calculatedValue}\r\n        onChange={(e) => {\r\n          e.preventDefault();\r\n          onChange?.(e);\r\n        }}\r\n        type={type}\r\n        inputMode='decimal'\r\n        onKeyDown={(e) => {\r\n          onKeyDown?.(e);\r\n          handleKeyDown(e);\r\n        }}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nTimePickerInput.displayName = 'TimePickerInput';\r\n\r\nexport { TimePickerInput };"
        }
    ]
}