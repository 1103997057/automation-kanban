{
    "sourceFile": "src/components/ui/resizable-navbar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743839628799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743840324546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   isOpen: boolean;\r\n   onClose: () => void;\r\n }\r\n \r\n-export const Navbar = ({ children, className }: NavbarProps) => {\r\n+export const ResizableNavbar = ({ children, className }: NavbarProps) => {\r\n   const ref = useRef<HTMLDivElement>(null);\r\n   const { scrollY } = useScroll({\r\n     target: ref,\r\n     offset: [\"start start\", \"end start\"],\r\n"
                }
            ],
            "date": 1743839628799,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { IconMenu2, IconX } from \"@tabler/icons-react\";\r\nimport {\r\n  motion,\r\n  AnimatePresence,\r\n  useScroll,\r\n  useMotionValueEvent,\r\n} from \"motion/react\";\r\nimport Link from \"next/link\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport Image from \"next/image\";\r\n\r\ninterface NavbarProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface NavBodyProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  visible?: boolean;\r\n}\r\n\r\ninterface NavItemsProps {\r\n  items: {\r\n    name: string;\r\n    link: string;\r\n  }[];\r\n  className?: string;\r\n  onItemClick?: () => void;\r\n}\r\n\r\ninterface MobileNavProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  visible?: boolean;\r\n}\r\n\r\ninterface MobileNavHeaderProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface MobileNavMenuProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const Navbar = ({ children, className }: NavbarProps) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const { scrollY } = useScroll({\r\n    target: ref,\r\n    offset: [\"start start\", \"end start\"],\r\n  });\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n\r\n  useMotionValueEvent(scrollY, \"change\", (latest) => {\r\n    if (latest > 100) {\r\n      setVisible(true);\r\n    } else {\r\n      setVisible(false);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      // IMPORTANT: Change this to class of `fixed` if you want the navbar to be fixed\r\n      className={cn(\"sticky inset-x-0 top-20 z-40 w-full\", className)}\r\n    >\r\n      {React.Children.map(children, (child) =>\r\n        React.isValidElement(child)\r\n          ? React.cloneElement(\r\n              child as React.ReactElement<{ visible?: boolean }>,\r\n              { visible },\r\n            )\r\n          : child,\r\n      )}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport const NavBody = ({ children, className, visible }: NavBodyProps) => {\r\n  return (\r\n    <motion.div\r\n      animate={{\r\n        backdropFilter: visible ? \"blur(10px)\" : \"none\",\r\n        boxShadow: visible\r\n          ? \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\"\r\n          : \"none\",\r\n        width: visible ? \"40%\" : \"100%\",\r\n        y: visible ? 20 : 0,\r\n      }}\r\n      transition={{\r\n        type: \"spring\",\r\n        stiffness: 200,\r\n        damping: 50,\r\n      }}\r\n      style={{\r\n        minWidth: \"800px\",\r\n      }}\r\n      className={cn(\r\n        \"relative z-[60] mx-auto hidden w-full max-w-7xl flex-row items-center justify-between self-start rounded-full bg-transparent px-4 py-2 lg:flex dark:bg-transparent\",\r\n        visible && \"bg-white/80 dark:bg-neutral-950/80\",\r\n        className,\r\n      )}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport const NavItems = ({ items, className, onItemClick }: NavItemsProps) => {\r\n  const [hovered, setHovered] = useState<number | null>(null);\r\n\r\n  return (\r\n    <motion.div\r\n      onMouseLeave={() => setHovered(null)}\r\n      className={cn(\r\n        \"absolute inset-0 hidden flex-1 flex-row items-center justify-center space-x-2 text-sm font-medium text-zinc-600 transition duration-200 hover:text-zinc-800 lg:flex lg:space-x-2\",\r\n        className,\r\n      )}\r\n    >\r\n      {items.map((item, idx) => (\r\n        <Link\r\n          onMouseEnter={() => setHovered(idx)}\r\n          onClick={onItemClick}\r\n          className=\"relative px-4 py-2 text-neutral-600 dark:text-neutral-300\"\r\n          key={`link-${idx}`}\r\n          href={item.link}\r\n        >\r\n          {hovered === idx && (\r\n            <motion.div\r\n              layoutId=\"hovered\"\r\n              className=\"absolute inset-0 h-full w-full rounded-full bg-gray-100 dark:bg-neutral-800\"\r\n            />\r\n          )}\r\n          <span className=\"relative z-20\">{item.name}</span>\r\n        </Link>\r\n      ))}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport const MobileNav = ({ children, className, visible }: MobileNavProps) => {\r\n  return (\r\n    <motion.div\r\n      animate={{\r\n        backdropFilter: visible ? \"blur(10px)\" : \"none\",\r\n        boxShadow: visible\r\n          ? \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\"\r\n          : \"none\",\r\n        width: visible ? \"90%\" : \"100%\",\r\n        paddingRight: visible ? \"12px\" : \"0px\",\r\n        paddingLeft: visible ? \"12px\" : \"0px\",\r\n        borderRadius: visible ? \"4px\" : \"2rem\",\r\n        y: visible ? 20 : 0,\r\n      }}\r\n      transition={{\r\n        type: \"spring\",\r\n        stiffness: 200,\r\n        damping: 50,\r\n      }}\r\n      className={cn(\r\n        \"relative z-50 mx-auto flex w-full max-w-[calc(100vw-2rem)] flex-col items-center justify-between bg-transparent px-0 py-2 lg:hidden\",\r\n        visible && \"bg-white/80 dark:bg-neutral-950/80\",\r\n        className,\r\n      )}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport const MobileNavHeader = ({\r\n  children,\r\n  className,\r\n}: MobileNavHeaderProps) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex w-full flex-row items-center justify-between\",\r\n        className,\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const MobileNavMenu = ({\r\n  children,\r\n  className,\r\n  isOpen,\r\n  onClose,\r\n}: MobileNavMenuProps) => {\r\n  return (\r\n    <AnimatePresence>\r\n      {isOpen && (\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          className={cn(\r\n            \"absolute inset-x-0 top-16 z-50 flex w-full flex-col items-start justify-start gap-4 rounded-lg bg-white px-4 py-8 shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset] dark:bg-neutral-950\",\r\n            className,\r\n          )}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport const MobileNavToggle = ({\r\n  isOpen,\r\n  onClick,\r\n}: {\r\n  isOpen: boolean;\r\n  onClick: () => void;\r\n}) => {\r\n  return isOpen ? (\r\n    <IconX className=\"text-black dark:text-white\" onClick={onClick} />\r\n  ) : (\r\n    <IconMenu2 className=\"text-black dark:text-white\" onClick={onClick} />\r\n  );\r\n};\r\n\r\nexport const NavbarLogo = () => {\r\n  return (\r\n    <Link\r\n      href=\"#\"\r\n      className=\"relative z-20 mr-4 flex items-center space-x-2 px-2 py-1 text-sm font-normal text-black\"\r\n    >\r\n      <Image\r\n        src=\"https://assets.aceternity.com/logo-dark.png\"\r\n        alt=\"logo\"\r\n        width={30}\r\n        height={30}\r\n      />\r\n      <span className=\"font-medium text-black dark:text-white\">Startup</span>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport const NavbarButton = ({\r\n  href,\r\n  as: Tag = \"a\",\r\n  children,\r\n  className,\r\n  variant = \"primary\",\r\n  ...props\r\n}: {\r\n  href?: string;\r\n  as?: React.ElementType;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  variant?: \"primary\" | \"secondary\" | \"dark\" | \"gradient\";\r\n} & (\r\n  | React.ComponentPropsWithoutRef<\"a\">\r\n  | React.ComponentPropsWithoutRef<\"button\">\r\n)) => {\r\n  const baseStyles =\r\n    \"px-4 py-2 rounded-md bg-white button bg-white text-black text-sm font-bold relative cursor-pointer hover:-translate-y-0.5 transition duration-200 inline-block text-center\";\r\n\r\n  const variantStyles = {\r\n    primary:\r\n      \"shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset]\",\r\n    secondary: \"bg-transparent shadow-none dark:text-white\",\r\n    dark: \"bg-black text-white shadow-[0_0_24px_rgba(34,_42,_53,_0.06),_0_1px_1px_rgba(0,_0,_0,_0.05),_0_0_0_1px_rgba(34,_42,_53,_0.04),_0_0_4px_rgba(34,_42,_53,_0.08),_0_16px_68px_rgba(47,_48,_55,_0.05),_0_1px_0_rgba(255,_255,_255,_0.1)_inset]\",\r\n    gradient:\r\n      \"bg-gradient-to-b from-blue-500 to-blue-700 text-white shadow-[0px_2px_0px_0px_rgba(255,255,255,0.3)_inset]\",\r\n  };\r\n\r\n  return (\r\n    <Tag\r\n      href={href || undefined}\r\n      className={cn(baseStyles, variantStyles[variant], className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Tag>\r\n  );\r\n};\r\n"
        }
    ]
}