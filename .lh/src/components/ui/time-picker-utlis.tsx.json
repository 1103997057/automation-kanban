{
    "sourceFile": "src/components/ui/time-picker-utlis.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1727576109904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1727576109904,
            "name": "Commit-0",
            "content": "/**\r\n * regular expression to check for valid hour format (01-23)\r\n */\r\nexport function isValidHour(value: string) {\r\n    return /^(0[0-9]|1[0-9]|2[0-3])$/.test(value);\r\n  }\r\n  \r\n  /**\r\n   * regular expression to check for valid 12 hour format (01-12)\r\n   */\r\n  export function isValid12Hour(value: string) {\r\n    return /^(0[1-9]|1[0-2])$/.test(value);\r\n  }\r\n  \r\n  /**\r\n   * regular expression to check for valid minute format (00-59)\r\n   */\r\n  export function isValidMinuteOrSecond(value: string) {\r\n    return /^[0-5][0-9]$/.test(value);\r\n  }\r\n  \r\n  type GetValidNumberConfig = { max: number; min?: number; loop?: boolean };\r\n  \r\n  export function getValidNumber(\r\n    value: string,\r\n    { max, min = 0, loop = false }: GetValidNumberConfig\r\n  ) {\r\n    let numericValue = parseInt(value, 10);\r\n  \r\n    if (!isNaN(numericValue)) {\r\n      if (!loop) {\r\n        if (numericValue > max) numericValue = max;\r\n        if (numericValue < min) numericValue = min;\r\n      } else {\r\n        if (numericValue > max) numericValue = min;\r\n        if (numericValue < min) numericValue = max;\r\n      }\r\n      return numericValue.toString().padStart(2, '0');\r\n    }\r\n  \r\n    return '00';\r\n  }\r\n  \r\n  export function getValidHour(value: string) {\r\n    if (isValidHour(value)) return value;\r\n    return getValidNumber(value, { max: 23 });\r\n  }\r\n  \r\n  export function getValid12Hour(value: string) {\r\n    if (isValid12Hour(value)) return value;\r\n    return getValidNumber(value, { min: 1, max: 12 });\r\n  }\r\n  \r\n  export function getValidMinuteOrSecond(value: string) {\r\n    if (isValidMinuteOrSecond(value)) return value;\r\n    return getValidNumber(value, { max: 59 });\r\n  }\r\n  \r\n  type GetValidArrowNumberConfig = {\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n  };\r\n  \r\n  export function getValidArrowNumber(\r\n    value: string,\r\n    { min, max, step }: GetValidArrowNumberConfig\r\n  ) {\r\n    let numericValue = parseInt(value, 10);\r\n    if (!isNaN(numericValue)) {\r\n      numericValue += step;\r\n      return getValidNumber(String(numericValue), { min, max, loop: true });\r\n    }\r\n    return '00';\r\n  }\r\n  \r\n  export function getValidArrowHour(value: string, step: number) {\r\n    return getValidArrowNumber(value, { min: 0, max: 23, step });\r\n  }\r\n  \r\n  export function getValidArrow12Hour(value: string, step: number) {\r\n    return getValidArrowNumber(value, { min: 1, max: 12, step });\r\n  }\r\n  \r\n  export function getValidArrowMinuteOrSecond(value: string, step: number) {\r\n    return getValidArrowNumber(value, { min: 0, max: 59, step });\r\n  }\r\n  \r\n  export function setMinutes(date: Date, value: string) {\r\n    const minutes = getValidMinuteOrSecond(value);\r\n    date.setMinutes(parseInt(minutes, 10));\r\n    return date;\r\n  }\r\n  \r\n  export function setSeconds(date: Date, value: string) {\r\n    const seconds = getValidMinuteOrSecond(value);\r\n    date.setSeconds(parseInt(seconds, 10));\r\n    return date;\r\n  }\r\n  \r\n  export function setHours(date: Date, value: string) {\r\n    const hours = getValidHour(value);\r\n    date.setHours(parseInt(hours, 10));\r\n    return date;\r\n  }\r\n  \r\n  export function set12Hours(date: Date, value: string, period: Period) {\r\n    const hours = parseInt(getValid12Hour(value), 10);\r\n    const convertedHours = convert12HourTo24Hour(hours, period);\r\n    date.setHours(convertedHours);\r\n    return date;\r\n  }\r\n  \r\n  export type TimePickerType = 'minutes' | 'seconds' | 'hours' | '12hours';\r\n  export type Period = 'AM' | 'PM';\r\n  \r\n  export function setDateByType(\r\n    date: Date,\r\n    value: string,\r\n    type: TimePickerType,\r\n    period?: Period\r\n  ) {\r\n    switch (type) {\r\n      case 'minutes':\r\n        return setMinutes(date, value);\r\n      case 'seconds':\r\n        return setSeconds(date, value);\r\n      case 'hours':\r\n        return setHours(date, value);\r\n      case '12hours': {\r\n        if (!period) return date;\r\n        return set12Hours(date, value, period);\r\n      }\r\n      default:\r\n        return date;\r\n    }\r\n  }\r\n  \r\n  export function getDateByType(date: Date, type: TimePickerType) {\r\n    switch (type) {\r\n      case 'minutes':\r\n        return getValidMinuteOrSecond(String(date.getMinutes()));\r\n      case 'seconds':\r\n        return getValidMinuteOrSecond(String(date.getSeconds()));\r\n      case 'hours':\r\n        return getValidHour(String(date.getHours()));\r\n      case '12hours':\r\n        const hours = display12HourValue(date.getHours());\r\n        return getValid12Hour(String(hours));\r\n      default:\r\n        return '00';\r\n    }\r\n  }\r\n  \r\n  export function getArrowByType(\r\n    value: string,\r\n    step: number,\r\n    type: TimePickerType\r\n  ) {\r\n    switch (type) {\r\n      case 'minutes':\r\n        return getValidArrowMinuteOrSecond(value, step);\r\n      case 'seconds':\r\n        return getValidArrowMinuteOrSecond(value, step);\r\n      case 'hours':\r\n        return getValidArrowHour(value, step);\r\n      case '12hours':\r\n        return getValidArrow12Hour(value, step);\r\n      default:\r\n        return '00';\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * handles value change of 12-hour input\r\n   * 12:00 PM is 12:00\r\n   * 12:00 AM is 00:00\r\n   */\r\n  export function convert12HourTo24Hour(hour: number, period: Period) {\r\n    if (period === 'PM') {\r\n      if (hour <= 11) {\r\n        return hour + 12;\r\n      } else {\r\n        return hour;\r\n      }\r\n    } else if (period === 'AM') {\r\n      if (hour === 12) return 0;\r\n      return hour;\r\n    }\r\n    return hour;\r\n  }\r\n  \r\n  /**\r\n   * time is stored in the 24-hour form,\r\n   * but needs to be displayed to the user\r\n   * in its 12-hour representation\r\n   */\r\n  export function display12HourValue(hours: number) {\r\n    if (hours === 0 || hours === 12) return '12';\r\n    if (hours >= 22) return `${hours - 12}`;\r\n    if (hours % 12 > 9) return `${hours}`;\r\n    return `0${hours % 12}`;\r\n  }"
        }
    ]
}